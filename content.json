{"meta":{"title":"Sinky's Blog","subtitle":"","description":"","author":"Sinky","url":"https://github.com/SinkyQ/sinkyhexo.github.io.git","root":"/SinkyQ/sinkyhexo.github.io.git/"},"pages":[{"title":"Sinky's Blog","date":"2022-08-08T03:20:20.867Z","updated":"2022-08-08T03:20:20.867Z","comments":false,"path":"about/index.html","permalink":"https://github.com/SinkyQ/sinkyhexo.github.io.git/about/index.html","excerpt":"","text":"联系方式v:Sinky94674关于我：一个正在找工作的二进制菜狗"}],"posts":[{"title":"《ARM嵌入式Linux系统开发详解》学习笔记1","slug":"《ARM嵌入式Linux系统开发》学习笔记1","date":"2022-08-09T03:21:41.844Z","updated":"2020-11-13T02:33:24.962Z","comments":true,"path":"2022/08/09/《ARM嵌入式Linux系统开发》学习笔记1/","link":"","permalink":"https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/","excerpt":"","text":"0x01 嵌入式系统入门什么是嵌入式系统： 一种为特定设备服务的，软件硬件可裁剪的计算机系统，形式变化多样、体积小。如手机、微波炉，对于手机、微波炉来说，需要小型计算机来控制，换句话，是需要把计算机全入到手机和微波炉里，也就是嵌入式系统，不需要严格地响应时间和数据吞吐量，最关键的是能够缩小体积以及功能专门化，嵌入式系统种类繁多，按照系统硬件的核心处理器来说可以分成嵌入式微控制器和嵌入式微处理器。 嵌入式微控制器： 嵌入式微控制器也就是传统意义上的单片机，是目前嵌入式系统的前身。单片机就是把一个计算机的主要功能集成到一个芯片上，即一个芯片就是一个计算机，体积小、结构简单、便于开发以及价格经济。 通常一个单片机芯片包含运算处理单元、ARM、Flash存储器以及外部接口，通过外部接口可以输出或者输入心寒，控制相应的设备，用户可以把编写好的代码烧写到单片机芯片内部来控制外部设备。 嵌入式微处理器： 单片机处理能力低，嵌入式微处理器是最近几年随着大规模集成电路发展同步，处理能力更强，目前主流嵌入式微处理器都是32位，而单片机多是8位和16位。 典型嵌入式系统组成： 嵌入式系统与传统PC一样，也是一种及计算机系统，由硬件和软件组成，硬件包括嵌入式微控制器和微处理器，以及一些外围元器件和外部设备；软件包括嵌入式操作系统和应用软件。 嵌入式系统种类繁多，不同的嵌入式系统软、硬件很难兼容，软件必须修改而硬件必须重新设计才能使用。 典型嵌入式系统: 硬件： 嵌入式处理器：处理器是整个系统的核心，负责处理所有的软件程序以及外部设备的信号 外部设备：在不同系统中有不同选择。 软件： 嵌入式操作系统：是软硬件的接口，负责管理系统的所有软件和硬件资源，还可以通过驱动程序与外部设备打交道。 应用软件：利用操作系统提供的功能开发出针对某个需求的程序，供用户使用。 0x02 嵌入式软硬件系统数字电路是计算机的基础。 进制转换 计算机组成原理 直接内存访问：DMA 软件：系统软件、应用软件 软件开发：需求分析、概要设计和详细设计、编码和调试、测试和维护。 常见软件开发模型：瀑布开发模型、增量开发模型、统一软件开发模型。 操作系统的基本结构都是内核、驱动程序、程序库。 0x03 ARM处理器 微处理器 通用微处理器：用于高性能计算 嵌入式微处理器：针对某种特定应用的高能力计算 微控制器：用于控制某种设备，通常集成了多种外部设备控制器，处理指令能力不强但价格低廉。 ARM:高性能RISC机器。 芯片体积小，功耗低，成本低性能优异 支持Thumb(16位)和ARM(32位) 内部大量使用寄存器，执行指令速度快。 大部分指令是操作寄存器，很少访问外部内存 采用多级流水线结构处理速度快。 多种寻址方式，数据存取方式灵活 指令长度固定，便于编译器操作以及执行指令 ARM指令集 算术运算指令 ADD:加法运算 add dest,op1,op2 //dest是目的寄存器，op1 op2是操作数,dest=op1+op2 ADC:带进位加法 ADC dest,op1,op2 SUB:减法 sub dest,op1,op2 dest=op1-op2 SBC：带进位减法 逻辑运算指令 AND:逻辑与(1 1为1，0 0为1，1 0为0) and dest,op1,op2 dest=op1 and op2 EOR:异或（1 1为0，0 0为0，10为1） MOV:复制数据 mov dest,op1 dest=op1 mov r0,r0,LSL#3//r0=r0*8,LSL寄存器左移三位，即乘以8 分支指令 B:跳转 b 地址 //跳转到指定地址 数据传送指令 单一数据传送指令：向内存装载和存储一个字节或一个字长的数据 LDR Rd,地址 STR Rd,地址 LDR B Rd,地址 STR B Rd,地址 多数据传送指令：向内存装载和存储多个字节或字的数据 xxM Rn(!),&lt;寄存器列表&gt;{^} xx:LD–装载，ST–存储 LDMED LDMIB//++i LDMFD LDMIA//i++ LDMEA LDMDB//++*i LDMFA LDMDA//*i++ STMFA STMIB//存储前增加地址 STMEA STMIA//存储后增加地址 STMFD STMDB//存储前增加值 STMED STMDA//存储后增加值 ARM状态：0位表示ARM状态，1位表示Thumb状态,BX指令切换状态。 MMU:内存管理单元。 LSL:逻辑左移，二进制从右往左移动，空位补0（就是原数值乘以2的移位次方）LSR:逻辑右移，二进制从左往右，空位补0ASR:算术右移，符号位不变，高位空出补0，低位补1ROR:循环右移，低位移到高位RRX:带扩展的循环右移：操作数右移一位，高端空出位用原C标志值填充 寻址方式 立即寻址:用#表示数值 subs r0,#1;r0=r0-1 mov r0,#0xff00;r0=0xff00 寄存器寻址方式：读取寄存器得到操作数 mov r1,r2;r1=r2 sub r0,r1,r2;r0=r1-r2 寄存器偏移寻址：寄存器的值移位得结果 mov r0,r1,LSL #3;r0=r1*8 ands r0,r2,LSL #3;r0= r2*8 and r1 寄存器间接寻址：寄存器为地址，从对应内存重取出数据 LDR r0,[r1];r1为地址，从内存中取出数据存入r0 SWP r0,r0,[r1];r1为地址，从内存中取出数据与r0交换 基址寻址：把寄存器内容与指定便宜相加，得数据地址，后从内存中取出数据 LDR r0,[r1,#0xf];r1数值与0xf相加得到数据地址 STR r0,[r1,#-2];r1数值-2得到数据地址 多寄存器寻址：一次传输多个寄存器值 LDMIA r1!,{r2r7,r12};r1单元重数据读到r2r7和r12,r1指定地址自动加1 栈寻址：先进后出，通过栈指针寄存器寻址 STMFD SP!,{R0R7,LR};r0r7和LR的内容压入堆栈 LDMFD SP!,{r0r7,LR};从堆栈中取出数据到r0r7和LR 0x04 嵌入式Linux一般来说，嵌入式操作系统是由启动程序、核心、根文件系统组成，通过特殊的烧录工具将编译好的嵌入式系统文件影像烧写到目标板的只读存储器（ROM）或Flash存储器中。 0x05 建立软件开发环境 运行在windows平台下得到Linux系统模拟环境：Cygwin. linux下：串口工具minicom windows下：串口工具xshell ARM集成开发环境ADS c语言编译器armcc c++语言编译器armcpp 0x06 第一个linux应用程序 vi创建源代码文件hello.c gcc -c hello.c 编译运行 0x07 Linux应用程序编程基础 堆栈 内存管理函数 malloc():分配内存，不能初始化内存空间 free()：释放malloc()分配的内存 实用的内存分配函数 calloc():分配一块新内存，向应用程序分诶内存，分配后会初始化新分配的内存空间 realloc():改变一块已经分配的内存大小，函数调整后的内存空间起始地址有可能与原来的不同，所以需要realloc()函数的返回值。 文件指针和流：FILE*fp getc() /fgetc() /getchar() POSIX文件I/O编程 POSIX可移植操作系统接口 open() /creat() /close() /read() /write() /fcnt()修改一打开文件属性 文件头： &lt;sys/types.h&gt; &lt;sys/stat.h&gt; &lt;fcntl.h&gt; 0x08 开发多进程/线程程序 PCB进程控制块 fork()调用创建进程 退出进程：exit()、_exit()、atexit()、on_exit(). 常用进程间通信方法： 管道：单方向传送数据，只能在有共同父进程的进程间使用 pipe()函数：创建管道 #include&lt;unistd.h&gt; int pipe(int filedes[1]); 共享内存：不同进程可访问 int shmget():创建 void *shmat：获得一个共享内存ID对应的内存其实地址 int shmdt：从程序中分立一块共享内存 FIFO 消息队列 信号量 共享存储 socker Linux的多进程和多线程 0x09 网络通信应用 TCP/IP协议簇 IP协议：在传输层，负责数据包的传输管理 实现两个功能：寻址和分段","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Win10下使用Hexo搭建个人博客","slug":"Win10下使用Hexo搭建个人博客","date":"2022-08-07T08:48:45.000Z","updated":"2022-08-07T13:51:00.834Z","comments":true,"path":"2022/08/07/Win10下使用Hexo搭建个人博客/","link":"","permalink":"https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"下载安装git、nodejs下载地址: git: https://git-scm.com/ nodejs: http://nodejs.cn/download/ 将nodejs加入path环境变量中。打开cmd测试： 报错1：输入 npm-v 出现报错: npm WARN config global --global, --local are deprecated. Use `–location 解决方法：打开nodejs安装位置文件夹，打开npm.cmd和npm，将文件中的prefix -g替换为prefix --location=global,保存后重新打开cmd测试即可。 安装hexo换源（淘宝源）npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm -v 查看版本以及是否安装成功。 安装hexocnpm install -g hexo-cli hexo -v 新建文件夹放置博客内容，在cmd中进入所建立的目录： hexo init #初始化hexo hexo s #启动hexo 访问 http://localhost:4000/如下即成功： 新建文章hexo new &quot;文章标题&quot; 在目录&#x2F;source&#x2F;_posts&#x2F;下生成文件.md更新文章： hexo clean hexo g hexo s 部署github1、建立一个新的库，命名需要符合规则：username.gitgub.io2、命令行输入： cnpm install --save hexo-deployer-git 3、更改设置 找到_config.yml文件，翻到最底部 将type改为git 添加repo: &quot;此处为仓库地址&quot; 添加branch: master repo为仓库地址 branch为master即可 4、部署到远端 git config --global user.email &quot;xxx(此处为邮箱)&quot; git config --global user.name &quot;xxx(此处为用户名)&quot; #github用户名 hexo d 弹出网页提示是否关联git和github 授权即可","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]}